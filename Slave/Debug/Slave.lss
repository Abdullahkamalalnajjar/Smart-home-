
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002edc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002edc  00002f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800168  00800168  00003078  2**0
                  ALLOC
  3 .stab         00003750  00000000  00000000  00003078  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001df7  00000000  00000000  000067c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000085bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000875f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008951  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ad5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d478  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d76e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 37       	cpi	r26, 0x7D	; 125
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ed       	ldi	r30, 0xDC	; 220
      78:	fe e2       	ldi	r31, 0x2E	; 46
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
uint8 request;
uint8 option;
uint8 g_stateRoom;
uint8 ret=0;
uint8 temp;
int main(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	62 97       	sbiw	r28, 0x12	; 18
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(PORTC_ID, PIN2_ID,PIN_OUTPUT);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	62 e0       	ldi	r22, 0x02	; 2
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN3_ID,PIN_OUTPUT);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN4_ID,PIN_OUTPUT);
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	64 e0       	ldi	r22, 0x04	; 4
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN5_ID,PIN_OUTPUT);
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	65 e0       	ldi	r22, 0x05	; 5
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN6_ID,PIN_OUTPUT);
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	66 e0       	ldi	r22, 0x06	; 6
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN7_ID,PIN_OUTPUT);
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	67 e0       	ldi	r22, 0x07	; 7
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID,PIN_OUTPUT);
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>

	DCMOTOR_init();
     e88:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <DCMOTOR_init>
	/*Initializing UART*/
	UART_init(9600);
     e8c:	60 e8       	ldi	r22, 0x80	; 128
     e8e:	75 e2       	ldi	r23, 0x25	; 37
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_init>
	ADC_ConfigType CONFIG = {PRESCALER_8,AVCC };
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	8f 87       	std	Y+15, r24	; 0x0f
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	88 8b       	std	Y+16, r24	; 0x10
	ADC_init(&CONFIG);
     ea0:	ce 01       	movw	r24, r28
     ea2:	0f 96       	adiw	r24, 0x0f	; 15
     ea4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <ADC_init>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a8 ec       	ldi	r26, 0xC8	; 200
     eae:	b2 e4       	ldi	r27, 0x42	; 66
     eb0:	8b 87       	std	Y+11, r24	; 0x0b
     eb2:	9c 87       	std	Y+12, r25	; 0x0c
     eb4:	ad 87       	std	Y+13, r26	; 0x0d
     eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eba:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a ef       	ldi	r20, 0xFA	; 250
     ec6:	54 e4       	ldi	r21, 0x44	; 68
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8f 83       	std	Y+7, r24	; 0x07
     ed2:	98 87       	std	Y+8, r25	; 0x08
     ed4:	a9 87       	std	Y+9, r26	; 0x09
     ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed8:	6f 81       	ldd	r22, Y+7	; 0x07
     eda:	78 85       	ldd	r23, Y+8	; 0x08
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <main+0xcc>
		__ticks = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	3f c0       	rjmp	.+126    	; 0xf78 <main+0x14a>
	else if (__tmp > 65535)
     efa:	6f 81       	ldd	r22, Y+7	; 0x07
     efc:	78 85       	ldd	r23, Y+8	; 0x08
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	9a 85       	ldd	r25, Y+10	; 0x0a
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	4c f5       	brge	.+82     	; 0xf64 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	6b 85       	ldd	r22, Y+11	; 0x0b
     f14:	7c 85       	ldd	r23, Y+12	; 0x0c
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <main+0x12c>
     f3c:	88 ec       	ldi	r24, 0xC8	; 200
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <main+0x11a>
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f7       	brne	.-38     	; 0xf3c <main+0x10e>
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	6f 81       	ldd	r22, Y+7	; 0x07
     f66:	78 85       	ldd	r23, Y+8	; 0x08
     f68:	89 85       	ldd	r24, Y+9	; 0x09
     f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <main+0x156>
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	setGuestPassword(password,password_guest);
     f8c:	8b e6       	ldi	r24, 0x6B	; 107
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	25 e7       	ldi	r18, 0x75	; 117
     f92:	31 e0       	ldi	r19, 0x01	; 1
     f94:	b9 01       	movw	r22, r18
     f96:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <setGuestPassword>
	setAdminPassword(password,password_admin);
     f9a:	8b e6       	ldi	r24, 0x6B	; 107
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	22 e7       	ldi	r18, 0x72	; 114
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 99 08 	call	0x1132	; 0x1132 <setAdminPassword>

	while(1){
		ret=0;
     fa8:	10 92 68 01 	sts	0x0168, r1
		request = UART_recieveByte();
     fac:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
     fb0:	80 93 71 01 	sts	0x0171, r24
		switch(request){
     fb4:	80 91 71 01 	lds	r24, 0x0171
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3a 8b       	std	Y+18, r19	; 0x12
     fbe:	29 8b       	std	Y+17, r18	; 0x11
     fc0:	89 89       	ldd	r24, Y+17	; 0x11
     fc2:	9a 89       	ldd	r25, Y+18	; 0x12
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	31 f0       	breq	.+12     	; 0xfd4 <main+0x1a6>
     fc8:	29 89       	ldd	r18, Y+17	; 0x11
     fca:	3a 89       	ldd	r19, Y+18	; 0x12
     fcc:	21 30       	cpi	r18, 0x01	; 1
     fce:	31 05       	cpc	r19, r1
     fd0:	49 f0       	breq	.+18     	; 0xfe4 <main+0x1b6>
     fd2:	ea cf       	rjmp	.-44     	; 0xfa8 <main+0x17a>
		case ADMIN_MODE:
			adminMode(password,password_admin);
     fd4:	8b e6       	ldi	r24, 0x6B	; 107
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	22 e7       	ldi	r18, 0x72	; 114
     fda:	31 e0       	ldi	r19, 0x01	; 1
     fdc:	b9 01       	movw	r22, r18
     fde:	0e 94 af 0a 	call	0x155e	; 0x155e <adminMode>
     fe2:	e2 cf       	rjmp	.-60     	; 0xfa8 <main+0x17a>
			break;
		case GUEST_MODE:
			guestMode(password,password_guest);
     fe4:	8b e6       	ldi	r24, 0x6B	; 107
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	25 e7       	ldi	r18, 0x75	; 117
     fea:	31 e0       	ldi	r19, 0x01	; 1
     fec:	b9 01       	movw	r22, r18
     fee:	0e 94 b7 0c 	call	0x196e	; 0x196e <guestMode>
     ff2:	da cf       	rjmp	.-76     	; 0xfa8 <main+0x17a>

00000ff4 <recievePassword>:
	}
}


/********************/
void recievePassword(uint8 * password){
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	61 97       	sbiw	r28, 0x11	; 17
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	99 8b       	std	Y+17, r25	; 0x11
    100e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0;i<PASS_SIZE ;i++)
    1010:	1f 86       	std	Y+15, r1	; 0x0f
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <recievePassword+0x3e>
		password[i]=UART_recieveByte();
    1014:	8f 85       	ldd	r24, Y+15	; 0x0f
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	88 89       	ldd	r24, Y+16	; 0x10
    101c:	99 89       	ldd	r25, Y+17	; 0x11
    101e:	8c 01       	movw	r16, r24
    1020:	02 0f       	add	r16, r18
    1022:	13 1f       	adc	r17, r19
    1024:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1028:	f8 01       	movw	r30, r16
    102a:	80 83       	st	Z, r24


/********************/
void recievePassword(uint8 * password){
	uint8 i;
	for(i=0;i<PASS_SIZE ;i++)
    102c:	8f 85       	ldd	r24, Y+15	; 0x0f
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	8f 87       	std	Y+15, r24	; 0x0f
    1032:	8f 85       	ldd	r24, Y+15	; 0x0f
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	70 f3       	brcs	.-36     	; 0x1014 <recievePassword+0x20>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a8 e4       	ldi	r26, 0x48	; 72
    103e:	b3 e4       	ldi	r27, 0x43	; 67
    1040:	8b 87       	std	Y+11, r24	; 0x0b
    1042:	9c 87       	std	Y+12, r25	; 0x0c
    1044:	ad 87       	std	Y+13, r26	; 0x0d
    1046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1048:	6b 85       	ldd	r22, Y+11	; 0x0b
    104a:	7c 85       	ldd	r23, Y+12	; 0x0c
    104c:	8d 85       	ldd	r24, Y+13	; 0x0d
    104e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	4a ef       	ldi	r20, 0xFA	; 250
    1056:	54 e4       	ldi	r21, 0x44	; 68
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8f 83       	std	Y+7, r24	; 0x07
    1062:	98 87       	std	Y+8, r25	; 0x08
    1064:	a9 87       	std	Y+9, r26	; 0x09
    1066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1068:	6f 81       	ldd	r22, Y+7	; 0x07
    106a:	78 85       	ldd	r23, Y+8	; 0x08
    106c:	89 85       	ldd	r24, Y+9	; 0x09
    106e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e8       	ldi	r20, 0x80	; 128
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    107c:	88 23       	and	r24, r24
    107e:	2c f4       	brge	.+10     	; 0x108a <recievePassword+0x96>
		__ticks = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	3f c0       	rjmp	.+126    	; 0x1108 <recievePassword+0x114>
	else if (__tmp > 65535)
    108a:	6f 81       	ldd	r22, Y+7	; 0x07
    108c:	78 85       	ldd	r23, Y+8	; 0x08
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	3f ef       	ldi	r19, 0xFF	; 255
    1096:	4f e7       	ldi	r20, 0x7F	; 127
    1098:	57 e4       	ldi	r21, 0x47	; 71
    109a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    109e:	18 16       	cp	r1, r24
    10a0:	4c f5       	brge	.+82     	; 0x10f4 <recievePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e2       	ldi	r20, 0x20	; 32
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <recievePassword+0xf6>
    10cc:	88 ec       	ldi	r24, 0xC8	; 200
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c 83       	std	Y+4, r25	; 0x04
    10d2:	8b 83       	std	Y+3, r24	; 0x03
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <recievePassword+0xe4>
    10dc:	9c 83       	std	Y+4, r25	; 0x04
    10de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	69 f7       	brne	.-38     	; 0x10cc <recievePassword+0xd8>
    10f2:	14 c0       	rjmp	.+40     	; 0x111c <recievePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f4:	6f 81       	ldd	r22, Y+7	; 0x07
    10f6:	78 85       	ldd	r23, Y+8	; 0x08
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <recievePassword+0x120>
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
		password[i]=UART_recieveByte();
	_delay_ms(200);
}
    111c:	61 96       	adiw	r28, 0x11	; 17
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <setAdminPassword>:



void setAdminPassword(uint8 *password,uint8 *password_admin){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <setAdminPassword+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <setAdminPassword+0x8>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	7c 83       	std	Y+4, r23	; 0x04
    1144:	6b 83       	std	Y+3, r22	; 0x03
	recievePassword(password);
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
	recievePassword(password_admin);
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
	g_matchingCheck=matchingCheck(password,password_admin);
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	2b 81       	ldd	r18, Y+3	; 0x03
    115c:	3c 81       	ldd	r19, Y+4	; 0x04
    115e:	b9 01       	movw	r22, r18
    1160:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    1164:	80 93 6e 01 	sts	0x016E, r24
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <setAdminPassword+0x60>
	while(g_matchingCheck==UNMATCHED){
		UART_sendByte(UNMATCHED);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
		recievePassword(password);
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
		recievePassword(password_admin);
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
		g_matchingCheck=matchingCheck(password,password_admin);
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	2b 81       	ldd	r18, Y+3	; 0x03
    1186:	3c 81       	ldd	r19, Y+4	; 0x04
    1188:	b9 01       	movw	r22, r18
    118a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    118e:	80 93 6e 01 	sts	0x016E, r24

void setAdminPassword(uint8 *password,uint8 *password_admin){
	recievePassword(password);
	recievePassword(password_admin);
	g_matchingCheck=matchingCheck(password,password_admin);
	while(g_matchingCheck==UNMATCHED){
    1192:	80 91 6e 01 	lds	r24, 0x016E
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	41 f3       	breq	.-48     	; 0x116a <setAdminPassword+0x38>
		UART_sendByte(UNMATCHED);
		recievePassword(password);
		recievePassword(password_admin);
		g_matchingCheck=matchingCheck(password,password_admin);
	}
	UART_sendByte(MATCHED);
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
	writePasswordToEeprom(password_admin,adminPasswordAddress);
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	61 e1       	ldi	r22, 0x11	; 17
    11a6:	73 e0       	ldi	r23, 0x03	; 3
    11a8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writePasswordToEeprom>
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <writePasswordToEeprom>:

void writePasswordToEeprom(uint8* password, uint16 address) {
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	63 97       	sbiw	r28, 0x13	; 19
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	99 8b       	std	Y+17, r25	; 0x11
    11d0:	88 8b       	std	Y+16, r24	; 0x10
    11d2:	7b 8b       	std	Y+19, r23	; 0x13
    11d4:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i = 0;
    11d6:	1f 86       	std	Y+15, r1	; 0x0f

	// Write bytes from the password array to EEPROM starting at the specified address
	for(i=0 ;i<PASS_SIZE; i++){
    11d8:	1f 86       	std	Y+15, r1	; 0x0f
    11da:	8a c0       	rjmp	.+276    	; 0x12f0 <writePasswordToEeprom+0x136>
		EEPROM_writeByte(address + i, password[i]);
    11dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	8a 89       	ldd	r24, Y+18	; 0x12
    11e4:	9b 89       	ldd	r25, Y+19	; 0x13
    11e6:	a9 01       	movw	r20, r18
    11e8:	48 0f       	add	r20, r24
    11ea:	59 1f       	adc	r21, r25
    11ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	88 89       	ldd	r24, Y+16	; 0x10
    11f4:	99 89       	ldd	r25, Y+17	; 0x11
    11f6:	fc 01       	movw	r30, r24
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	20 81       	ld	r18, Z
    11fe:	ca 01       	movw	r24, r20
    1200:	62 2f       	mov	r22, r18
    1202:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <EEPROM_writeByte>
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a6 e9       	ldi	r26, 0x96	; 150
    120c:	b3 e4       	ldi	r27, 0x43	; 67
    120e:	8b 87       	std	Y+11, r24	; 0x0b
    1210:	9c 87       	std	Y+12, r25	; 0x0c
    1212:	ad 87       	std	Y+13, r26	; 0x0d
    1214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1216:	6b 85       	ldd	r22, Y+11	; 0x0b
    1218:	7c 85       	ldd	r23, Y+12	; 0x0c
    121a:	8d 85       	ldd	r24, Y+13	; 0x0d
    121c:	9e 85       	ldd	r25, Y+14	; 0x0e
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	4a ef       	ldi	r20, 0xFA	; 250
    1224:	54 e4       	ldi	r21, 0x44	; 68
    1226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	8f 83       	std	Y+7, r24	; 0x07
    1230:	98 87       	std	Y+8, r25	; 0x08
    1232:	a9 87       	std	Y+9, r26	; 0x09
    1234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1236:	6f 81       	ldd	r22, Y+7	; 0x07
    1238:	78 85       	ldd	r23, Y+8	; 0x08
    123a:	89 85       	ldd	r24, Y+9	; 0x09
    123c:	9a 85       	ldd	r25, Y+10	; 0x0a
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	5f e3       	ldi	r21, 0x3F	; 63
    1246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    124a:	88 23       	and	r24, r24
    124c:	2c f4       	brge	.+10     	; 0x1258 <writePasswordToEeprom+0x9e>
		__ticks = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	3f c0       	rjmp	.+126    	; 0x12d6 <writePasswordToEeprom+0x11c>
	else if (__tmp > 65535)
    1258:	6f 81       	ldd	r22, Y+7	; 0x07
    125a:	78 85       	ldd	r23, Y+8	; 0x08
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	3f ef       	ldi	r19, 0xFF	; 255
    1264:	4f e7       	ldi	r20, 0x7F	; 127
    1266:	57 e4       	ldi	r21, 0x47	; 71
    1268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    126c:	18 16       	cp	r1, r24
    126e:	4c f5       	brge	.+82     	; 0x12c2 <writePasswordToEeprom+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e2       	ldi	r20, 0x20	; 32
    127e:	51 e4       	ldi	r21, 0x41	; 65
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	bc 01       	movw	r22, r24
    128a:	cd 01       	movw	r24, r26
    128c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	8d 83       	std	Y+5, r24	; 0x05
    1298:	0f c0       	rjmp	.+30     	; 0x12b8 <writePasswordToEeprom+0xfe>
    129a:	88 ec       	ldi	r24, 0xC8	; 200
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <writePasswordToEeprom+0xec>
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	69 f7       	brne	.-38     	; 0x129a <writePasswordToEeprom+0xe0>
    12c0:	14 c0       	rjmp	.+40     	; 0x12ea <writePasswordToEeprom+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <writePasswordToEeprom+0x128>
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01

void writePasswordToEeprom(uint8* password, uint16 address) {
	uint8 i = 0;

	// Write bytes from the password array to EEPROM starting at the specified address
	for(i=0 ;i<PASS_SIZE; i++){
    12ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	8f 87       	std	Y+15, r24	; 0x0f
    12f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	08 f4       	brcc	.+2      	; 0x12f8 <writePasswordToEeprom+0x13e>
    12f6:	72 cf       	rjmp	.-284    	; 0x11dc <writePasswordToEeprom+0x22>
		_delay_ms(300);


	}

}
    12f8:	63 96       	adiw	r28, 0x13	; 19
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <readPasswordFromEeprom>:
void readPasswordFromEeprom(uint8* password, uint16 address) {
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	63 97       	sbiw	r28, 0x13	; 19
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	99 8b       	std	Y+17, r25	; 0x11
    1320:	88 8b       	std	Y+16, r24	; 0x10
    1322:	7b 8b       	std	Y+19, r23	; 0x13
    1324:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i = 0;
    1326:	1f 86       	std	Y+15, r1	; 0x0f

	// Read bytes from EEPROM starting at the specified address and store them in the password array
	for(i=0;i<PASS_SIZE;i++) {
    1328:	1f 86       	std	Y+15, r1	; 0x0f
    132a:	88 c0       	rjmp	.+272    	; 0x143c <readPasswordFromEeprom+0x132>
		EEPROM_readByte(address + i, &(password[i]));
    132c:	8f 85       	ldd	r24, Y+15	; 0x0f
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8a 89       	ldd	r24, Y+18	; 0x12
    1334:	9b 89       	ldd	r25, Y+19	; 0x13
    1336:	a9 01       	movw	r20, r18
    1338:	48 0f       	add	r20, r24
    133a:	59 1f       	adc	r21, r25
    133c:	8f 85       	ldd	r24, Y+15	; 0x0f
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	88 89       	ldd	r24, Y+16	; 0x10
    1344:	99 89       	ldd	r25, Y+17	; 0x11
    1346:	28 0f       	add	r18, r24
    1348:	39 1f       	adc	r19, r25
    134a:	ca 01       	movw	r24, r20
    134c:	b9 01       	movw	r22, r18
    134e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <EEPROM_readByte>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a6 e9       	ldi	r26, 0x96	; 150
    1358:	b3 e4       	ldi	r27, 0x43	; 67
    135a:	8b 87       	std	Y+11, r24	; 0x0b
    135c:	9c 87       	std	Y+12, r25	; 0x0c
    135e:	ad 87       	std	Y+13, r26	; 0x0d
    1360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	4a ef       	ldi	r20, 0xFA	; 250
    1370:	54 e4       	ldi	r21, 0x44	; 68
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8f 83       	std	Y+7, r24	; 0x07
    137c:	98 87       	std	Y+8, r25	; 0x08
    137e:	a9 87       	std	Y+9, r26	; 0x09
    1380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <readPasswordFromEeprom+0x9a>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <readPasswordFromEeprom+0x118>
	else if (__tmp > 65535)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	3f ef       	ldi	r19, 0xFF	; 255
    13b0:	4f e7       	ldi	r20, 0x7F	; 127
    13b2:	57 e4       	ldi	r21, 0x47	; 71
    13b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	4c f5       	brge	.+82     	; 0x140e <readPasswordFromEeprom+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13be:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	51 e4       	ldi	r21, 0x41	; 65
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <readPasswordFromEeprom+0xfa>
    13e6:	88 ec       	ldi	r24, 0xC8	; 200
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <readPasswordFromEeprom+0xe8>
    13f6:	9c 83       	std	Y+4, r25	; 0x04
    13f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f7       	brne	.-38     	; 0x13e6 <readPasswordFromEeprom+0xdc>
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <readPasswordFromEeprom+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <readPasswordFromEeprom+0x124>
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
}
void readPasswordFromEeprom(uint8* password, uint16 address) {
	uint8 i = 0;

	// Read bytes from EEPROM starting at the specified address and store them in the password array
	for(i=0;i<PASS_SIZE;i++) {
    1436:	8f 85       	ldd	r24, Y+15	; 0x0f
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	8f 87       	std	Y+15, r24	; 0x0f
    143c:	8f 85       	ldd	r24, Y+15	; 0x0f
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	08 f4       	brcc	.+2      	; 0x1444 <readPasswordFromEeprom+0x13a>
    1442:	74 cf       	rjmp	.-280    	; 0x132c <readPasswordFromEeprom+0x22>
		_delay_ms(300);

	}


}
    1444:	63 96       	adiw	r28, 0x13	; 19
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <matchingCheck>:
uint8 matchingCheck(uint8 * password , uint8 * password_2){
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	27 97       	sbiw	r28, 0x07	; 7
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
    146e:	7e 83       	std	Y+6, r23	; 0x06
    1470:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i,j=0;
    1472:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PASS_SIZE; i++){
    1474:	1a 82       	std	Y+2, r1	; 0x02
    1476:	1a c0       	rjmp	.+52     	; 0x14ac <matchingCheck+0x56>
		if(password[i]==password_2[i]){
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	fc 01       	movw	r30, r24
    1484:	e2 0f       	add	r30, r18
    1486:	f3 1f       	adc	r31, r19
    1488:	40 81       	ld	r20, Z
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	fc 01       	movw	r30, r24
    1496:	e2 0f       	add	r30, r18
    1498:	f3 1f       	adc	r31, r19
    149a:	80 81       	ld	r24, Z
    149c:	48 17       	cp	r20, r24
    149e:	19 f4       	brne	.+6      	; 0x14a6 <matchingCheck+0x50>
			j++;
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	8f 5f       	subi	r24, 0xFF	; 255
    14a4:	89 83       	std	Y+1, r24	; 0x01


}
uint8 matchingCheck(uint8 * password , uint8 * password_2){
	uint8 i,j=0;
	for(i=0 ; i<PASS_SIZE; i++){
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	8a 83       	std	Y+2, r24	; 0x02
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	18 f3       	brcs	.-58     	; 0x1478 <matchingCheck+0x22>
		if(password[i]==password_2[i]){
			j++;
		}

	}
	if(j==i)
    14b2:	99 81       	ldd	r25, Y+1	; 0x01
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	98 17       	cp	r25, r24
    14b8:	11 f4       	brne	.+4      	; 0x14be <matchingCheck+0x68>
		return MATCHED;
    14ba:	1f 82       	std	Y+7, r1	; 0x07
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <matchingCheck+0x6c>
	else
		return UNMATCHED;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	8f 83       	std	Y+7, r24	; 0x07
    14c2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    14c4:	27 96       	adiw	r28, 0x07	; 7
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <setGuestPassword>:
void setGuestPassword(uint8 *password,uint8 *password_guest){
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <setGuestPassword+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <setGuestPassword+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	7c 83       	std	Y+4, r23	; 0x04
    14e8:	6b 83       	std	Y+3, r22	; 0x03

	recievePassword(password);
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
	recievePassword(password_guest);
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
	g_matchingCheck=matchingCheck(password,password_guest);
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1500:	3c 81       	ldd	r19, Y+4	; 0x04
    1502:	b9 01       	movw	r22, r18
    1504:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    1508:	80 93 6e 01 	sts	0x016E, r24
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <setGuestPassword+0x60>
	while(g_matchingCheck==UNMATCHED){
		UART_sendByte(UNMATCHED);
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
		recievePassword(password);
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
		recievePassword(password_guest);
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
		g_matchingCheck=matchingCheck(password,password_guest);
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	2b 81       	ldd	r18, Y+3	; 0x03
    152a:	3c 81       	ldd	r19, Y+4	; 0x04
    152c:	b9 01       	movw	r22, r18
    152e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    1532:	80 93 6e 01 	sts	0x016E, r24
void setGuestPassword(uint8 *password,uint8 *password_guest){

	recievePassword(password);
	recievePassword(password_guest);
	g_matchingCheck=matchingCheck(password,password_guest);
	while(g_matchingCheck==UNMATCHED){
    1536:	80 91 6e 01 	lds	r24, 0x016E
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	41 f3       	breq	.-48     	; 0x150e <setGuestPassword+0x38>
		UART_sendByte(UNMATCHED);
		recievePassword(password);
		recievePassword(password_guest);
		g_matchingCheck=matchingCheck(password,password_guest);
	}
	UART_sendByte(MATCHED);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
	writePasswordToEeprom(password_guest,guestPasswordAddress);
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	62 e2       	ldi	r22, 0x22	; 34
    154a:	73 e0       	ldi	r23, 0x03	; 3
    154c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <writePasswordToEeprom>
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <adminMode>:

void adminMode(uint8 * password , uint8*password_admin ){
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	66 97       	sbiw	r28, 0x16	; 22
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	98 8b       	std	Y+16, r25	; 0x10
    1574:	8f 87       	std	Y+15, r24	; 0x0f
    1576:	7a 8b       	std	Y+18, r23	; 0x12
    1578:	69 8b       	std	Y+17, r22	; 0x11
	recievePassword(password);
    157a:	8f 85       	ldd	r24, Y+15	; 0x0f
    157c:	98 89       	ldd	r25, Y+16	; 0x10
    157e:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
	readPasswordFromEeprom(password_admin,adminPasswordAddress);
    1582:	89 89       	ldd	r24, Y+17	; 0x11
    1584:	9a 89       	ldd	r25, Y+18	; 0x12
    1586:	61 e1       	ldi	r22, 0x11	; 17
    1588:	73 e0       	ldi	r23, 0x03	; 3
    158a:	0e 94 85 09 	call	0x130a	; 0x130a <readPasswordFromEeprom>
	g_matchingCheck=matchingCheck(password,password_admin);
    158e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1590:	98 89       	ldd	r25, Y+16	; 0x10
    1592:	29 89       	ldd	r18, Y+17	; 0x11
    1594:	3a 89       	ldd	r19, Y+18	; 0x12
    1596:	b9 01       	movw	r22, r18
    1598:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    159c:	80 93 6e 01 	sts	0x016E, r24
    15a0:	16 c0       	rjmp	.+44     	; 0x15ce <adminMode+0x70>
	while(g_matchingCheck!=MATCHED){
		UART_sendByte(UNMATCHED);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
		recievePassword(password);
    15a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15aa:	98 89       	ldd	r25, Y+16	; 0x10
    15ac:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
		readPasswordFromEeprom(password_admin,adminPasswordAddress);
    15b0:	89 89       	ldd	r24, Y+17	; 0x11
    15b2:	9a 89       	ldd	r25, Y+18	; 0x12
    15b4:	61 e1       	ldi	r22, 0x11	; 17
    15b6:	73 e0       	ldi	r23, 0x03	; 3
    15b8:	0e 94 85 09 	call	0x130a	; 0x130a <readPasswordFromEeprom>
		g_matchingCheck=matchingCheck(password,password_admin);
    15bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15be:	98 89       	ldd	r25, Y+16	; 0x10
    15c0:	29 89       	ldd	r18, Y+17	; 0x11
    15c2:	3a 89       	ldd	r19, Y+18	; 0x12
    15c4:	b9 01       	movw	r22, r18
    15c6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    15ca:	80 93 6e 01 	sts	0x016E, r24

void adminMode(uint8 * password , uint8*password_admin ){
	recievePassword(password);
	readPasswordFromEeprom(password_admin,adminPasswordAddress);
	g_matchingCheck=matchingCheck(password,password_admin);
	while(g_matchingCheck!=MATCHED){
    15ce:	80 91 6e 01 	lds	r24, 0x016E
    15d2:	88 23       	and	r24, r24
    15d4:	31 f7       	brne	.-52     	; 0x15a2 <adminMode+0x44>
		recievePassword(password);
		readPasswordFromEeprom(password_admin,adminPasswordAddress);
		g_matchingCheck=matchingCheck(password,password_admin);

	}
	UART_sendByte(MATCHED);
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>


	/************/

	do{
		option=UART_recieveByte();
    15dc:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    15e0:	80 93 6f 01 	sts	0x016F, r24

		switch(option){
    15e4:	80 91 6f 01 	lds	r24, 0x016F
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3e 8b       	std	Y+22, r19	; 0x16
    15ee:	2d 8b       	std	Y+21, r18	; 0x15
    15f0:	8d 89       	ldd	r24, Y+21	; 0x15
    15f2:	9e 89       	ldd	r25, Y+22	; 0x16
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	e1 f1       	breq	.+120    	; 0x1672 <adminMode+0x114>
    15fa:	2d 89       	ldd	r18, Y+21	; 0x15
    15fc:	3e 89       	ldd	r19, Y+22	; 0x16
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	2c f4       	brge	.+10     	; 0x160e <adminMode+0xb0>
    1604:	8d 89       	ldd	r24, Y+21	; 0x15
    1606:	9e 89       	ldd	r25, Y+22	; 0x16
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	71 f0       	breq	.+28     	; 0x1628 <adminMode+0xca>
    160c:	a2 c1       	rjmp	.+836    	; 0x1952 <adminMode+0x3f4>
    160e:	2d 89       	ldd	r18, Y+21	; 0x15
    1610:	3e 89       	ldd	r19, Y+22	; 0x16
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <adminMode+0xbc>
    1618:	51 c0       	rjmp	.+162    	; 0x16bc <adminMode+0x15e>
    161a:	8d 89       	ldd	r24, Y+21	; 0x15
    161c:	9e 89       	ldd	r25, Y+22	; 0x16
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <adminMode+0xc8>
    1624:	70 c0       	rjmp	.+224    	; 0x1706 <adminMode+0x1a8>
    1626:	95 c1       	rjmp	.+810    	; 0x1952 <adminMode+0x3f4>
		case ROOM1:
			if(GPIO_readPin(PORTC_ID,PIN5_ID)==LOGIC_LOW){
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	65 e0       	ldi	r22, 0x05	; 5
    162c:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    1630:	88 23       	and	r24, r24
    1632:	21 f4       	brne	.+8      	; 0x163c <adminMode+0xde>
				UART_sendByte(OFF);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <adminMode+0xe4>
			}else{
				UART_sendByte(ON);
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

			}
			g_stateRoom=UART_recieveByte();
    1642:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1646:	80 93 74 01 	sts	0x0174, r24
			if(g_stateRoom==ON){
    164a:	80 91 74 01 	lds	r24, 0x0174
    164e:	88 23       	and	r24, r24
    1650:	21 f4       	brne	.+8      	; 0x165a <adminMode+0xfc>
				turnOn(ROOM1);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    1658:	7c c1       	rjmp	.+760    	; 0x1952 <adminMode+0x3f4>
			}else if(g_stateRoom==OFF){
    165a:	80 91 74 01 	lds	r24, 0x0174
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	21 f4       	brne	.+8      	; 0x166a <adminMode+0x10c>
				turnOff(ROOM1);
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    1668:	74 c1       	rjmp	.+744    	; 0x1952 <adminMode+0x3f4>
			}else{
				ret=1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 93 68 01 	sts	0x0168, r24
    1670:	70 c1       	rjmp	.+736    	; 0x1952 <adminMode+0x3f4>
			}
			break;
		case ROOM2:
			if(GPIO_readPin(PORTC_ID,PIN4_ID)==LOGIC_LOW){
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	64 e0       	ldi	r22, 0x04	; 4
    1676:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    167a:	88 23       	and	r24, r24
    167c:	21 f4       	brne	.+8      	; 0x1686 <adminMode+0x128>
				UART_sendByte(OFF);
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    1684:	03 c0       	rjmp	.+6      	; 0x168c <adminMode+0x12e>
			}else{
				UART_sendByte(ON);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

			}
			g_stateRoom=UART_recieveByte();
    168c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1690:	80 93 74 01 	sts	0x0174, r24
			if(g_stateRoom==ON){
    1694:	80 91 74 01 	lds	r24, 0x0174
    1698:	88 23       	and	r24, r24
    169a:	21 f4       	brne	.+8      	; 0x16a4 <adminMode+0x146>
				turnOn(ROOM2);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    16a2:	57 c1       	rjmp	.+686    	; 0x1952 <adminMode+0x3f4>
			}else if(g_stateRoom==OFF){
    16a4:	80 91 74 01 	lds	r24, 0x0174
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <adminMode+0x156>
				turnOff(ROOM2);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    16b2:	4f c1       	rjmp	.+670    	; 0x1952 <adminMode+0x3f4>
			}else{
				ret=1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 93 68 01 	sts	0x0168, r24
    16ba:	4b c1       	rjmp	.+662    	; 0x1952 <adminMode+0x3f4>
			}
			break;
		case ROOM3:
			if(GPIO_readPin(PORTC_ID,PIN3_ID)==LOGIC_LOW){
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	63 e0       	ldi	r22, 0x03	; 3
    16c0:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    16c4:	88 23       	and	r24, r24
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <adminMode+0x172>
				UART_sendByte(OFF);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <adminMode+0x178>
			}else{
				UART_sendByte(ON);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

			}
			g_stateRoom=UART_recieveByte();
    16d6:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    16da:	80 93 74 01 	sts	0x0174, r24
			if(g_stateRoom==ON){
    16de:	80 91 74 01 	lds	r24, 0x0174
    16e2:	88 23       	and	r24, r24
    16e4:	21 f4       	brne	.+8      	; 0x16ee <adminMode+0x190>
				turnOn(ROOM3);
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    16ec:	32 c1       	rjmp	.+612    	; 0x1952 <adminMode+0x3f4>
			}else if(g_stateRoom==OFF){
    16ee:	80 91 74 01 	lds	r24, 0x0174
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	21 f4       	brne	.+8      	; 0x16fe <adminMode+0x1a0>
				turnOff(ROOM3);
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    16fc:	2a c1       	rjmp	.+596    	; 0x1952 <adminMode+0x3f4>
			}else{
				ret=1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 68 01 	sts	0x0168, r24
    1704:	26 c1       	rjmp	.+588    	; 0x1952 <adminMode+0x3f4>
			}
			break;
		case MORE:
			option=UART_recieveByte();
    1706:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    170a:	80 93 6f 01 	sts	0x016F, r24
			switch(option){
    170e:	80 91 6f 01 	lds	r24, 0x016F
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	3c 8b       	std	Y+20, r19	; 0x14
    1718:	2b 8b       	std	Y+19, r18	; 0x13
    171a:	8b 89       	ldd	r24, Y+19	; 0x13
    171c:	9c 89       	ldd	r25, Y+20	; 0x14
    171e:	85 30       	cpi	r24, 0x05	; 5
    1720:	91 05       	cpc	r25, r1
    1722:	89 f1       	breq	.+98     	; 0x1786 <adminMode+0x228>
    1724:	2b 89       	ldd	r18, Y+19	; 0x13
    1726:	3c 89       	ldd	r19, Y+20	; 0x14
    1728:	26 30       	cpi	r18, 0x06	; 6
    172a:	31 05       	cpc	r19, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <adminMode+0x1d2>
    172e:	50 c0       	rjmp	.+160    	; 0x17d0 <adminMode+0x272>
    1730:	8b 89       	ldd	r24, Y+19	; 0x13
    1732:	9c 89       	ldd	r25, Y+20	; 0x14
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	91 05       	cpc	r25, r1
    1738:	09 f0       	breq	.+2      	; 0x173c <adminMode+0x1de>
    173a:	0b c1       	rjmp	.+534    	; 0x1952 <adminMode+0x3f4>
			case ROOM4:
				if(GPIO_readPin(PORTC_ID,PIN2_ID)==LOGIC_LOW){
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	62 e0       	ldi	r22, 0x02	; 2
    1740:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    1744:	88 23       	and	r24, r24
    1746:	21 f4       	brne	.+8      	; 0x1750 <adminMode+0x1f2>
					UART_sendByte(OFF);
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <adminMode+0x1f8>
				}else{
					UART_sendByte(ON);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

				}
				g_stateRoom=UART_recieveByte();
    1756:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    175a:	80 93 74 01 	sts	0x0174, r24
				if(g_stateRoom==ON){
    175e:	80 91 74 01 	lds	r24, 0x0174
    1762:	88 23       	and	r24, r24
    1764:	21 f4       	brne	.+8      	; 0x176e <adminMode+0x210>
					turnOn(ROOM4);
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    176c:	f2 c0       	rjmp	.+484    	; 0x1952 <adminMode+0x3f4>
				}else if(g_stateRoom==OFF){
    176e:	80 91 74 01 	lds	r24, 0x0174
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	21 f4       	brne	.+8      	; 0x177e <adminMode+0x220>
					turnOff(ROOM4);
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    177c:	ea c0       	rjmp	.+468    	; 0x1952 <adminMode+0x3f4>
				}else{
					ret=1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 68 01 	sts	0x0168, r24
    1784:	e6 c0       	rjmp	.+460    	; 0x1952 <adminMode+0x3f4>
				}
				break;
			case TV:
				if(GPIO_readPin(PORTC_ID,PIN6_ID)==LOGIC_LOW){
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	66 e0       	ldi	r22, 0x06	; 6
    178a:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    178e:	88 23       	and	r24, r24
    1790:	21 f4       	brne	.+8      	; 0x179a <adminMode+0x23c>
					UART_sendByte(OFF);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <adminMode+0x242>
				}else{
					UART_sendByte(ON);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

				}
				g_stateRoom=UART_recieveByte();
    17a0:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    17a4:	80 93 74 01 	sts	0x0174, r24
				if(g_stateRoom==ON){
    17a8:	80 91 74 01 	lds	r24, 0x0174
    17ac:	88 23       	and	r24, r24
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <adminMode+0x25a>
					turnOn(TV);
    17b0:	85 e0       	ldi	r24, 0x05	; 5
    17b2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    17b6:	cd c0       	rjmp	.+410    	; 0x1952 <adminMode+0x3f4>
				}else if(g_stateRoom==OFF){
    17b8:	80 91 74 01 	lds	r24, 0x0174
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	21 f4       	brne	.+8      	; 0x17c8 <adminMode+0x26a>
					turnOff(TV);
    17c0:	85 e0       	ldi	r24, 0x05	; 5
    17c2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    17c6:	c5 c0       	rjmp	.+394    	; 0x1952 <adminMode+0x3f4>
				}else{
					ret=1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	80 93 68 01 	sts	0x0168, r24
    17ce:	c1 c0       	rjmp	.+386    	; 0x1952 <adminMode+0x3f4>
				}
				break;
			case COND:
				if(UART_recieveByte()==SET_TEMP){
    17d0:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    17d4:	88 30       	cpi	r24, 0x08	; 8
    17d6:	09 f0       	breq	.+2      	; 0x17da <adminMode+0x27c>
    17d8:	90 c0       	rjmp	.+288    	; 0x18fa <adminMode+0x39c>
					temp=LM35_getTemperature();
    17da:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LM35_getTemperature>
    17de:	80 93 70 01 	sts	0x0170, r24
					UART_sendByte(temp);
    17e2:	80 91 70 01 	lds	r24, 0x0170
    17e6:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
					if(temp>49){
    17ea:	80 91 70 01 	lds	r24, 0x0170
    17ee:	82 33       	cpi	r24, 0x32	; 50
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <adminMode+0x296>
    17f2:	7d c0       	rjmp	.+250    	; 0x18ee <adminMode+0x390>
						GPIO_writePin(PORTD_ID,PIN2_ID,LOGIC_HIGH);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	62 e0       	ldi	r22, 0x02	; 2
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	aa ef       	ldi	r26, 0xFA	; 250
    1804:	b4 e4       	ldi	r27, 0x44	; 68
    1806:	8b 87       	std	Y+11, r24	; 0x0b
    1808:	9c 87       	std	Y+12, r25	; 0x0c
    180a:	ad 87       	std	Y+13, r26	; 0x0d
    180c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a ef       	ldi	r20, 0xFA	; 250
    181c:	54 e4       	ldi	r21, 0x44	; 68
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8f 83       	std	Y+7, r24	; 0x07
    1828:	98 87       	std	Y+8, r25	; 0x08
    182a:	a9 87       	std	Y+9, r26	; 0x09
    182c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1842:	88 23       	and	r24, r24
    1844:	2c f4       	brge	.+10     	; 0x1850 <adminMode+0x2f2>
		__ticks = 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	3f c0       	rjmp	.+126    	; 0x18ce <adminMode+0x370>
	else if (__tmp > 65535)
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	57 e4       	ldi	r21, 0x47	; 71
    1860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1864:	18 16       	cp	r1, r24
    1866:	4c f5       	brge	.+82     	; 0x18ba <adminMode+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	7c 85       	ldd	r23, Y+12	; 0x0c
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <adminMode+0x352>
    1892:	88 ec       	ldi	r24, 0xC8	; 200
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <adminMode+0x340>
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	69 f7       	brne	.-38     	; 0x1892 <adminMode+0x334>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <adminMode+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <adminMode+0x37c>
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2000);
						GPIO_writePin(PORTD_ID,PIN2_ID,LOGIC_LOW);
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    18ec:	32 c0       	rjmp	.+100    	; 0x1952 <adminMode+0x3f4>

					}else{
						GPIO_writePin(PORTD_ID,PIN2_ID,LOGIC_LOW);
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	62 e0       	ldi	r22, 0x02	; 2
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    18f8:	2c c0       	rjmp	.+88     	; 0x1952 <adminMode+0x3f4>

					}
				}

				else{
					if(GPIO_readPin(PORTC_ID,PIN7_ID)==LOGIC_LOW){
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	67 e0       	ldi	r22, 0x07	; 7
    18fe:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    1902:	88 23       	and	r24, r24
    1904:	21 f4       	brne	.+8      	; 0x190e <adminMode+0x3b0>
						UART_sendByte(OFF);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <adminMode+0x3b6>
					}else{
						UART_sendByte(ON);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

					}
					g_stateRoom=UART_recieveByte();
    1914:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1918:	80 93 74 01 	sts	0x0174, r24
					if(g_stateRoom==ON){
    191c:	80 91 74 01 	lds	r24, 0x0174
    1920:	88 23       	and	r24, r24
    1922:	41 f4       	brne	.+16     	; 0x1934 <adminMode+0x3d6>
						turnOn(COND);
    1924:	86 e0       	ldi	r24, 0x06	; 6
    1926:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
						DcMotor_Rotate(CW,100);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	64 e6       	ldi	r22, 0x64	; 100
    192e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <DcMotor_Rotate>
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <adminMode+0x3f4>
					}else if(g_stateRoom==OFF){
    1934:	80 91 74 01 	lds	r24, 0x0174
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	41 f4       	brne	.+16     	; 0x194c <adminMode+0x3ee>
						turnOff(COND);
    193c:	86 e0       	ldi	r24, 0x06	; 6
    193e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
						DcMotor_Rotate(STOP,0);
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <DcMotor_Rotate>
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <adminMode+0x3f4>

					}else{
						ret=1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	80 93 68 01 	sts	0x0168, r24


			break;

		}
	}while(ret!=1);
    1952:	80 91 68 01 	lds	r24, 0x0168
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	09 f0       	breq	.+2      	; 0x195c <adminMode+0x3fe>
    195a:	40 ce       	rjmp	.-896    	; 0x15dc <adminMode+0x7e>

}
    195c:	66 96       	adiw	r28, 0x16	; 22
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <guestMode>:
void guestMode(uint8 * password , uint8*password_guest ){
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <guestMode+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <guestMode+0x8>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <guestMode+0xa>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	7c 83       	std	Y+4, r23	; 0x04
    1982:	6b 83       	std	Y+3, r22	; 0x03
	recievePassword(password);
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	9a 81       	ldd	r25, Y+2	; 0x02
    1988:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
	readPasswordFromEeprom(password_guest,guestPasswordAddress);
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	62 e2       	ldi	r22, 0x22	; 34
    1992:	73 e0       	ldi	r23, 0x03	; 3
    1994:	0e 94 85 09 	call	0x130a	; 0x130a <readPasswordFromEeprom>
	g_matchingCheck=matchingCheck(password,password_guest);
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	2b 81       	ldd	r18, Y+3	; 0x03
    199e:	3c 81       	ldd	r19, Y+4	; 0x04
    19a0:	b9 01       	movw	r22, r18
    19a2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    19a6:	80 93 6e 01 	sts	0x016E, r24
    19aa:	16 c0       	rjmp	.+44     	; 0x19d8 <guestMode+0x6a>
	while(g_matchingCheck!=MATCHED){
		UART_sendByte(UNMATCHED);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
		recievePassword(password);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	0e 94 fa 07 	call	0xff4	; 0xff4 <recievePassword>
		readPasswordFromEeprom(password_guest,guestPasswordAddress);
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	62 e2       	ldi	r22, 0x22	; 34
    19c0:	73 e0       	ldi	r23, 0x03	; 3
    19c2:	0e 94 85 09 	call	0x130a	; 0x130a <readPasswordFromEeprom>
		g_matchingCheck=matchingCheck(password,password_guest);
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ca:	2b 81       	ldd	r18, Y+3	; 0x03
    19cc:	3c 81       	ldd	r19, Y+4	; 0x04
    19ce:	b9 01       	movw	r22, r18
    19d0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <matchingCheck>
    19d4:	80 93 6e 01 	sts	0x016E, r24
}
void guestMode(uint8 * password , uint8*password_guest ){
	recievePassword(password);
	readPasswordFromEeprom(password_guest,guestPasswordAddress);
	g_matchingCheck=matchingCheck(password,password_guest);
	while(g_matchingCheck!=MATCHED){
    19d8:	80 91 6e 01 	lds	r24, 0x016E
    19dc:	88 23       	and	r24, r24
    19de:	31 f7       	brne	.-52     	; 0x19ac <guestMode+0x3e>
		recievePassword(password);
		readPasswordFromEeprom(password_guest,guestPasswordAddress);
		g_matchingCheck=matchingCheck(password,password_guest);

	}
	UART_sendByte(MATCHED);
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>


	/************/


	option=UART_recieveByte();
    19e6:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    19ea:	80 93 6f 01 	sts	0x016F, r24

	switch(option){
    19ee:	80 91 6f 01 	lds	r24, 0x016F
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	3e 83       	std	Y+6, r19	; 0x06
    19f8:	2d 83       	std	Y+5, r18	; 0x05
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	91 05       	cpc	r25, r1
    1a02:	c9 f1       	breq	.+114    	; 0x1a76 <guestMode+0x108>
    1a04:	2d 81       	ldd	r18, Y+5	; 0x05
    1a06:	3e 81       	ldd	r19, Y+6	; 0x06
    1a08:	22 30       	cpi	r18, 0x02	; 2
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <guestMode+0xaa>
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	71 f0       	breq	.+28     	; 0x1a32 <guestMode+0xc4>
    1a16:	92 c0       	rjmp	.+292    	; 0x1b3c <guestMode+0x1ce>
    1a18:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <guestMode+0xb6>
    1a22:	4b c0       	rjmp	.+150    	; 0x1aba <guestMode+0x14c>
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <guestMode+0xc2>
    1a2e:	66 c0       	rjmp	.+204    	; 0x1afc <guestMode+0x18e>
    1a30:	85 c0       	rjmp	.+266    	; 0x1b3c <guestMode+0x1ce>
	case ROOM1:
		if(GPIO_readPin(PORTC_ID,PIN5_ID)==LOGIC_LOW){
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	65 e0       	ldi	r22, 0x05	; 5
    1a36:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    1a3a:	88 23       	and	r24, r24
    1a3c:	21 f4       	brne	.+8      	; 0x1a46 <guestMode+0xd8>
			UART_sendByte(OFF);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <guestMode+0xde>
		}else{
			UART_sendByte(ON);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

		}
		g_stateRoom=UART_recieveByte();
    1a4c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1a50:	80 93 74 01 	sts	0x0174, r24
		if(g_stateRoom==ON){
    1a54:	80 91 74 01 	lds	r24, 0x0174
    1a58:	88 23       	and	r24, r24
    1a5a:	21 f4       	brne	.+8      	; 0x1a64 <guestMode+0xf6>
			turnOn(ROOM1);
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    1a62:	6c c0       	rjmp	.+216    	; 0x1b3c <guestMode+0x1ce>
		}else if(g_stateRoom==OFF){
    1a64:	80 91 74 01 	lds	r24, 0x0174
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <guestMode+0x100>
    1a6c:	67 c0       	rjmp	.+206    	; 0x1b3c <guestMode+0x1ce>
			turnOff(ROOM1);
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    1a74:	63 c0       	rjmp	.+198    	; 0x1b3c <guestMode+0x1ce>
		}
		break;
	case ROOM2:
		if(GPIO_readPin(PORTC_ID,PIN4_ID)==LOGIC_LOW){
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	64 e0       	ldi	r22, 0x04	; 4
    1a7a:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    1a7e:	88 23       	and	r24, r24
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <guestMode+0x11c>
			UART_sendByte(OFF);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <guestMode+0x122>
		}else{
			UART_sendByte(ON);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

		}
		g_stateRoom=UART_recieveByte();
    1a90:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1a94:	80 93 74 01 	sts	0x0174, r24
		if(g_stateRoom==ON){
    1a98:	80 91 74 01 	lds	r24, 0x0174
    1a9c:	88 23       	and	r24, r24
    1a9e:	21 f4       	brne	.+8      	; 0x1aa8 <guestMode+0x13a>
			turnOn(ROOM2);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    1aa6:	4a c0       	rjmp	.+148    	; 0x1b3c <guestMode+0x1ce>
		}else if(g_stateRoom==OFF){
    1aa8:	80 91 74 01 	lds	r24, 0x0174
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <guestMode+0x144>
    1ab0:	45 c0       	rjmp	.+138    	; 0x1b3c <guestMode+0x1ce>
			turnOff(ROOM2);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    1ab8:	41 c0       	rjmp	.+130    	; 0x1b3c <guestMode+0x1ce>
		}
		break;
	case ROOM3:
		if(GPIO_readPin(PORTC_ID,PIN3_ID)==LOGIC_LOW){
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	63 e0       	ldi	r22, 0x03	; 3
    1abe:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    1ac2:	88 23       	and	r24, r24
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <guestMode+0x160>
			UART_sendByte(OFF);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <guestMode+0x166>
		}else{
			UART_sendByte(ON);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

		}
		g_stateRoom=UART_recieveByte();
    1ad4:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1ad8:	80 93 74 01 	sts	0x0174, r24
		if(g_stateRoom==ON){
    1adc:	80 91 74 01 	lds	r24, 0x0174
    1ae0:	88 23       	and	r24, r24
    1ae2:	21 f4       	brne	.+8      	; 0x1aec <guestMode+0x17e>
			turnOn(ROOM3);
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    1aea:	28 c0       	rjmp	.+80     	; 0x1b3c <guestMode+0x1ce>
		}else if(g_stateRoom==OFF){
    1aec:	80 91 74 01 	lds	r24, 0x0174
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	21 f5       	brne	.+72     	; 0x1b3c <guestMode+0x1ce>
			turnOff(ROOM3);
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
    1afa:	20 c0       	rjmp	.+64     	; 0x1b3c <guestMode+0x1ce>
		}
		break;
	case ROOM4:
		if(GPIO_readPin(PORTC_ID,PIN2_ID)==LOGIC_LOW){
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	0e 94 bd 11 	call	0x237a	; 0x237a <GPIO_readPin>
    1b04:	88 23       	and	r24, r24
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <guestMode+0x1a2>
			UART_sendByte(OFF);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <guestMode+0x1a8>
		}else{
			UART_sendByte(ON);
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>

		}
		g_stateRoom=UART_recieveByte();
    1b16:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    1b1a:	80 93 74 01 	sts	0x0174, r24
		if(g_stateRoom==ON){
    1b1e:	80 91 74 01 	lds	r24, 0x0174
    1b22:	88 23       	and	r24, r24
    1b24:	21 f4       	brne	.+8      	; 0x1b2e <guestMode+0x1c0>
			turnOn(ROOM4);
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <turnOn>
    1b2c:	07 c0       	rjmp	.+14     	; 0x1b3c <guestMode+0x1ce>
		}else if(g_stateRoom==OFF){
    1b2e:	80 91 74 01 	lds	r24, 0x0174
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	19 f4       	brne	.+6      	; 0x1b3c <guestMode+0x1ce>
			turnOff(ROOM4);
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnOff>
		break;



	}
}
    1b3c:	26 96       	adiw	r28, 0x06	; 6
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <turnOn>:
void turnOn(ROOMS room){
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <turnOn+0x6>
    1b54:	0f 92       	push	r0
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	switch(room){
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3b 83       	std	Y+3, r19	; 0x03
    1b64:	2a 83       	std	Y+2, r18	; 0x02
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	59 f1       	breq	.+86     	; 0x1bc6 <turnOn+0x78>
    1b70:	2a 81       	ldd	r18, Y+2	; 0x02
    1b72:	3b 81       	ldd	r19, Y+3	; 0x03
    1b74:	23 30       	cpi	r18, 0x03	; 3
    1b76:	31 05       	cpc	r19, r1
    1b78:	54 f4       	brge	.+20     	; 0x1b8e <turnOn+0x40>
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	b1 f0       	breq	.+44     	; 0x1bae <turnOn+0x60>
    1b82:	2a 81       	ldd	r18, Y+2	; 0x02
    1b84:	3b 81       	ldd	r19, Y+3	; 0x03
    1b86:	21 30       	cpi	r18, 0x01	; 1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	b9 f0       	breq	.+46     	; 0x1bba <turnOn+0x6c>
    1b8c:	33 c0       	rjmp	.+102    	; 0x1bf4 <turnOn+0xa6>
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	85 30       	cpi	r24, 0x05	; 5
    1b94:	91 05       	cpc	r25, r1
    1b96:	19 f1       	breq	.+70     	; 0x1bde <turnOn+0x90>
    1b98:	2a 81       	ldd	r18, Y+2	; 0x02
    1b9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b9c:	26 30       	cpi	r18, 0x06	; 6
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	21 f1       	breq	.+72     	; 0x1bea <turnOn+0x9c>
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	91 05       	cpc	r25, r1
    1baa:	99 f0       	breq	.+38     	; 0x1bd2 <turnOn+0x84>
    1bac:	23 c0       	rjmp	.+70     	; 0x1bf4 <turnOn+0xa6>
	case ROOM1:
		GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_HIGH);
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	65 e0       	ldi	r22, 0x05	; 5
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1bb8:	1d c0       	rjmp	.+58     	; 0x1bf4 <turnOn+0xa6>
		break;
	case ROOM2:
		GPIO_writePin(PORTC_ID,PIN4_ID,LOGIC_HIGH);
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	64 e0       	ldi	r22, 0x04	; 4
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1bc4:	17 c0       	rjmp	.+46     	; 0x1bf4 <turnOn+0xa6>
		break;
	case ROOM3:
		GPIO_writePin(PORTC_ID,PIN3_ID,LOGIC_HIGH);
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	63 e0       	ldi	r22, 0x03	; 3
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1bd0:	11 c0       	rjmp	.+34     	; 0x1bf4 <turnOn+0xa6>
		break;
	case ROOM4:
		GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	62 e0       	ldi	r22, 0x02	; 2
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1bdc:	0b c0       	rjmp	.+22     	; 0x1bf4 <turnOn+0xa6>
		break;
	case TV:
		GPIO_writePin(PORTC_ID,PIN6_ID,LOGIC_HIGH);
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	66 e0       	ldi	r22, 0x06	; 6
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <turnOn+0xa6>
		break;
	case COND:
		GPIO_writePin(PORTC_ID,PIN7_ID,LOGIC_HIGH);
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	67 e0       	ldi	r22, 0x07	; 7
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>

	default:
		break;
	}

}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <turnOff>:
void turnOff(ROOMS room){
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <turnOff+0x6>
    1c06:	0f 92       	push	r0
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	switch(room){
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	3b 83       	std	Y+3, r19	; 0x03
    1c16:	2a 83       	std	Y+2, r18	; 0x02
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1c:	82 30       	cpi	r24, 0x02	; 2
    1c1e:	91 05       	cpc	r25, r1
    1c20:	59 f1       	breq	.+86     	; 0x1c78 <turnOff+0x78>
    1c22:	2a 81       	ldd	r18, Y+2	; 0x02
    1c24:	3b 81       	ldd	r19, Y+3	; 0x03
    1c26:	23 30       	cpi	r18, 0x03	; 3
    1c28:	31 05       	cpc	r19, r1
    1c2a:	54 f4       	brge	.+20     	; 0x1c40 <turnOff+0x40>
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	b1 f0       	breq	.+44     	; 0x1c60 <turnOff+0x60>
    1c34:	2a 81       	ldd	r18, Y+2	; 0x02
    1c36:	3b 81       	ldd	r19, Y+3	; 0x03
    1c38:	21 30       	cpi	r18, 0x01	; 1
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	b9 f0       	breq	.+46     	; 0x1c6c <turnOff+0x6c>
    1c3e:	33 c0       	rjmp	.+102    	; 0x1ca6 <turnOff+0xa6>
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	9b 81       	ldd	r25, Y+3	; 0x03
    1c44:	85 30       	cpi	r24, 0x05	; 5
    1c46:	91 05       	cpc	r25, r1
    1c48:	19 f1       	breq	.+70     	; 0x1c90 <turnOff+0x90>
    1c4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c4e:	26 30       	cpi	r18, 0x06	; 6
    1c50:	31 05       	cpc	r19, r1
    1c52:	21 f1       	breq	.+72     	; 0x1c9c <turnOff+0x9c>
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	99 f0       	breq	.+38     	; 0x1c84 <turnOff+0x84>
    1c5e:	23 c0       	rjmp	.+70     	; 0x1ca6 <turnOff+0xa6>
	case ROOM1:
		GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_LOW);
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	65 e0       	ldi	r22, 0x05	; 5
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1c6a:	1d c0       	rjmp	.+58     	; 0x1ca6 <turnOff+0xa6>
		break;
	case ROOM2:
		GPIO_writePin(PORTC_ID,PIN4_ID,LOGIC_LOW);
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <turnOff+0xa6>
		break;
	case ROOM3:
		GPIO_writePin(PORTC_ID,PIN3_ID,LOGIC_LOW);
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	63 e0       	ldi	r22, 0x03	; 3
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1c82:	11 c0       	rjmp	.+34     	; 0x1ca6 <turnOff+0xa6>
		break;
	case ROOM4:
		GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <turnOff+0xa6>
		break;
	case TV:
		GPIO_writePin(PORTC_ID,PIN6_ID,LOGIC_LOW);
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	66 e0       	ldi	r22, 0x06	; 6
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <turnOff+0xa6>
		break;
	case COND:
		GPIO_writePin(PORTC_ID,PIN7_ID,LOGIC_LOW);
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	67 e0       	ldi	r22, 0x07	; 7
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
		break;
	default:
		break;
	}
}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <LED_vTurnOn>:

void LED_vTurnOn(uint8 portname,uint8 pinnumber)

{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <LED_vTurnOn+0x6>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(portname,pinnumber,LOGIC_HIGH);
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	6a 81       	ldd	r22, Y+2	; 0x02
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_HIGH);
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	65 e0       	ldi	r22, 0x05	; 5
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>

}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init( const ADC_ConfigType * Config_Ptr)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <ADC_init+0x6>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG.Bytes=  (((Config_Ptr->volt_ref) )<<6);
    1cec:	a7 e2       	ldi	r26, 0x27	; 39
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	80 81       	ld	r24, Z
    1cf6:	82 95       	swap	r24
    1cf8:	88 0f       	add	r24, r24
    1cfa:	88 0f       	add	r24, r24
    1cfc:	80 7c       	andi	r24, 0xC0	; 192
    1cfe:	8c 93       	st	X, r24
	ADMUX_REG.Bytes &= 0xE0;     /*SET FIRST 5 BIT ZEROS*/
    1d00:	a7 e2       	ldi	r26, 0x27	; 39
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e7 e2       	ldi	r30, 0x27	; 39
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 7e       	andi	r24, 0xE0	; 224
    1d0c:	8c 93       	st	X, r24
	ADCSRA_REG.Bits.ADEN_bit=1; /*ENABLE MODUEL ADC*/
    1d0e:	e6 e2       	ldi	r30, 0x26	; 38
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	80 68       	ori	r24, 0x80	; 128
    1d16:	80 83       	st	Z, r24
	ADCSRA_REG.Bits.ADIE_bit=0; /*DISABLE ADC INTERRPUT */
    1d18:	e6 e2       	ldi	r30, 0x26	; 38
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	87 7f       	andi	r24, 0xF7	; 247
    1d20:	80 83       	st	Z, r24
	/*ADC PRRSCALER  F_CPU/8 */
	ADCSRA_REG.Bytes &= 0xF8 | Config_Ptr->prescaler;
    1d22:	a6 e2       	ldi	r26, 0x26	; 38
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e6 e2       	ldi	r30, 0x26	; 38
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	90 81       	ld	r25, Z
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	81 81       	ldd	r24, Z+1	; 0x01
    1d32:	88 6f       	ori	r24, 0xF8	; 248
    1d34:	89 23       	and	r24, r25
    1d36:	8c 93       	st	X, r24

}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
ADMUX_REG.Bytes|= channel_num & 0x07;
    1d4e:	a7 e2       	ldi	r26, 0x27	; 39
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e7 e2       	ldi	r30, 0x27	; 39
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	98 2f       	mov	r25, r24
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	87 70       	andi	r24, 0x07	; 7
    1d5e:	89 2b       	or	r24, r25
    1d60:	8c 93       	st	X, r24
ADCSRA_REG.Bits.ADSC_bit=1;
    1d62:	e6 e2       	ldi	r30, 0x26	; 38
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 64       	ori	r24, 0x40	; 64
    1d6a:	80 83       	st	Z, r24
while(ADCSRA_REG.Bits.ADIF_bit==0){};  /*waiting data send*/
    1d6c:	e6 e2       	ldi	r30, 0x26	; 38
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 71       	andi	r24, 0x10	; 16
    1d74:	88 23       	and	r24, r24
    1d76:	d1 f3       	breq	.-12     	; 0x1d6c <ADC_readChannel+0x2a>
ADCSRA_REG.Bits.ADIF_bit=0; /*set ADIF 0*/
    1d78:	e6 e2       	ldi	r30, 0x26	; 38
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8f 7e       	andi	r24, 0xEF	; 239
    1d80:	80 83       	st	Z, r24
return ADC;
    1d82:	e4 e2       	ldi	r30, 0x24	; 36
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <DCMOTOR_init>:
 * Initialize the DC-Motor:
 * 1. Setup the direction for the two motor pins through the GPIO driver.
 * 2. Stop the DC-Motor at the beginning through the GPIO driver .
 */
void DCMOTOR_init(void)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for INT1 and INT2 of H_bridge pins as output pins */
	GPIO_setupPinDirection(DCMOTOR_INT1_PORT_ID,DCMOTOR_INT1_PIN_ID,PIN_OUTPUT);
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	65 e0       	ldi	r22, 0x05	; 5
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_INT2_PORT_ID,DCMOTOR_INT2_PIN_ID,PIN_OUTPUT);
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	66 e0       	ldi	r22, 0x06	; 6
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>

	/* Stop the DC-Motor at the beginning through the GPIO driver
	 * by writing logical low on both INT1 and INT2 pins of the H_bridge*/
	GPIO_writePin(DCMOTOR_INT1_PORT_ID,DCMOTOR_INT1_PIN_ID, LOGIC_LOW);
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	65 e0       	ldi	r22, 0x05	; 5
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_INT2_PORT_ID,DCMOTOR_INT2_PIN_ID, LOGIC_LOW);
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	66 e0       	ldi	r22, 0x06	; 6
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
}
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <DcMotor_Rotate>:
 * 2. Send the required duty cycle to the PWM driver based on the
 *    required speed value.
 */

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <DcMotor_Rotate+0x6>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <DcMotor_Rotate+0x8>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the direction of the rotation or stop the motor */
	switch (state)
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	3c 83       	std	Y+4, r19	; 0x04
    1de0:	2b 83       	std	Y+3, r18	; 0x03
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	91 05       	cpc	r25, r1
    1dea:	51 f0       	breq	.+20     	; 0x1e00 <DcMotor_Rotate+0x38>
    1dec:	2b 81       	ldd	r18, Y+3	; 0x03
    1dee:	3c 81       	ldd	r19, Y+4	; 0x04
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 05       	cpc	r19, r1
    1df4:	81 f0       	breq	.+32     	; 0x1e16 <DcMotor_Rotate+0x4e>
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	b9 f0       	breq	.+46     	; 0x1e2c <DcMotor_Rotate+0x64>
    1dfe:	20 c0       	rjmp	.+64     	; 0x1e40 <DcMotor_Rotate+0x78>
	{
	case CW:
		GPIO_writePin(DCMOTOR_INT1_PORT_ID,DCMOTOR_INT1_PIN_ID, LOGIC_LOW);
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	65 e0       	ldi	r22, 0x05	; 5
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_INT2_PORT_ID,DCMOTOR_INT2_PIN_ID, LOGIC_HIGH);
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	66 e0       	ldi	r22, 0x06	; 6
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1e14:	15 c0       	rjmp	.+42     	; 0x1e40 <DcMotor_Rotate+0x78>
		break;
	case A_CW:
		GPIO_writePin(DCMOTOR_INT1_PORT_ID,DCMOTOR_INT1_PIN_ID, LOGIC_HIGH);
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	65 e0       	ldi	r22, 0x05	; 5
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_INT2_PORT_ID,DCMOTOR_INT2_PIN_ID, LOGIC_LOW);
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	66 e0       	ldi	r22, 0x06	; 6
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
    1e2a:	0a c0       	rjmp	.+20     	; 0x1e40 <DcMotor_Rotate+0x78>
		break;
	case STOP:
		GPIO_writePin(DCMOTOR_INT1_PORT_ID,DCMOTOR_INT1_PIN_ID, LOGIC_LOW);
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_INT2_PORT_ID,DCMOTOR_INT2_PIN_ID, LOGIC_LOW);
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <GPIO_writePin>
		break;
	}
	/* Send the duty cycle to the PWM driver */
	PWM_Timer0_Start(speed);
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	0e 94 51 14 	call	0x28a2	; 0x28a2 <PWM_Timer0_Start>
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <EEPROM_init>:
 *                      Functions Definitions                                 *
------------------------------------------------------------------------------*/
Twi_ConfigType twi;

void EEPROM_init(void)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	twi.speed=TWI_400_Kb_S;
    1e5c:	80 e8       	ldi	r24, 0x80	; 128
    1e5e:	9a e1       	ldi	r25, 0x1A	; 26
    1e60:	a6 e0       	ldi	r26, 0x06	; 6
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	80 93 77 01 	sts	0x0177, r24
    1e68:	90 93 78 01 	sts	0x0178, r25
    1e6c:	a0 93 79 01 	sts	0x0179, r26
    1e70:	b0 93 7a 01 	sts	0x017A, r27
	twi.prescalar=TWI_1;
    1e74:	10 92 7b 01 	sts	0x017B, r1
	twi.address=0x02;
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	80 93 7c 01 	sts	0x017C, r24
	TWI_init(&twi);
    1e7e:	87 e7       	ldi	r24, 0x77	; 119
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_init>
}
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <EEPROM_writeByte+0x6>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <EEPROM_writeByte+0x8>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e9e:	0e 94 82 13 	call	0x2704	; 0x2704 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1ea2:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1ea6:	88 30       	cpi	r24, 0x08	; 8
    1ea8:	11 f0       	breq	.+4      	; 0x1eae <EEPROM_writeByte+0x22>
        return ERROR;
    1eaa:	1c 82       	std	Y+4, r1	; 0x04
    1eac:	28 c0       	rjmp	.+80     	; 0x1efe <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	80 70       	andi	r24, 0x00	; 0
    1eb4:	97 70       	andi	r25, 0x07	; 7
    1eb6:	88 0f       	add	r24, r24
    1eb8:	89 2f       	mov	r24, r25
    1eba:	88 1f       	adc	r24, r24
    1ebc:	99 0b       	sbc	r25, r25
    1ebe:	91 95       	neg	r25
    1ec0:	80 6a       	ori	r24, 0xA0	; 160
    1ec2:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1ec6:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1eca:	88 31       	cpi	r24, 0x18	; 24
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <EEPROM_writeByte+0x46>
        return ERROR; 
    1ece:	1c 82       	std	Y+4, r1	; 0x04
    1ed0:	16 c0       	rjmp	.+44     	; 0x1efe <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1ed8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1edc:	88 32       	cpi	r24, 0x28	; 40
    1ede:	11 f0       	breq	.+4      	; 0x1ee4 <EEPROM_writeByte+0x58>
        return ERROR;
    1ee0:	1c 82       	std	Y+4, r1	; 0x04
    1ee2:	0d c0       	rjmp	.+26     	; 0x1efe <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1eea:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1eee:	88 32       	cpi	r24, 0x28	; 40
    1ef0:	11 f0       	breq	.+4      	; 0x1ef6 <EEPROM_writeByte+0x6a>
        return ERROR;
    1ef2:	1c 82       	std	Y+4, r1	; 0x04
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1ef6:	0e 94 92 13 	call	0x2724	; 0x2724 <TWI_stop>
	
    return SUCCESS;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	8c 83       	std	Y+4, r24	; 0x04
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <EEPROM_readByte+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <EEPROM_readByte+0x8>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	7c 83       	std	Y+4, r23	; 0x04
    1f22:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1f24:	0e 94 82 13 	call	0x2704	; 0x2704 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1f28:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1f2c:	88 30       	cpi	r24, 0x08	; 8
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <EEPROM_readByte+0x26>
        return ERROR;
    1f30:	1d 82       	std	Y+5, r1	; 0x05
    1f32:	44 c0       	rjmp	.+136    	; 0x1fbc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	80 70       	andi	r24, 0x00	; 0
    1f3a:	97 70       	andi	r25, 0x07	; 7
    1f3c:	88 0f       	add	r24, r24
    1f3e:	89 2f       	mov	r24, r25
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 0b       	sbc	r25, r25
    1f44:	91 95       	neg	r25
    1f46:	80 6a       	ori	r24, 0xA0	; 160
    1f48:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1f4c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1f50:	88 31       	cpi	r24, 0x18	; 24
    1f52:	11 f0       	breq	.+4      	; 0x1f58 <EEPROM_readByte+0x4a>
        return ERROR;
    1f54:	1d 82       	std	Y+5, r1	; 0x05
    1f56:	32 c0       	rjmp	.+100    	; 0x1fbc <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1f5e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1f62:	88 32       	cpi	r24, 0x28	; 40
    1f64:	11 f0       	breq	.+4      	; 0x1f6a <EEPROM_readByte+0x5c>
        return ERROR;
    1f66:	1d 82       	std	Y+5, r1	; 0x05
    1f68:	29 c0       	rjmp	.+82     	; 0x1fbc <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1f6a:	0e 94 82 13 	call	0x2704	; 0x2704 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1f6e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1f72:	80 31       	cpi	r24, 0x10	; 16
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <EEPROM_readByte+0x6c>
        return ERROR;
    1f76:	1d 82       	std	Y+5, r1	; 0x05
    1f78:	21 c0       	rjmp	.+66     	; 0x1fbc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	80 70       	andi	r24, 0x00	; 0
    1f80:	97 70       	andi	r25, 0x07	; 7
    1f82:	88 0f       	add	r24, r24
    1f84:	89 2f       	mov	r24, r25
    1f86:	88 1f       	adc	r24, r24
    1f88:	99 0b       	sbc	r25, r25
    1f8a:	91 95       	neg	r25
    1f8c:	81 6a       	ori	r24, 0xA1	; 161
    1f8e:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1f92:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1f96:	80 34       	cpi	r24, 0x40	; 64
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <EEPROM_readByte+0x90>
        return ERROR;
    1f9a:	1d 82       	std	Y+5, r1	; 0x05
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1f9e:	0e 94 c7 13 	call	0x278e	; 0x278e <TWI_readWithNACK>
    1fa2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1fa8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <TWI_getStatus>
    1fac:	88 35       	cpi	r24, 0x58	; 88
    1fae:	11 f0       	breq	.+4      	; 0x1fb4 <EEPROM_readByte+0xa6>
        return ERROR;
    1fb0:	1d 82       	std	Y+5, r1	; 0x05
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1fb4:	0e 94 92 13 	call	0x2724	; 0x2724 <TWI_stop>
    return SUCCESS;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <GPIO_setupPinDirection+0x6>
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <GPIO_setupPinDirection+0x8>
    1fd6:	0f 92       	push	r0
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	6a 83       	std	Y+2, r22	; 0x02
    1fe0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	88 30       	cpi	r24, 0x08	; 8
    1fe6:	08 f0       	brcs	.+2      	; 0x1fea <GPIO_setupPinDirection+0x1c>
    1fe8:	d5 c0       	rjmp	.+426    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	84 30       	cpi	r24, 0x04	; 4
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <GPIO_setupPinDirection+0x24>
    1ff0:	d1 c0       	rjmp	.+418    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	3d 83       	std	Y+5, r19	; 0x05
    1ffa:	2c 83       	std	Y+4, r18	; 0x04
    1ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	91 05       	cpc	r25, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <GPIO_setupPinDirection+0x3a>
    2006:	43 c0       	rjmp	.+134    	; 0x208e <GPIO_setupPinDirection+0xc0>
    2008:	2c 81       	ldd	r18, Y+4	; 0x04
    200a:	3d 81       	ldd	r19, Y+5	; 0x05
    200c:	22 30       	cpi	r18, 0x02	; 2
    200e:	31 05       	cpc	r19, r1
    2010:	2c f4       	brge	.+10     	; 0x201c <GPIO_setupPinDirection+0x4e>
    2012:	8c 81       	ldd	r24, Y+4	; 0x04
    2014:	9d 81       	ldd	r25, Y+5	; 0x05
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	71 f0       	breq	.+28     	; 0x2036 <GPIO_setupPinDirection+0x68>
    201a:	bc c0       	rjmp	.+376    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
    201c:	2c 81       	ldd	r18, Y+4	; 0x04
    201e:	3d 81       	ldd	r19, Y+5	; 0x05
    2020:	22 30       	cpi	r18, 0x02	; 2
    2022:	31 05       	cpc	r19, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <GPIO_setupPinDirection+0x5a>
    2026:	5f c0       	rjmp	.+190    	; 0x20e6 <GPIO_setupPinDirection+0x118>
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	91 05       	cpc	r25, r1
    2030:	09 f4       	brne	.+2      	; 0x2034 <GPIO_setupPinDirection+0x66>
    2032:	85 c0       	rjmp	.+266    	; 0x213e <GPIO_setupPinDirection+0x170>
    2034:	af c0       	rjmp	.+350    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	a1 f4       	brne	.+40     	; 0x2064 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    203c:	aa e3       	ldi	r26, 0x3A	; 58
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ea e3       	ldi	r30, 0x3A	; 58
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	48 2f       	mov	r20, r24
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 2e       	mov	r0, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <GPIO_setupPinDirection+0x8c>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	0a 94       	dec	r0
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <GPIO_setupPinDirection+0x88>
    205e:	84 2b       	or	r24, r20
    2060:	8c 93       	st	X, r24
    2062:	98 c0       	rjmp	.+304    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2064:	aa e3       	ldi	r26, 0x3A	; 58
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ea e3       	ldi	r30, 0x3A	; 58
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <GPIO_setupPinDirection+0xb4>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <GPIO_setupPinDirection+0xb0>
    2086:	80 95       	com	r24
    2088:	84 23       	and	r24, r20
    208a:	8c 93       	st	X, r24
    208c:	83 c0       	rjmp	.+262    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	a1 f4       	brne	.+40     	; 0x20bc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2094:	a7 e3       	ldi	r26, 0x37	; 55
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e7 e3       	ldi	r30, 0x37	; 55
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <GPIO_setupPinDirection+0xe4>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <GPIO_setupPinDirection+0xe0>
    20b6:	84 2b       	or	r24, r20
    20b8:	8c 93       	st	X, r24
    20ba:	6c c0       	rjmp	.+216    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    20bc:	a7 e3       	ldi	r26, 0x37	; 55
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e7 e3       	ldi	r30, 0x37	; 55
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	48 2f       	mov	r20, r24
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	02 2e       	mov	r0, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <GPIO_setupPinDirection+0x10c>
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	0a 94       	dec	r0
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <GPIO_setupPinDirection+0x108>
    20de:	80 95       	com	r24
    20e0:	84 23       	and	r24, r20
    20e2:	8c 93       	st	X, r24
    20e4:	57 c0       	rjmp	.+174    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	a1 f4       	brne	.+40     	; 0x2114 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    20ec:	a4 e3       	ldi	r26, 0x34	; 52
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e4 e3       	ldi	r30, 0x34	; 52
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	48 2f       	mov	r20, r24
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 2e       	mov	r0, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <GPIO_setupPinDirection+0x13c>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <GPIO_setupPinDirection+0x138>
    210e:	84 2b       	or	r24, r20
    2110:	8c 93       	st	X, r24
    2112:	40 c0       	rjmp	.+128    	; 0x2194 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2114:	a4 e3       	ldi	r26, 0x34	; 52
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e4 e3       	ldi	r30, 0x34	; 52
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	48 2f       	mov	r20, r24
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	02 2e       	mov	r0, r18
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <GPIO_setupPinDirection+0x164>
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	0a 94       	dec	r0
    2134:	e2 f7       	brpl	.-8      	; 0x212e <GPIO_setupPinDirection+0x160>
    2136:	80 95       	com	r24
    2138:	84 23       	and	r24, r20
    213a:	8c 93       	st	X, r24
    213c:	2b c0       	rjmp	.+86     	; 0x2194 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	a1 f4       	brne	.+40     	; 0x216c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2144:	a1 e3       	ldi	r26, 0x31	; 49
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e1 e3       	ldi	r30, 0x31	; 49
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	48 2f       	mov	r20, r24
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	02 2e       	mov	r0, r18
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <GPIO_setupPinDirection+0x194>
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	0a 94       	dec	r0
    2164:	e2 f7       	brpl	.-8      	; 0x215e <GPIO_setupPinDirection+0x190>
    2166:	84 2b       	or	r24, r20
    2168:	8c 93       	st	X, r24
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    216c:	a1 e3       	ldi	r26, 0x31	; 49
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e1 e3       	ldi	r30, 0x31	; 49
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	48 2f       	mov	r20, r24
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 2e       	mov	r0, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <GPIO_setupPinDirection+0x1bc>
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	0a 94       	dec	r0
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <GPIO_setupPinDirection+0x1b8>
    218e:	80 95       	com	r24
    2190:	84 23       	and	r24, r20
    2192:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <GPIO_writePin+0x6>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <GPIO_writePin+0x8>
    21ac:	0f 92       	push	r0
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	6a 83       	std	Y+2, r22	; 0x02
    21b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	88 30       	cpi	r24, 0x08	; 8
    21bc:	08 f0       	brcs	.+2      	; 0x21c0 <GPIO_writePin+0x1c>
    21be:	d5 c0       	rjmp	.+426    	; 0x236a <GPIO_writePin+0x1c6>
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	84 30       	cpi	r24, 0x04	; 4
    21c4:	08 f0       	brcs	.+2      	; 0x21c8 <GPIO_writePin+0x24>
    21c6:	d1 c0       	rjmp	.+418    	; 0x236a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	3d 83       	std	Y+5, r19	; 0x05
    21d0:	2c 83       	std	Y+4, r18	; 0x04
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	91 05       	cpc	r25, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <GPIO_writePin+0x3a>
    21dc:	43 c0       	rjmp	.+134    	; 0x2264 <GPIO_writePin+0xc0>
    21de:	2c 81       	ldd	r18, Y+4	; 0x04
    21e0:	3d 81       	ldd	r19, Y+5	; 0x05
    21e2:	22 30       	cpi	r18, 0x02	; 2
    21e4:	31 05       	cpc	r19, r1
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <GPIO_writePin+0x4e>
    21e8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ea:	9d 81       	ldd	r25, Y+5	; 0x05
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	71 f0       	breq	.+28     	; 0x220c <GPIO_writePin+0x68>
    21f0:	bc c0       	rjmp	.+376    	; 0x236a <GPIO_writePin+0x1c6>
    21f2:	2c 81       	ldd	r18, Y+4	; 0x04
    21f4:	3d 81       	ldd	r19, Y+5	; 0x05
    21f6:	22 30       	cpi	r18, 0x02	; 2
    21f8:	31 05       	cpc	r19, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <GPIO_writePin+0x5a>
    21fc:	5f c0       	rjmp	.+190    	; 0x22bc <GPIO_writePin+0x118>
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	83 30       	cpi	r24, 0x03	; 3
    2204:	91 05       	cpc	r25, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <GPIO_writePin+0x66>
    2208:	85 c0       	rjmp	.+266    	; 0x2314 <GPIO_writePin+0x170>
    220a:	af c0       	rjmp	.+350    	; 0x236a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	a1 f4       	brne	.+40     	; 0x223a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2212:	ab e3       	ldi	r26, 0x3B	; 59
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	eb e3       	ldi	r30, 0x3B	; 59
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <GPIO_writePin+0x8c>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <GPIO_writePin+0x88>
    2234:	84 2b       	or	r24, r20
    2236:	8c 93       	st	X, r24
    2238:	98 c0       	rjmp	.+304    	; 0x236a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    223a:	ab e3       	ldi	r26, 0x3B	; 59
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	eb e3       	ldi	r30, 0x3B	; 59
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	48 2f       	mov	r20, r24
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 2e       	mov	r0, r18
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <GPIO_writePin+0xb4>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	0a 94       	dec	r0
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <GPIO_writePin+0xb0>
    225c:	80 95       	com	r24
    225e:	84 23       	and	r24, r20
    2260:	8c 93       	st	X, r24
    2262:	83 c0       	rjmp	.+262    	; 0x236a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	a1 f4       	brne	.+40     	; 0x2292 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    226a:	a8 e3       	ldi	r26, 0x38	; 56
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e8 e3       	ldi	r30, 0x38	; 56
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	48 2f       	mov	r20, r24
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	02 2e       	mov	r0, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <GPIO_writePin+0xe4>
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	0a 94       	dec	r0
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <GPIO_writePin+0xe0>
    228c:	84 2b       	or	r24, r20
    228e:	8c 93       	st	X, r24
    2290:	6c c0       	rjmp	.+216    	; 0x236a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2292:	a8 e3       	ldi	r26, 0x38	; 56
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e8 e3       	ldi	r30, 0x38	; 56
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	02 2e       	mov	r0, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <GPIO_writePin+0x10c>
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	0a 94       	dec	r0
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <GPIO_writePin+0x108>
    22b4:	80 95       	com	r24
    22b6:	84 23       	and	r24, r20
    22b8:	8c 93       	st	X, r24
    22ba:	57 c0       	rjmp	.+174    	; 0x236a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	81 30       	cpi	r24, 0x01	; 1
    22c0:	a1 f4       	brne	.+40     	; 0x22ea <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    22c2:	a5 e3       	ldi	r26, 0x35	; 53
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e5 e3       	ldi	r30, 0x35	; 53
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	48 2f       	mov	r20, r24
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	02 2e       	mov	r0, r18
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <GPIO_writePin+0x13c>
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	0a 94       	dec	r0
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <GPIO_writePin+0x138>
    22e4:	84 2b       	or	r24, r20
    22e6:	8c 93       	st	X, r24
    22e8:	40 c0       	rjmp	.+128    	; 0x236a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    22ea:	a5 e3       	ldi	r26, 0x35	; 53
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e5 e3       	ldi	r30, 0x35	; 53
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	48 2f       	mov	r20, r24
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 2e       	mov	r0, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <GPIO_writePin+0x164>
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <GPIO_writePin+0x160>
    230c:	80 95       	com	r24
    230e:	84 23       	and	r24, r20
    2310:	8c 93       	st	X, r24
    2312:	2b c0       	rjmp	.+86     	; 0x236a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	a1 f4       	brne	.+40     	; 0x2342 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    231a:	a2 e3       	ldi	r26, 0x32	; 50
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e2 e3       	ldi	r30, 0x32	; 50
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	02 2e       	mov	r0, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <GPIO_writePin+0x194>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <GPIO_writePin+0x190>
    233c:	84 2b       	or	r24, r20
    233e:	8c 93       	st	X, r24
    2340:	14 c0       	rjmp	.+40     	; 0x236a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2342:	a2 e3       	ldi	r26, 0x32	; 50
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e2 e3       	ldi	r30, 0x32	; 50
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	48 2f       	mov	r20, r24
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	02 2e       	mov	r0, r18
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <GPIO_writePin+0x1bc>
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	0a 94       	dec	r0
    2362:	e2 f7       	brpl	.-8      	; 0x235c <GPIO_writePin+0x1b8>
    2364:	80 95       	com	r24
    2366:	84 23       	and	r24, r20
    2368:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <GPIO_readPin+0x6>
    2380:	00 d0       	rcall	.+0      	; 0x2382 <GPIO_readPin+0x8>
    2382:	0f 92       	push	r0
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	8a 83       	std	Y+2, r24	; 0x02
    238a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    238c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	88 30       	cpi	r24, 0x08	; 8
    2392:	08 f0       	brcs	.+2      	; 0x2396 <GPIO_readPin+0x1c>
    2394:	84 c0       	rjmp	.+264    	; 0x249e <GPIO_readPin+0x124>
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	84 30       	cpi	r24, 0x04	; 4
    239a:	08 f0       	brcs	.+2      	; 0x239e <GPIO_readPin+0x24>
    239c:	80 c0       	rjmp	.+256    	; 0x249e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	3d 83       	std	Y+5, r19	; 0x05
    23a6:	2c 83       	std	Y+4, r18	; 0x04
    23a8:	4c 81       	ldd	r20, Y+4	; 0x04
    23aa:	5d 81       	ldd	r21, Y+5	; 0x05
    23ac:	41 30       	cpi	r20, 0x01	; 1
    23ae:	51 05       	cpc	r21, r1
    23b0:	79 f1       	breq	.+94     	; 0x2410 <GPIO_readPin+0x96>
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	9d 81       	ldd	r25, Y+5	; 0x05
    23b6:	82 30       	cpi	r24, 0x02	; 2
    23b8:	91 05       	cpc	r25, r1
    23ba:	34 f4       	brge	.+12     	; 0x23c8 <GPIO_readPin+0x4e>
    23bc:	2c 81       	ldd	r18, Y+4	; 0x04
    23be:	3d 81       	ldd	r19, Y+5	; 0x05
    23c0:	21 15       	cp	r18, r1
    23c2:	31 05       	cpc	r19, r1
    23c4:	69 f0       	breq	.+26     	; 0x23e0 <GPIO_readPin+0x66>
    23c6:	6b c0       	rjmp	.+214    	; 0x249e <GPIO_readPin+0x124>
    23c8:	4c 81       	ldd	r20, Y+4	; 0x04
    23ca:	5d 81       	ldd	r21, Y+5	; 0x05
    23cc:	42 30       	cpi	r20, 0x02	; 2
    23ce:	51 05       	cpc	r21, r1
    23d0:	b9 f1       	breq	.+110    	; 0x2440 <GPIO_readPin+0xc6>
    23d2:	8c 81       	ldd	r24, Y+4	; 0x04
    23d4:	9d 81       	ldd	r25, Y+5	; 0x05
    23d6:	83 30       	cpi	r24, 0x03	; 3
    23d8:	91 05       	cpc	r25, r1
    23da:	09 f4       	brne	.+2      	; 0x23de <GPIO_readPin+0x64>
    23dc:	49 c0       	rjmp	.+146    	; 0x2470 <GPIO_readPin+0xf6>
    23de:	5f c0       	rjmp	.+190    	; 0x249e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    23e0:	e9 e3       	ldi	r30, 0x39	; 57
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a9 01       	movw	r20, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <GPIO_readPin+0x7e>
    23f4:	55 95       	asr	r21
    23f6:	47 95       	ror	r20
    23f8:	8a 95       	dec	r24
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <GPIO_readPin+0x7a>
    23fc:	ca 01       	movw	r24, r20
    23fe:	81 70       	andi	r24, 0x01	; 1
    2400:	90 70       	andi	r25, 0x00	; 0
    2402:	88 23       	and	r24, r24
    2404:	19 f0       	breq	.+6      	; 0x240c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	49 c0       	rjmp	.+146    	; 0x249e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    240c:	19 82       	std	Y+1, r1	; 0x01
    240e:	47 c0       	rjmp	.+142    	; 0x249e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2410:	e6 e3       	ldi	r30, 0x36	; 54
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a9 01       	movw	r20, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <GPIO_readPin+0xae>
    2424:	55 95       	asr	r21
    2426:	47 95       	ror	r20
    2428:	8a 95       	dec	r24
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <GPIO_readPin+0xaa>
    242c:	ca 01       	movw	r24, r20
    242e:	81 70       	andi	r24, 0x01	; 1
    2430:	90 70       	andi	r25, 0x00	; 0
    2432:	88 23       	and	r24, r24
    2434:	19 f0       	breq	.+6      	; 0x243c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	31 c0       	rjmp	.+98     	; 0x249e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    243c:	19 82       	std	Y+1, r1	; 0x01
    243e:	2f c0       	rjmp	.+94     	; 0x249e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2440:	e3 e3       	ldi	r30, 0x33	; 51
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a9 01       	movw	r20, r18
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <GPIO_readPin+0xde>
    2454:	55 95       	asr	r21
    2456:	47 95       	ror	r20
    2458:	8a 95       	dec	r24
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <GPIO_readPin+0xda>
    245c:	ca 01       	movw	r24, r20
    245e:	81 70       	andi	r24, 0x01	; 1
    2460:	90 70       	andi	r25, 0x00	; 0
    2462:	88 23       	and	r24, r24
    2464:	19 f0       	breq	.+6      	; 0x246c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	19 c0       	rjmp	.+50     	; 0x249e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    246c:	19 82       	std	Y+1, r1	; 0x01
    246e:	17 c0       	rjmp	.+46     	; 0x249e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2470:	e0 e3       	ldi	r30, 0x30	; 48
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a9 01       	movw	r20, r18
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <GPIO_readPin+0x10e>
    2484:	55 95       	asr	r21
    2486:	47 95       	ror	r20
    2488:	8a 95       	dec	r24
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <GPIO_readPin+0x10a>
    248c:	ca 01       	movw	r24, r20
    248e:	81 70       	andi	r24, 0x01	; 1
    2490:	90 70       	andi	r25, 0x00	; 0
    2492:	88 23       	and	r24, r24
    2494:	19 f0       	breq	.+6      	; 0x249c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	01 c0       	rjmp	.+2      	; 0x249e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    249c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <GPIO_setupPortDirection+0x6>
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <GPIO_setupPortDirection+0x8>
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	84 30       	cpi	r24, 0x04	; 4
    24c4:	90 f5       	brcc	.+100    	; 0x252a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	3c 83       	std	Y+4, r19	; 0x04
    24ce:	2b 83       	std	Y+3, r18	; 0x03
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	91 05       	cpc	r25, r1
    24d8:	d1 f0       	breq	.+52     	; 0x250e <GPIO_setupPortDirection+0x5e>
    24da:	2b 81       	ldd	r18, Y+3	; 0x03
    24dc:	3c 81       	ldd	r19, Y+4	; 0x04
    24de:	22 30       	cpi	r18, 0x02	; 2
    24e0:	31 05       	cpc	r19, r1
    24e2:	2c f4       	brge	.+10     	; 0x24ee <GPIO_setupPortDirection+0x3e>
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	61 f0       	breq	.+24     	; 0x2504 <GPIO_setupPortDirection+0x54>
    24ec:	1e c0       	rjmp	.+60     	; 0x252a <GPIO_setupPortDirection+0x7a>
    24ee:	2b 81       	ldd	r18, Y+3	; 0x03
    24f0:	3c 81       	ldd	r19, Y+4	; 0x04
    24f2:	22 30       	cpi	r18, 0x02	; 2
    24f4:	31 05       	cpc	r19, r1
    24f6:	81 f0       	breq	.+32     	; 0x2518 <GPIO_setupPortDirection+0x68>
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	83 30       	cpi	r24, 0x03	; 3
    24fe:	91 05       	cpc	r25, r1
    2500:	81 f0       	breq	.+32     	; 0x2522 <GPIO_setupPortDirection+0x72>
    2502:	13 c0       	rjmp	.+38     	; 0x252a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2504:	ea e3       	ldi	r30, 0x3A	; 58
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	80 83       	st	Z, r24
    250c:	0e c0       	rjmp	.+28     	; 0x252a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    250e:	e7 e3       	ldi	r30, 0x37	; 55
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	80 83       	st	Z, r24
    2516:	09 c0       	rjmp	.+18     	; 0x252a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2518:	e4 e3       	ldi	r30, 0x34	; 52
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	80 83       	st	Z, r24
    2520:	04 c0       	rjmp	.+8      	; 0x252a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2522:	e1 e3       	ldi	r30, 0x31	; 49
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	80 83       	st	Z, r24
			break;
		}
	}
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <GPIO_writePort+0x6>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <GPIO_writePort+0x8>
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	84 30       	cpi	r24, 0x04	; 4
    254c:	90 f5       	brcc	.+100    	; 0x25b2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	3c 83       	std	Y+4, r19	; 0x04
    2556:	2b 83       	std	Y+3, r18	; 0x03
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	91 05       	cpc	r25, r1
    2560:	d1 f0       	breq	.+52     	; 0x2596 <GPIO_writePort+0x5e>
    2562:	2b 81       	ldd	r18, Y+3	; 0x03
    2564:	3c 81       	ldd	r19, Y+4	; 0x04
    2566:	22 30       	cpi	r18, 0x02	; 2
    2568:	31 05       	cpc	r19, r1
    256a:	2c f4       	brge	.+10     	; 0x2576 <GPIO_writePort+0x3e>
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	61 f0       	breq	.+24     	; 0x258c <GPIO_writePort+0x54>
    2574:	1e c0       	rjmp	.+60     	; 0x25b2 <GPIO_writePort+0x7a>
    2576:	2b 81       	ldd	r18, Y+3	; 0x03
    2578:	3c 81       	ldd	r19, Y+4	; 0x04
    257a:	22 30       	cpi	r18, 0x02	; 2
    257c:	31 05       	cpc	r19, r1
    257e:	81 f0       	breq	.+32     	; 0x25a0 <GPIO_writePort+0x68>
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	91 05       	cpc	r25, r1
    2588:	81 f0       	breq	.+32     	; 0x25aa <GPIO_writePort+0x72>
    258a:	13 c0       	rjmp	.+38     	; 0x25b2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    258c:	eb e3       	ldi	r30, 0x3B	; 59
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	80 83       	st	Z, r24
    2594:	0e c0       	rjmp	.+28     	; 0x25b2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2596:	e8 e3       	ldi	r30, 0x38	; 56
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	80 83       	st	Z, r24
    259e:	09 c0       	rjmp	.+18     	; 0x25b2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    25a0:	e5 e3       	ldi	r30, 0x35	; 53
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	80 83       	st	Z, r24
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    25aa:	e2 e3       	ldi	r30, 0x32	; 50
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <GPIO_readPort+0x6>
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <GPIO_readPort+0x8>
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    25ce:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	84 30       	cpi	r24, 0x04	; 4
    25d4:	90 f5       	brcc	.+100    	; 0x263a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	3c 83       	std	Y+4, r19	; 0x04
    25de:	2b 83       	std	Y+3, r18	; 0x03
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	91 05       	cpc	r25, r1
    25e8:	d1 f0       	breq	.+52     	; 0x261e <GPIO_readPort+0x5e>
    25ea:	2b 81       	ldd	r18, Y+3	; 0x03
    25ec:	3c 81       	ldd	r19, Y+4	; 0x04
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	31 05       	cpc	r19, r1
    25f2:	2c f4       	brge	.+10     	; 0x25fe <GPIO_readPort+0x3e>
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	61 f0       	breq	.+24     	; 0x2614 <GPIO_readPort+0x54>
    25fc:	1e c0       	rjmp	.+60     	; 0x263a <GPIO_readPort+0x7a>
    25fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2600:	3c 81       	ldd	r19, Y+4	; 0x04
    2602:	22 30       	cpi	r18, 0x02	; 2
    2604:	31 05       	cpc	r19, r1
    2606:	81 f0       	breq	.+32     	; 0x2628 <GPIO_readPort+0x68>
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	83 30       	cpi	r24, 0x03	; 3
    260e:	91 05       	cpc	r25, r1
    2610:	81 f0       	breq	.+32     	; 0x2632 <GPIO_readPort+0x72>
    2612:	13 c0       	rjmp	.+38     	; 0x263a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2614:	e9 e3       	ldi	r30, 0x39	; 57
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	0e c0       	rjmp	.+28     	; 0x263a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    261e:	e6 e3       	ldi	r30, 0x36	; 54
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	09 c0       	rjmp	.+18     	; 0x263a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2628:	e3 e3       	ldi	r30, 0x33	; 51
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	04 c0       	rjmp	.+8      	; 0x263a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2632:	e0 e3       	ldi	r30, 0x30	; 48
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    263a:	89 81       	ldd	r24, Y+1	; 0x01
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <TWI_init>:


#include "i2c.h"

void TWI_init(const Twi_ConfigType * Config_Ptr)
{
    264a:	ef 92       	push	r14
    264c:	ff 92       	push	r15
    264e:	0f 93       	push	r16
    2650:	1f 93       	push	r17
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <TWI_init+0xe>
    2658:	00 d0       	rcall	.+0      	; 0x265a <TWI_init+0x10>
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
	uint16 twbrValue = (uint16)(((F_CPU/Config_Ptr->speed)-16)/(2*Config_Ptr->prescalar));
    2662:	eb 81       	ldd	r30, Y+3	; 0x03
    2664:	fc 81       	ldd	r31, Y+4	; 0x04
    2666:	20 81       	ld	r18, Z
    2668:	31 81       	ldd	r19, Z+1	; 0x01
    266a:	42 81       	ldd	r20, Z+2	; 0x02
    266c:	53 81       	ldd	r21, Z+3	; 0x03
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	92 e1       	ldi	r25, 0x12	; 18
    2672:	aa e7       	ldi	r26, 0x7A	; 122
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    267e:	da 01       	movw	r26, r20
    2680:	c9 01       	movw	r24, r18
    2682:	0f 2e       	mov	r0, r31
    2684:	f0 ef       	ldi	r31, 0xF0	; 240
    2686:	ef 2e       	mov	r14, r31
    2688:	ff ef       	ldi	r31, 0xFF	; 255
    268a:	ff 2e       	mov	r15, r31
    268c:	ff ef       	ldi	r31, 0xFF	; 255
    268e:	0f 2f       	mov	r16, r31
    2690:	ff ef       	ldi	r31, 0xFF	; 255
    2692:	1f 2f       	mov	r17, r31
    2694:	f0 2d       	mov	r31, r0
    2696:	e8 0e       	add	r14, r24
    2698:	f9 1e       	adc	r15, r25
    269a:	0a 1f       	adc	r16, r26
    269c:	1b 1f       	adc	r17, r27
    269e:	eb 81       	ldd	r30, Y+3	; 0x03
    26a0:	fc 81       	ldd	r31, Y+4	; 0x04
    26a2:	84 81       	ldd	r24, Z+4	; 0x04
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	9c 01       	movw	r18, r24
    26ae:	44 27       	eor	r20, r20
    26b0:	37 fd       	sbrc	r19, 7
    26b2:	40 95       	com	r20
    26b4:	54 2f       	mov	r21, r20
    26b6:	c8 01       	movw	r24, r16
    26b8:	b7 01       	movw	r22, r14
    26ba:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    26be:	da 01       	movw	r26, r20
    26c0:	c9 01       	movw	r24, r18
    26c2:	9a 83       	std	Y+2, r25	; 0x02
    26c4:	89 83       	std	Y+1, r24	; 0x01
	TWBR = twbrValue;
    26c6:	e0 e2       	ldi	r30, 0x20	; 32
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	80 83       	st	Z, r24
	TWSR = Config_Ptr->prescalar;
    26ce:	a1 e2       	ldi	r26, 0x21	; 33
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	eb 81       	ldd	r30, Y+3	; 0x03
    26d4:	fc 81       	ldd	r31, Y+4	; 0x04
    26d6:	84 81       	ldd	r24, Z+4	; 0x04
    26d8:	8c 93       	st	X, r24

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = Config_Ptr->address;
    26da:	a2 e2       	ldi	r26, 0x22	; 34
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	eb 81       	ldd	r30, Y+3	; 0x03
    26e0:	fc 81       	ldd	r31, Y+4	; 0x04
    26e2:	85 81       	ldd	r24, Z+5	; 0x05
    26e4:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    26e6:	e6 e5       	ldi	r30, 0x56	; 86
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	84 e0       	ldi	r24, 0x04	; 4
    26ec:	80 83       	st	Z, r24
}
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	08 95       	ret

00002704 <TWI_start>:

void TWI_start(void)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    270c:	e6 e5       	ldi	r30, 0x56	; 86
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	84 ea       	ldi	r24, 0xA4	; 164
    2712:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2714:	e6 e5       	ldi	r30, 0x56	; 86
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	88 23       	and	r24, r24
    271c:	dc f7       	brge	.-10     	; 0x2714 <TWI_start+0x10>
}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <TWI_stop>:

void TWI_stop(void)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    272c:	e6 e5       	ldi	r30, 0x56	; 86
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	84 e9       	ldi	r24, 0x94	; 148
    2732:	80 83       	st	Z, r24
}
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <TWI_write>:

void TWI_write(uint8 data)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	0f 92       	push	r0
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2746:	e3 e2       	ldi	r30, 0x23	; 35
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    274e:	e6 e5       	ldi	r30, 0x56	; 86
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	84 e8       	ldi	r24, 0x84	; 132
    2754:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2756:	e6 e5       	ldi	r30, 0x56	; 86
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	88 23       	and	r24, r24
    275e:	dc f7       	brge	.-10     	; 0x2756 <TWI_write+0x1c>
}
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2770:	e6 e5       	ldi	r30, 0x56	; 86
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	84 ec       	ldi	r24, 0xC4	; 196
    2776:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2778:	e6 e5       	ldi	r30, 0x56	; 86
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	88 23       	and	r24, r24
    2780:	dc f7       	brge	.-10     	; 0x2778 <TWI_readWithACK+0x10>
	/* Read Data */
	return TWDR;
    2782:	e3 e2       	ldi	r30, 0x23	; 35
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
}
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2796:	e6 e5       	ldi	r30, 0x56	; 86
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	84 e8       	ldi	r24, 0x84	; 132
    279c:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    279e:	e6 e5       	ldi	r30, 0x56	; 86
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	88 23       	and	r24, r24
    27a6:	dc f7       	brge	.-10     	; 0x279e <TWI_readWithNACK+0x10>
	/* Read Data */
	return TWDR;
    27a8:	e3 e2       	ldi	r30, 0x23	; 35
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
}
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	0f 92       	push	r0
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    27be:	e1 e2       	ldi	r30, 0x21	; 33
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	88 7f       	andi	r24, 0xF8	; 248
    27c6:	89 83       	std	Y+1, r24	; 0x01
	return status;
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ca:	0f 90       	pop	r0
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <LM35_getTemperature+0x6>
    27d8:	0f 92       	push	r0
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    27de:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    27e0:	1a 82       	std	Y+2, r1	; 0x02
    27e2:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <ADC_readChannel>
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	cc 01       	movw	r24, r24
    27f4:	a0 e0       	ldi	r26, 0x00	; 0
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	26 e9       	ldi	r18, 0x96	; 150
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__mulsi3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	2a e0       	ldi	r18, 0x0A	; 10
    281e:	37 ed       	ldi	r19, 0xD7	; 215
    2820:	43 e2       	ldi	r20, 0x23	; 35
    2822:	50 e4       	ldi	r21, 0x40	; 64
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 ed       	ldi	r19, 0xD0	; 208
    2834:	4f eb       	ldi	r20, 0xBF	; 191
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <PWM_Timer0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void PWM_Timer0_init (void)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; // Set Timer Initial Value to 0
    2864:	e2 e5       	ldi	r30, 0x52	; 82
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	10 82       	st	Z, r1
	GPIO_setupPinDirection(PWM_OUTPUT_PORT_ID, PWM_OUTPUT_PIN_ID, PIN_OUTPUT); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	63 e0       	ldi	r22, 0x03	; 3
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
    */
	TCCR0_REG.Bits.WGM00_bit=1;
    2874:	e3 e5       	ldi	r30, 0x53	; 83
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	80 64       	ori	r24, 0x40	; 64
    287c:	80 83       	st	Z, r24
	TCCR0_REG.Bits.WGM01_bit=1;
    287e:	e3 e5       	ldi	r30, 0x53	; 83
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	88 60       	ori	r24, 0x08	; 8
    2886:	80 83       	st	Z, r24
	TCCR0_REG.Bits.COM01_bit=1;
    2888:	e3 e5       	ldi	r30, 0x53	; 83
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	80 62       	ori	r24, 0x20	; 32
    2890:	80 83       	st	Z, r24
	TCCR0_REG.Bits.CS01_bit=1;
    2892:	e3 e5       	ldi	r30, 0x53	; 83
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	82 60       	ori	r24, 0x02	; 2
    289a:	80 83       	st	Z, r24
}
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	0f 92       	push	r0
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = duty_cycle;
    28ae:	ec e5       	ldi	r30, 0x5C	; 92
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	80 83       	st	Z, r24


}
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	64 e0       	ldi	r22, 0x04	; 4
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	65 e0       	ldi	r22, 0x05	; 5
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	66 e0       	ldi	r22, 0x06	; 6
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	67 e0       	ldi	r22, 0x07	; 7
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    28ee:	ed e2       	ldi	r30, 0x2D	; 45
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 e5       	ldi	r24, 0x50	; 80
    28f4:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    28f6:	ae e2       	ldi	r26, 0x2E	; 46
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	ee e2       	ldi	r30, 0x2E	; 46
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	8e 7f       	andi	r24, 0xFE	; 254
    2902:	8c 93       	st	X, r24
}
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	64 e0       	ldi	r22, 0x04	; 4
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	65 e0       	ldi	r22, 0x05	; 5
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	66 e0       	ldi	r22, 0x06	; 6
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	67 e0       	ldi	r22, 0x07	; 7
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    293a:	ed e2       	ldi	r30, 0x2D	; 45
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 e4       	ldi	r24, 0x40	; 64
    2940:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    2942:	ae e2       	ldi	r26, 0x2E	; 46
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	ee e2       	ldi	r30, 0x2E	; 46
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8e 7f       	andi	r24, 0xFE	; 254
    294e:	8c 93       	st	X, r24
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    2962:	ef e2       	ldi	r30, 0x2F	; 47
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    296a:	ee e2       	ldi	r30, 0x2E	; 46
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	88 23       	and	r24, r24
    2972:	dc f7       	brge	.-10     	; 0x296a <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    2974:	ef e2       	ldi	r30, 0x2F	; 47
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
}
    297a:	0f 90       	pop	r0
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	00 d0       	rcall	.+0      	; 0x2988 <SPI_sendString+0x6>
    2988:	00 d0       	rcall	.+0      	; 0x298a <SPI_sendString+0x8>
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    2992:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    2994:	19 82       	std	Y+1, r1	; 0x01
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	fc 01       	movw	r30, r24
    29a4:	e2 0f       	add	r30, r18
    29a6:	f3 1f       	adc	r31, r19
    29a8:	80 81       	ld	r24, Z
    29aa:	0e 94 ab 14 	call	0x2956	; 0x2956 <SPI_sendReceiveByte>
    29ae:	89 83       	std	Y+1, r24	; 0x01
		i++;
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	80 81       	ld	r24, Z
    29c8:	88 23       	and	r24, r24
    29ca:	31 f7       	brne	.-52     	; 0x2998 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <SPI_receiveString+0xa>
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	9b 83       	std	Y+3, r25	; 0x03
    29ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29ee:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	9b 81       	ldd	r25, Y+3	; 0x03
    29fa:	8c 01       	movw	r16, r24
    29fc:	02 0f       	add	r16, r18
    29fe:	13 1f       	adc	r17, r19
    2a00:	8a ea       	ldi	r24, 0xAA	; 170
    2a02:	0e 94 ab 14 	call	0x2956	; 0x2956 <SPI_sendReceiveByte>
    2a06:	f8 01       	movw	r30, r16
    2a08:	80 83       	st	Z, r24
    2a0a:	10 c0       	rjmp	.+32     	; 0x2a2c <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	8f 5f       	subi	r24, 0xFF	; 255
    2a10:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	8c 01       	movw	r16, r24
    2a1e:	02 0f       	add	r16, r18
    2a20:	13 1f       	adc	r17, r19
    2a22:	8a ea       	ldi	r24, 0xAA	; 170
    2a24:	0e 94 ab 14 	call	0x2956	; 0x2956 <SPI_sendReceiveByte>
    2a28:	f8 01       	movw	r30, r16
    2a2a:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	9b 81       	ldd	r25, Y+3	; 0x03
    2a36:	fc 01       	movw	r30, r24
    2a38:	e2 0f       	add	r30, r18
    2a3a:	f3 1f       	adc	r31, r19
    2a3c:	80 81       	ld	r24, Z
    2a3e:	83 32       	cpi	r24, 0x23	; 35
    2a40:	29 f7       	brne	.-54     	; 0x2a0c <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	e2 0f       	add	r30, r18
    2a50:	f3 1f       	adc	r31, r19
    2a52:	10 82       	st	Z, r1
}
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	08 95       	ret

00002a64 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    2a64:	1f 92       	push	r1
    2a66:	0f 92       	push	r0
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	0f 92       	push	r0
    2a6c:	11 24       	eor	r1, r1
    2a6e:	2f 93       	push	r18
    2a70:	3f 93       	push	r19
    2a72:	4f 93       	push	r20
    2a74:	5f 93       	push	r21
    2a76:	6f 93       	push	r22
    2a78:	7f 93       	push	r23
    2a7a:	8f 93       	push	r24
    2a7c:	9f 93       	push	r25
    2a7e:	af 93       	push	r26
    2a80:	bf 93       	push	r27
    2a82:	ef 93       	push	r30
    2a84:	ff 93       	push	r31
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2a8e:	80 91 69 01 	lds	r24, 0x0169
    2a92:	90 91 6a 01 	lds	r25, 0x016A
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	29 f0       	breq	.+10     	; 0x2aa4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2a9a:	e0 91 69 01 	lds	r30, 0x0169
    2a9e:	f0 91 6a 01 	lds	r31, 0x016A
    2aa2:	09 95       	icall
	}
}
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	bf 91       	pop	r27
    2aae:	af 91       	pop	r26
    2ab0:	9f 91       	pop	r25
    2ab2:	8f 91       	pop	r24
    2ab4:	7f 91       	pop	r23
    2ab6:	6f 91       	pop	r22
    2ab8:	5f 91       	pop	r21
    2aba:	4f 91       	pop	r20
    2abc:	3f 91       	pop	r19
    2abe:	2f 91       	pop	r18
    2ac0:	0f 90       	pop	r0
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	0f 90       	pop	r0
    2ac6:	1f 90       	pop	r1
    2ac8:	18 95       	reti

00002aca <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2aca:	1f 92       	push	r1
    2acc:	0f 92       	push	r0
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	0f 92       	push	r0
    2ad2:	11 24       	eor	r1, r1
    2ad4:	2f 93       	push	r18
    2ad6:	3f 93       	push	r19
    2ad8:	4f 93       	push	r20
    2ada:	5f 93       	push	r21
    2adc:	6f 93       	push	r22
    2ade:	7f 93       	push	r23
    2ae0:	8f 93       	push	r24
    2ae2:	9f 93       	push	r25
    2ae4:	af 93       	push	r26
    2ae6:	bf 93       	push	r27
    2ae8:	ef 93       	push	r30
    2aea:	ff 93       	push	r31
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2af4:	80 91 69 01 	lds	r24, 0x0169
    2af8:	90 91 6a 01 	lds	r25, 0x016A
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	29 f0       	breq	.+10     	; 0x2b0a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2b00:	e0 91 69 01 	lds	r30, 0x0169
    2b04:	f0 91 6a 01 	lds	r31, 0x016A
    2b08:	09 95       	icall
	}
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	ff 91       	pop	r31
    2b10:	ef 91       	pop	r30
    2b12:	bf 91       	pop	r27
    2b14:	af 91       	pop	r26
    2b16:	9f 91       	pop	r25
    2b18:	8f 91       	pop	r24
    2b1a:	7f 91       	pop	r23
    2b1c:	6f 91       	pop	r22
    2b1e:	5f 91       	pop	r21
    2b20:	4f 91       	pop	r20
    2b22:	3f 91       	pop	r19
    2b24:	2f 91       	pop	r18
    2b26:	0f 90       	pop	r0
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	0f 90       	pop	r0
    2b2c:	1f 90       	pop	r1
    2b2e:	18 95       	reti

00002b30 <Timer1_init>:
 * 2. Set the required mode (normal or CTC).
 * 3. Enable Timer Module interrupt
 * 4. Initialize Timer1 Registers
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <Timer1_init+0x6>
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	/* Set timer1 initial count to the configured value */
		TCNT1 = Config_Ptr->initial_value;
    2b3e:	ac e4       	ldi	r26, 0x4C	; 76
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e9 81       	ldd	r30, Y+1	; 0x01
    2b44:	fa 81       	ldd	r31, Y+2	; 0x02
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	11 96       	adiw	r26, 0x01	; 1
    2b4c:	9c 93       	st	X, r25
    2b4e:	8e 93       	st	-X, r24

		/* Set the Compare value to configured compare value */
		OCR1A = Config_Ptr->compare_value;
    2b50:	aa e4       	ldi	r26, 0x4A	; 74
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e9 81       	ldd	r30, Y+1	; 0x01
    2b56:	fa 81       	ldd	r31, Y+2	; 0x02
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	11 96       	adiw	r26, 0x01	; 1
    2b5e:	9c 93       	st	X, r25
    2b60:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2b62:	ef e4       	ldi	r30, 0x4F	; 79
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	8c e0       	ldi	r24, 0x0C	; 12
    2b68:	80 83       	st	Z, r24

		/*Set overflow or CTC Mode*/
		TCCR1B = (TCCR1B & 0xF7) | (Config_Ptr->mode << 3);
    2b6a:	ae e4       	ldi	r26, 0x4E	; 78
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	ee e4       	ldi	r30, 0x4E	; 78
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	28 2f       	mov	r18, r24
    2b76:	27 7f       	andi	r18, 0xF7	; 247
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	85 81       	ldd	r24, Z+5	; 0x05
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	82 2b       	or	r24, r18
    2b90:	8c 93       	st	X, r24

		/*Set the Timer1 Prescaler*/
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07);
    2b92:	ae e4       	ldi	r26, 0x4E	; 78
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ee e4       	ldi	r30, 0x4E	; 78
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	98 2f       	mov	r25, r24
    2b9e:	98 7f       	andi	r25, 0xF8	; 248
    2ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba4:	84 81       	ldd	r24, Z+4	; 0x04
    2ba6:	87 70       	andi	r24, 0x07	; 7
    2ba8:	89 2b       	or	r24, r25
    2baa:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
    2bac:	e9 81       	ldd	r30, Y+1	; 0x01
    2bae:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb0:	85 81       	ldd	r24, Z+5	; 0x05
    2bb2:	88 23       	and	r24, r24
    2bb4:	41 f4       	brne	.+16     	; 0x2bc6 <Timer1_init+0x96>
		{
			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1<<TOIE1);
    2bb6:	a9 e5       	ldi	r26, 0x59	; 89
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e9 e5       	ldi	r30, 0x59	; 89
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	84 60       	ori	r24, 0x04	; 4
    2bc2:	8c 93       	st	X, r24
    2bc4:	07 c0       	rjmp	.+14     	; 0x2bd4 <Timer1_init+0xa4>
		}
		else
		{
			/* Enable Timer1 Compare A Interrupt */
			TIMSK |= (1<<OCIE1A);
    2bc6:	a9 e5       	ldi	r26, 0x59	; 89
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e9 e5       	ldi	r30, 0x59	; 89
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 61       	ori	r24, 0x10	; 16
    2bd2:	8c 93       	st	X, r24
		}
}
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <Timer1_deInit>:
/*
 * Description :
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2be6:	ef e4       	ldi	r30, 0x4F	; 79
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	10 82       	st	Z, r1
	TCCR1B = 0;
    2bec:	ee e4       	ldi	r30, 0x4E	; 78
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	10 82       	st	Z, r1
	TCNT1 = 0;
    2bf2:	ec e4       	ldi	r30, 0x4C	; 76
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	11 82       	std	Z+1, r1	; 0x01
    2bf8:	10 82       	st	Z, r1
	ICR1 = 0;
    2bfa:	e6 e4       	ldi	r30, 0x46	; 70
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	11 82       	std	Z+1, r1	; 0x01
    2c00:	10 82       	st	Z, r1
}
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <Timer1_setCallBack>:
/*
 *  Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <Timer1_setCallBack+0x6>
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	90 93 6a 01 	sts	0x016A, r25
    2c1e:	80 93 69 01 	sts	0x0169, r24
}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <UART_init+0x6>
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <UART_init+0x8>
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <UART_init+0xa>
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	6b 83       	std	Y+3, r22	; 0x03
    2c3c:	7c 83       	std	Y+4, r23	; 0x04
    2c3e:	8d 83       	std	Y+5, r24	; 0x05
    2c40:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2c42:	1a 82       	std	Y+2, r1	; 0x02
    2c44:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c46:	eb e2       	ldi	r30, 0x2B	; 43
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c4e:	ea e2       	ldi	r30, 0x2A	; 42
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	88 e1       	ldi	r24, 0x18	; 24
    2c54:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2c56:	e0 e4       	ldi	r30, 0x40	; 64
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	86 e8       	ldi	r24, 0x86	; 134
    2c5c:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	9c 81       	ldd	r25, Y+4	; 0x04
    2c62:	ad 81       	ldd	r26, Y+5	; 0x05
    2c64:	be 81       	ldd	r27, Y+6	; 0x06
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	aa 1f       	adc	r26, r26
    2c6c:	bb 1f       	adc	r27, r27
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	aa 1f       	adc	r26, r26
    2c74:	bb 1f       	adc	r27, r27
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	aa 1f       	adc	r26, r26
    2c7c:	bb 1f       	adc	r27, r27
    2c7e:	9c 01       	movw	r18, r24
    2c80:	ad 01       	movw	r20, r26
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	92 e1       	ldi	r25, 0x12	; 18
    2c86:	aa e7       	ldi	r26, 0x7A	; 122
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    2c92:	da 01       	movw	r26, r20
    2c94:	c9 01       	movw	r24, r18
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c9c:	e0 e4       	ldi	r30, 0x40	; 64
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca4:	89 2f       	mov	r24, r25
    2ca6:	99 27       	eor	r25, r25
    2ca8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2caa:	e9 e2       	ldi	r30, 0x29	; 41
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	80 83       	st	Z, r24
}
    2cb2:	26 96       	adiw	r28, 0x06	; 6
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	0f 92       	push	r0
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2cd0:	eb e2       	ldi	r30, 0x2B	; 43
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	80 72       	andi	r24, 0x20	; 32
    2cdc:	90 70       	andi	r25, 0x00	; 0
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	b9 f3       	breq	.-18     	; 0x2cd0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2ce2:	ec e2       	ldi	r30, 0x2C	; 44
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2cea:	0f 90       	pop	r0
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cfa:	eb e2       	ldi	r30, 0x2B	; 43
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	88 23       	and	r24, r24
    2d02:	dc f7       	brge	.-10     	; 0x2cfa <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2d04:	ec e2       	ldi	r30, 0x2C	; 44
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
}
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <UART_sendString+0x6>
    2d16:	0f 92       	push	r0
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	9b 83       	std	Y+3, r25	; 0x03
    2d1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d20:	19 82       	std	Y+1, r1	; 0x01
    2d22:	0e c0       	rjmp	.+28     	; 0x2d40 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2e:	fc 01       	movw	r30, r24
    2d30:	e2 0f       	add	r30, r18
    2d32:	f3 1f       	adc	r31, r19
    2d34:	80 81       	ld	r24, Z
    2d36:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_sendByte>
		i++;
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	8f 5f       	subi	r24, 0xFF	; 255
    2d3e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	e2 0f       	add	r30, r18
    2d4e:	f3 1f       	adc	r31, r19
    2d50:	80 81       	ld	r24, Z
    2d52:	88 23       	and	r24, r24
    2d54:	39 f7       	brne	.-50     	; 0x2d24 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d62:	0f 93       	push	r16
    2d64:	1f 93       	push	r17
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <UART_receiveString+0xa>
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d76:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	9b 81       	ldd	r25, Y+3	; 0x03
    2d82:	8c 01       	movw	r16, r24
    2d84:	02 0f       	add	r16, r18
    2d86:	13 1f       	adc	r17, r19
    2d88:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	80 83       	st	Z, r24
    2d90:	0f c0       	rjmp	.+30     	; 0x2db0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	8f 5f       	subi	r24, 0xFF	; 255
    2d96:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	9b 81       	ldd	r25, Y+3	; 0x03
    2da2:	8c 01       	movw	r16, r24
    2da4:	02 0f       	add	r16, r18
    2da6:	13 1f       	adc	r17, r19
    2da8:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <UART_recieveByte>
    2dac:	f8 01       	movw	r30, r16
    2dae:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dba:	fc 01       	movw	r30, r24
    2dbc:	e2 0f       	add	r30, r18
    2dbe:	f3 1f       	adc	r31, r19
    2dc0:	80 81       	ld	r24, Z
    2dc2:	83 32       	cpi	r24, 0x23	; 35
    2dc4:	31 f7       	brne	.-52     	; 0x2d92 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	28 2f       	mov	r18, r24
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e2 0f       	add	r30, r18
    2dd4:	f3 1f       	adc	r31, r19
    2dd6:	10 82       	st	Z, r1
}
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	1f 91       	pop	r17
    2de4:	0f 91       	pop	r16
    2de6:	08 95       	ret

00002de8 <__mulsi3>:
    2de8:	62 9f       	mul	r22, r18
    2dea:	d0 01       	movw	r26, r0
    2dec:	73 9f       	mul	r23, r19
    2dee:	f0 01       	movw	r30, r0
    2df0:	82 9f       	mul	r24, r18
    2df2:	e0 0d       	add	r30, r0
    2df4:	f1 1d       	adc	r31, r1
    2df6:	64 9f       	mul	r22, r20
    2df8:	e0 0d       	add	r30, r0
    2dfa:	f1 1d       	adc	r31, r1
    2dfc:	92 9f       	mul	r25, r18
    2dfe:	f0 0d       	add	r31, r0
    2e00:	83 9f       	mul	r24, r19
    2e02:	f0 0d       	add	r31, r0
    2e04:	74 9f       	mul	r23, r20
    2e06:	f0 0d       	add	r31, r0
    2e08:	65 9f       	mul	r22, r21
    2e0a:	f0 0d       	add	r31, r0
    2e0c:	99 27       	eor	r25, r25
    2e0e:	72 9f       	mul	r23, r18
    2e10:	b0 0d       	add	r27, r0
    2e12:	e1 1d       	adc	r30, r1
    2e14:	f9 1f       	adc	r31, r25
    2e16:	63 9f       	mul	r22, r19
    2e18:	b0 0d       	add	r27, r0
    2e1a:	e1 1d       	adc	r30, r1
    2e1c:	f9 1f       	adc	r31, r25
    2e1e:	bd 01       	movw	r22, r26
    2e20:	cf 01       	movw	r24, r30
    2e22:	11 24       	eor	r1, r1
    2e24:	08 95       	ret

00002e26 <__udivmodsi4>:
    2e26:	a1 e2       	ldi	r26, 0x21	; 33
    2e28:	1a 2e       	mov	r1, r26
    2e2a:	aa 1b       	sub	r26, r26
    2e2c:	bb 1b       	sub	r27, r27
    2e2e:	fd 01       	movw	r30, r26
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <__udivmodsi4_ep>

00002e32 <__udivmodsi4_loop>:
    2e32:	aa 1f       	adc	r26, r26
    2e34:	bb 1f       	adc	r27, r27
    2e36:	ee 1f       	adc	r30, r30
    2e38:	ff 1f       	adc	r31, r31
    2e3a:	a2 17       	cp	r26, r18
    2e3c:	b3 07       	cpc	r27, r19
    2e3e:	e4 07       	cpc	r30, r20
    2e40:	f5 07       	cpc	r31, r21
    2e42:	20 f0       	brcs	.+8      	; 0x2e4c <__udivmodsi4_ep>
    2e44:	a2 1b       	sub	r26, r18
    2e46:	b3 0b       	sbc	r27, r19
    2e48:	e4 0b       	sbc	r30, r20
    2e4a:	f5 0b       	sbc	r31, r21

00002e4c <__udivmodsi4_ep>:
    2e4c:	66 1f       	adc	r22, r22
    2e4e:	77 1f       	adc	r23, r23
    2e50:	88 1f       	adc	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	1a 94       	dec	r1
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <__udivmodsi4_loop>
    2e58:	60 95       	com	r22
    2e5a:	70 95       	com	r23
    2e5c:	80 95       	com	r24
    2e5e:	90 95       	com	r25
    2e60:	9b 01       	movw	r18, r22
    2e62:	ac 01       	movw	r20, r24
    2e64:	bd 01       	movw	r22, r26
    2e66:	cf 01       	movw	r24, r30
    2e68:	08 95       	ret

00002e6a <__prologue_saves__>:
    2e6a:	2f 92       	push	r2
    2e6c:	3f 92       	push	r3
    2e6e:	4f 92       	push	r4
    2e70:	5f 92       	push	r5
    2e72:	6f 92       	push	r6
    2e74:	7f 92       	push	r7
    2e76:	8f 92       	push	r8
    2e78:	9f 92       	push	r9
    2e7a:	af 92       	push	r10
    2e7c:	bf 92       	push	r11
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	ca 1b       	sub	r28, r26
    2e94:	db 0b       	sbc	r29, r27
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	09 94       	ijmp

00002ea2 <__epilogue_restores__>:
    2ea2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ea4:	39 88       	ldd	r3, Y+17	; 0x11
    2ea6:	48 88       	ldd	r4, Y+16	; 0x10
    2ea8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eaa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eac:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eae:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eb4:	b9 84       	ldd	r11, Y+9	; 0x09
    2eb6:	c8 84       	ldd	r12, Y+8	; 0x08
    2eb8:	df 80       	ldd	r13, Y+7	; 0x07
    2eba:	ee 80       	ldd	r14, Y+6	; 0x06
    2ebc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ebe:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ec2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ec4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ec6:	ce 0f       	add	r28, r30
    2ec8:	d1 1d       	adc	r29, r1
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	ed 01       	movw	r28, r26
    2ed6:	08 95       	ret

00002ed8 <_exit>:
    2ed8:	f8 94       	cli

00002eda <__stop_program>:
    2eda:	ff cf       	rjmp	.-2      	; 0x2eda <__stop_program>
