
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000324  00800060  00006270  00006304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800384  00800384  00006628  2**0
                  ALLOC
  3 .stab         0000501c  00000000  00000000  00006628  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ab  00000000  00000000  0000b644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000caef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  0000cc6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000258f  00000000  00000000  0000ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011c4  00000000  00000000  0000f3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d8  00000000  00000000  00010592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0001166c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000336  00000000  00000000  0001180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173a  00000000  00000000  00011b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0001327c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9d 2d 	jmp	0x5b3a	; 0x5b3a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 0c 	call	0x192e	; 0x192e <main>
      8a:	0c 94 36 31 	jmp	0x626c	; 0x626c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
     1bc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 ba 30 	jmp	0x6174	; 0x6174 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	82 58       	subi	r24, 0x82	; 130
     2e6:	9d 4f       	sbci	r25, 0xFD	; 253
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	82 58       	subi	r24, 0x82	; 130
     582:	9d 4f       	sbci	r25, 0xFD	; 253
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	82 58       	subi	r24, 0x82	; 130
     a48:	9d 4f       	sbci	r25, 0xFD	; 253
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 9b 30 	call	0x6136	; 0x6136 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <__epilogue_restores__>

00000ed2 <_fpadd_parts>:
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 ba 30 	jmp	0x6174	; 0x6174 <__prologue_saves__>
     ede:	dc 01       	movw	r26, r24
     ee0:	2b 01       	movw	r4, r22
     ee2:	fa 01       	movw	r30, r20
     ee4:	9c 91       	ld	r25, X
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_fpadd_parts+0x1a>
     eea:	39 c1       	rjmp	.+626    	; 0x115e <_fpadd_parts+0x28c>
     eec:	eb 01       	movw	r28, r22
     eee:	88 81       	ld	r24, Y
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_fpadd_parts+0x24>
     ef4:	33 c1       	rjmp	.+614    	; 0x115c <_fpadd_parts+0x28a>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	69 f4       	brne	.+26     	; 0xf14 <_fpadd_parts+0x42>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <_fpadd_parts+0x2e>
     efe:	2f c1       	rjmp	.+606    	; 0x115e <_fpadd_parts+0x28c>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_fpadd_parts+0x3c>
     f0c:	28 c1       	rjmp	.+592    	; 0x115e <_fpadd_parts+0x28c>
     f0e:	a6 e7       	ldi	r26, 0x76	; 118
     f10:	b2 e0       	ldi	r27, 0x02	; 2
     f12:	25 c1       	rjmp	.+586    	; 0x115e <_fpadd_parts+0x28c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	09 f4       	brne	.+2      	; 0xf1a <_fpadd_parts+0x48>
     f18:	21 c1       	rjmp	.+578    	; 0x115c <_fpadd_parts+0x28a>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <_fpadd_parts+0x76>
     f1e:	92 30       	cpi	r25, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x52>
     f22:	1d c1       	rjmp	.+570    	; 0x115e <_fpadd_parts+0x28c>
     f24:	9a 01       	movw	r18, r20
     f26:	ad 01       	movw	r20, r26
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	ea 01       	movw	r28, r20
     f2c:	09 90       	ld	r0, Y+
     f2e:	ae 01       	movw	r20, r28
     f30:	e9 01       	movw	r28, r18
     f32:	09 92       	st	Y+, r0
     f34:	9e 01       	movw	r18, r28
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	c1 f7       	brne	.-16     	; 0xf2a <_fpadd_parts+0x58>
     f3a:	e2 01       	movw	r28, r4
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	9c 91       	ld	r25, X
     f42:	89 23       	and	r24, r25
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 c1       	rjmp	.+528    	; 0x1158 <_fpadd_parts+0x286>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_fpadd_parts+0x7c>
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <_fpadd_parts+0x28a>
     f4e:	12 96       	adiw	r26, 0x02	; 2
     f50:	2d 90       	ld	r2, X+
     f52:	3c 90       	ld	r3, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	eb 01       	movw	r28, r22
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	ad 90       	ld	r10, X+
     f60:	bd 90       	ld	r11, X+
     f62:	cd 90       	ld	r12, X+
     f64:	dc 90       	ld	r13, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	ec 80       	ldd	r14, Y+4	; 0x04
     f6a:	fd 80       	ldd	r15, Y+5	; 0x05
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	91 01       	movw	r18, r2
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	37 ff       	sbrs	r19, 7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <_fpadd_parts+0xb2>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	60 32       	cpi	r22, 0x20	; 32
     f86:	71 05       	cpc	r23, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <_fpadd_parts+0xba>
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <_fpadd_parts+0x17c>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	6c f5       	brge	.+90     	; 0xfec <_fpadd_parts+0x11a>
     f92:	37 01       	movw	r6, r14
     f94:	48 01       	movw	r8, r16
     f96:	06 2e       	mov	r0, r22
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_fpadd_parts+0xd0>
     f9a:	96 94       	lsr	r9
     f9c:	87 94       	ror	r8
     f9e:	77 94       	ror	r7
     fa0:	67 94       	ror	r6
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <_fpadd_parts+0xc8>
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_fpadd_parts+0xe6>
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	44 1f       	adc	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	6a 95       	dec	r22
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <_fpadd_parts+0xde>
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	40 40       	sbci	r20, 0x00	; 0
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	2e 21       	and	r18, r14
     fc6:	3f 21       	and	r19, r15
     fc8:	40 23       	and	r20, r16
     fca:	51 23       	and	r21, r17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <_fpadd_parts+0x10c>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	79 01       	movw	r14, r18
     fe0:	8a 01       	movw	r16, r20
     fe2:	e6 28       	or	r14, r6
     fe4:	f7 28       	or	r15, r7
     fe6:	08 29       	or	r16, r8
     fe8:	19 29       	or	r17, r9
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <_fpadd_parts+0x192>
     fec:	23 2b       	or	r18, r19
     fee:	d1 f1       	breq	.+116    	; 0x1064 <_fpadd_parts+0x192>
     ff0:	26 0e       	add	r2, r22
     ff2:	37 1e       	adc	r3, r23
     ff4:	35 01       	movw	r6, r10
     ff6:	46 01       	movw	r8, r12
     ff8:	06 2e       	mov	r0, r22
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_fpadd_parts+0x132>
     ffc:	96 94       	lsr	r9
     ffe:	87 94       	ror	r8
    1000:	77 94       	ror	r7
    1002:	67 94       	ror	r6
    1004:	0a 94       	dec	r0
    1006:	d2 f7       	brpl	.-12     	; 0xffc <_fpadd_parts+0x12a>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <_fpadd_parts+0x148>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	d2 f7       	brpl	.-12     	; 0x1012 <_fpadd_parts+0x140>
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	2a 21       	and	r18, r10
    1028:	3b 21       	and	r19, r11
    102a:	4c 21       	and	r20, r12
    102c:	5d 21       	and	r21, r13
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 05       	cpc	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	21 f0       	breq	.+8      	; 0x1040 <_fpadd_parts+0x16e>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	59 01       	movw	r10, r18
    1042:	6a 01       	movw	r12, r20
    1044:	a6 28       	or	r10, r6
    1046:	b7 28       	or	r11, r7
    1048:	c8 28       	or	r12, r8
    104a:	d9 28       	or	r13, r9
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <_fpadd_parts+0x192>
    104e:	82 15       	cp	r24, r2
    1050:	93 05       	cpc	r25, r3
    1052:	2c f0       	brlt	.+10     	; 0x105e <_fpadd_parts+0x18c>
    1054:	1c 01       	movw	r2, r24
    1056:	aa 24       	eor	r10, r10
    1058:	bb 24       	eor	r11, r11
    105a:	65 01       	movw	r12, r10
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_fpadd_parts+0x192>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 91       	ld	r25, X
    1068:	d2 01       	movw	r26, r4
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	8c 91       	ld	r24, X
    106e:	98 17       	cp	r25, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <_fpadd_parts+0x1a2>
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <_fpadd_parts+0x22c>
    1074:	99 23       	and	r25, r25
    1076:	39 f0       	breq	.+14     	; 0x1086 <_fpadd_parts+0x1b4>
    1078:	a8 01       	movw	r20, r16
    107a:	97 01       	movw	r18, r14
    107c:	2a 19       	sub	r18, r10
    107e:	3b 09       	sbc	r19, r11
    1080:	4c 09       	sbc	r20, r12
    1082:	5d 09       	sbc	r21, r13
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <_fpadd_parts+0x1c0>
    1086:	a6 01       	movw	r20, r12
    1088:	95 01       	movw	r18, r10
    108a:	2e 19       	sub	r18, r14
    108c:	3f 09       	sbc	r19, r15
    108e:	40 0b       	sbc	r20, r16
    1090:	51 0b       	sbc	r21, r17
    1092:	57 fd       	sbrc	r21, 7
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <_fpadd_parts+0x1d4>
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	33 82       	std	Z+3, r3	; 0x03
    109a:	22 82       	std	Z+2, r2	; 0x02
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
    10a0:	46 83       	std	Z+6, r20	; 0x06
    10a2:	57 83       	std	Z+7, r21	; 0x07
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <_fpadd_parts+0x20e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
    10aa:	33 82       	std	Z+3, r3	; 0x03
    10ac:	22 82       	std	Z+2, r2	; 0x02
    10ae:	88 27       	eor	r24, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	dc 01       	movw	r26, r24
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	84 83       	std	Z+4, r24	; 0x04
    10be:	95 83       	std	Z+5, r25	; 0x05
    10c0:	a6 83       	std	Z+6, r26	; 0x06
    10c2:	b7 83       	std	Z+7, r27	; 0x07
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <_fpadd_parts+0x20e>
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	46 83       	std	Z+6, r20	; 0x06
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	24 81       	ldd	r18, Z+4	; 0x04
    10e2:	35 81       	ldd	r19, Z+5	; 0x05
    10e4:	46 81       	ldd	r20, Z+6	; 0x06
    10e6:	57 81       	ldd	r21, Z+7	; 0x07
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	af 4f       	sbci	r26, 0xFF	; 255
    10f8:	bf 43       	sbci	r27, 0x3F	; 63
    10fa:	28 f3       	brcs	.-54     	; 0x10c6 <_fpadd_parts+0x1f4>
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <_fpadd_parts+0x242>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	33 82       	std	Z+3, r3	; 0x03
    1102:	22 82       	std	Z+2, r2	; 0x02
    1104:	ea 0c       	add	r14, r10
    1106:	fb 1c       	adc	r15, r11
    1108:	0c 1d       	adc	r16, r12
    110a:	1d 1d       	adc	r17, r13
    110c:	e4 82       	std	Z+4, r14	; 0x04
    110e:	f5 82       	std	Z+5, r15	; 0x05
    1110:	06 83       	std	Z+6, r16	; 0x06
    1112:	17 83       	std	Z+7, r17	; 0x07
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	80 83       	st	Z, r24
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	57 ff       	sbrs	r21, 7
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_fpadd_parts+0x286>
    1124:	c9 01       	movw	r24, r18
    1126:	aa 27       	eor	r26, r26
    1128:	97 fd       	sbrc	r25, 7
    112a:	a0 95       	com	r26
    112c:	ba 2f       	mov	r27, r26
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	a0 70       	andi	r26, 0x00	; 0
    1134:	b0 70       	andi	r27, 0x00	; 0
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	82 2b       	or	r24, r18
    1140:	93 2b       	or	r25, r19
    1142:	a4 2b       	or	r26, r20
    1144:	b5 2b       	or	r27, r21
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	df 01       	movw	r26, r30
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_fpadd_parts+0x28c>
    115c:	d2 01       	movw	r26, r4
    115e:	cd 01       	movw	r24, r26
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	e2 e1       	ldi	r30, 0x12	; 18
    1166:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <__epilogue_restores__>

0000116a <__subsf3>:
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__prologue_saves__+0x18>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	4f 83       	std	Y+7, r20	; 0x07
    1184:	58 87       	std	Y+8, r21	; 0x08
    1186:	e9 e0       	ldi	r30, 0x09	; 9
    1188:	ee 2e       	mov	r14, r30
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5e       	subi	r16, 0xEF	; 239
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	b8 01       	movw	r22, r16
    11a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11aa:	8a 89       	ldd	r24, Y+18	; 0x12
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 27       	eor	r24, r25
    11b0:	8a 8b       	std	Y+18, r24	; 0x12
    11b2:	c7 01       	movw	r24, r14
    11b4:	b8 01       	movw	r22, r16
    11b6:	ae 01       	movw	r20, r28
    11b8:	47 5e       	subi	r20, 0xE7	; 231
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    11c0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    11c4:	a0 96       	adiw	r28, 0x20	; 32
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <__epilogue_restores__+0x18>

000011cc <__addsf3>:
    11cc:	a0 e2       	ldi	r26, 0x20	; 32
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__prologue_saves__+0x18>
    11d8:	69 83       	std	Y+1, r22	; 0x01
    11da:	7a 83       	std	Y+2, r23	; 0x02
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	3e 83       	std	Y+6, r19	; 0x06
    11e4:	4f 83       	std	Y+7, r20	; 0x07
    11e6:	58 87       	std	Y+8, r21	; 0x08
    11e8:	f9 e0       	ldi	r31, 0x09	; 9
    11ea:	ef 2e       	mov	r14, r31
    11ec:	f1 2c       	mov	r15, r1
    11ee:	ec 0e       	add	r14, r28
    11f0:	fd 1e       	adc	r15, r29
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5e       	subi	r16, 0xEF	; 239
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	05 96       	adiw	r24, 0x05	; 5
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    120c:	c7 01       	movw	r24, r14
    120e:	b8 01       	movw	r22, r16
    1210:	ae 01       	movw	r20, r28
    1212:	47 5e       	subi	r20, 0xE7	; 231
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    121a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    121e:	a0 96       	adiw	r28, 0x20	; 32
    1220:	e6 e0       	ldi	r30, 0x06	; 6
    1222:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <__epilogue_restores__+0x18>

00001226 <__mulsf3>:
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 ba 30 	jmp	0x6174	; 0x6174 <__prologue_saves__>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	4f 83       	std	Y+7, r20	; 0x07
    1240:	58 87       	std	Y+8, r21	; 0x08
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	67 5f       	subi	r22, 0xF7	; 247
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	be 01       	movw	r22, r28
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__mulsf3+0x60>
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	c8 f0       	brcs	.+50     	; 0x129c <__mulsf3+0x76>
    126a:	94 30       	cpi	r25, 0x04	; 4
    126c:	19 f4       	brne	.+6      	; 0x1274 <__mulsf3+0x4e>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f4       	brne	.+20     	; 0x1286 <__mulsf3+0x60>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__mulsf3+0x56>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	29 f4       	brne	.+10     	; 0x1282 <__mulsf3+0x5c>
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	81 f4       	brne	.+32     	; 0x129c <__mulsf3+0x76>
    127c:	86 e7       	ldi	r24, 0x76	; 118
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	c6 c0       	rjmp	.+396    	; 0x140e <__mulsf3+0x1e8>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	49 f4       	brne	.+18     	; 0x1298 <__mulsf3+0x72>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	98 13       	cpse	r25, r24
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	2a 87       	std	Y+10, r18	; 0x0a
    1292:	ce 01       	movw	r24, r28
    1294:	09 96       	adiw	r24, 0x09	; 9
    1296:	bb c0       	rjmp	.+374    	; 0x140e <__mulsf3+0x1e8>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	49 f4       	brne	.+18     	; 0x12ae <__mulsf3+0x88>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	98 13       	cpse	r25, r24
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	2a 8b       	std	Y+18, r18	; 0x12
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__mulsf3+0x1e8>
    12ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    12b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    12b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    12b4:	58 88       	ldd	r5, Y+16	; 0x10
    12b6:	6d 88       	ldd	r6, Y+21	; 0x15
    12b8:	7e 88       	ldd	r7, Y+22	; 0x16
    12ba:	8f 88       	ldd	r8, Y+23	; 0x17
    12bc:	98 8c       	ldd	r9, Y+24	; 0x18
    12be:	ee 24       	eor	r14, r14
    12c0:	ff 24       	eor	r15, r15
    12c2:	87 01       	movw	r16, r14
    12c4:	aa 24       	eor	r10, r10
    12c6:	bb 24       	eor	r11, r11
    12c8:	65 01       	movw	r12, r10
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	c1 01       	movw	r24, r2
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	e9 f0       	breq	.+58     	; 0x131a <__mulsf3+0xf4>
    12e0:	e6 0c       	add	r14, r6
    12e2:	f7 1c       	adc	r15, r7
    12e4:	08 1d       	adc	r16, r8
    12e6:	19 1d       	adc	r17, r9
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	2a 0d       	add	r18, r10
    12ee:	3b 1d       	adc	r19, r11
    12f0:	4c 1d       	adc	r20, r12
    12f2:	5d 1d       	adc	r21, r13
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 14       	cp	r14, r6
    12fe:	f7 04       	cpc	r15, r7
    1300:	08 05       	cpc	r16, r8
    1302:	19 05       	cpc	r17, r9
    1304:	20 f4       	brcc	.+8      	; 0x130e <__mulsf3+0xe8>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	a9 01       	movw	r20, r18
    1312:	48 0f       	add	r20, r24
    1314:	59 1f       	adc	r21, r25
    1316:	6a 1f       	adc	r22, r26
    1318:	7b 1f       	adc	r23, r27
    131a:	aa 0c       	add	r10, r10
    131c:	bb 1c       	adc	r11, r11
    131e:	cc 1c       	adc	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	97 fe       	sbrs	r9, 7
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__mulsf3+0x110>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	a8 2a       	or	r10, r24
    1330:	b9 2a       	or	r11, r25
    1332:	ca 2a       	or	r12, r26
    1334:	db 2a       	or	r13, r27
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	e0 32       	cpi	r30, 0x20	; 32
    133a:	f1 05       	cpc	r31, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <__mulsf3+0x12a>
    133e:	66 0c       	add	r6, r6
    1340:	77 1c       	adc	r7, r7
    1342:	88 1c       	adc	r8, r8
    1344:	99 1c       	adc	r9, r9
    1346:	56 94       	lsr	r5
    1348:	47 94       	ror	r4
    134a:	37 94       	ror	r3
    134c:	27 94       	ror	r2
    134e:	c3 cf       	rjmp	.-122    	; 0x12d6 <__mulsf3+0xb0>
    1350:	fa 85       	ldd	r31, Y+10	; 0x0a
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	3c 89       	ldd	r19, Y+20	; 0x14
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <__mulsf3+0x16e>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	89 2b       	or	r24, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__mulsf3+0x162>
    1370:	16 95       	lsr	r17
    1372:	07 95       	ror	r16
    1374:	f7 94       	ror	r15
    1376:	e7 94       	ror	r14
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e8       	ldi	r27, 0x80	; 128
    1380:	e8 2a       	or	r14, r24
    1382:	f9 2a       	or	r15, r25
    1384:	0a 2b       	or	r16, r26
    1386:	1b 2b       	or	r17, r27
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	77 fd       	sbrc	r23, 7
    1396:	e7 cf       	rjmp	.-50     	; 0x1366 <__mulsf3+0x140>
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <__mulsf3+0x18c>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	17 fd       	sbrc	r17, 7
    13a4:	41 60       	ori	r20, 0x01	; 1
    13a6:	ee 0c       	add	r14, r14
    13a8:	ff 1c       	adc	r15, r15
    13aa:	00 1f       	adc	r16, r16
    13ac:	11 1f       	adc	r17, r17
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	40 30       	cpi	r20, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	59 07       	cpc	r21, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	69 07       	cpc	r22, r25
    13bc:	90 e4       	ldi	r25, 0x40	; 64
    13be:	79 07       	cpc	r23, r25
    13c0:	60 f3       	brcs	.-40     	; 0x139a <__mulsf3+0x174>
    13c2:	2b 8f       	std	Y+27, r18	; 0x1b
    13c4:	3c 8f       	std	Y+28, r19	; 0x1c
    13c6:	db 01       	movw	r26, r22
    13c8:	ca 01       	movw	r24, r20
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	a0 70       	andi	r26, 0x00	; 0
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	91 05       	cpc	r25, r1
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <__mulsf3+0x1ce>
    13dc:	47 fd       	sbrc	r20, 7
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__mulsf3+0x1ce>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	01 05       	cpc	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__mulsf3+0x1ce>
    13ea:	40 5c       	subi	r20, 0xC0	; 192
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	40 78       	andi	r20, 0x80	; 128
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	fe 17       	cp	r31, r30
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1d8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1400:	5e 8f       	std	Y+30, r21	; 0x1e
    1402:	6f 8f       	std	Y+31, r22	; 0x1f
    1404:	78 a3       	std	Y+32, r23	; 0x20
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	89 8f       	std	Y+25, r24	; 0x19
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e2 e1       	ldi	r30, 0x12	; 18
    1416:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <__epilogue_restores__>

0000141a <__gtsf2>:
    141a:	a8 e1       	ldi	r26, 0x18	; 24
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__prologue_saves__+0x18>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	e8 2e       	mov	r14, r24
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	40 f0       	brcs	.+16     	; 0x1470 <__gtsf2+0x56>
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__gtsf2+0x56>
    1466:	c7 01       	movw	r24, r14
    1468:	b8 01       	movw	r22, r16
    146a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <__gtsf2+0x58>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	68 96       	adiw	r28, 0x18	; 24
    1474:	e6 e0       	ldi	r30, 0x06	; 6
    1476:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <__epilogue_restores__+0x18>

0000147a <__gesf2>:
    147a:	a8 e1       	ldi	r26, 0x18	; 24
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e3 e4       	ldi	r30, 0x43	; 67
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__prologue_saves__+0x18>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	4f 83       	std	Y+7, r20	; 0x07
    1494:	58 87       	std	Y+8, r21	; 0x08
    1496:	89 e0       	ldi	r24, 0x09	; 9
    1498:	e8 2e       	mov	r14, r24
    149a:	f1 2c       	mov	r15, r1
    149c:	ec 0e       	add	r14, r28
    149e:	fd 1e       	adc	r15, r29
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	b7 01       	movw	r22, r14
    14a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5e       	subi	r16, 0xEF	; 239
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	05 96       	adiw	r24, 0x05	; 5
    14b4:	b8 01       	movw	r22, r16
    14b6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	40 f0       	brcs	.+16     	; 0x14d0 <__gesf2+0x56>
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <__gesf2+0x56>
    14c6:	c7 01       	movw	r24, r14
    14c8:	b8 01       	movw	r22, r16
    14ca:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <__gesf2+0x58>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	68 96       	adiw	r28, 0x18	; 24
    14d4:	e6 e0       	ldi	r30, 0x06	; 6
    14d6:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <__epilogue_restores__+0x18>

000014da <__ltsf2>:
    14da:	a8 e1       	ldi	r26, 0x18	; 24
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__prologue_saves__+0x18>
    14e6:	69 83       	std	Y+1, r22	; 0x01
    14e8:	7a 83       	std	Y+2, r23	; 0x02
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	3e 83       	std	Y+6, r19	; 0x06
    14f2:	4f 83       	std	Y+7, r20	; 0x07
    14f4:	58 87       	std	Y+8, r21	; 0x08
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	e8 2e       	mov	r14, r24
    14fa:	f1 2c       	mov	r15, r1
    14fc:	ec 0e       	add	r14, r28
    14fe:	fd 1e       	adc	r15, r29
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    150a:	8e 01       	movw	r16, r28
    150c:	0f 5e       	subi	r16, 0xEF	; 239
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	b8 01       	movw	r22, r16
    1516:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	40 f0       	brcs	.+16     	; 0x1530 <__ltsf2+0x56>
    1520:	89 89       	ldd	r24, Y+17	; 0x11
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	28 f0       	brcs	.+10     	; 0x1530 <__ltsf2+0x56>
    1526:	c7 01       	movw	r24, r14
    1528:	b8 01       	movw	r22, r16
    152a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <__ltsf2+0x58>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	68 96       	adiw	r28, 0x18	; 24
    1534:	e6 e0       	ldi	r30, 0x06	; 6
    1536:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <__epilogue_restores__+0x18>

0000153a <__fixsfsi>:
    153a:	ac e0       	ldi	r26, 0x0C	; 12
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 ea       	ldi	r30, 0xA3	; 163
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	0c 94 ca 30 	jmp	0x6194	; 0x6194 <__prologue_saves__+0x20>
    1546:	69 83       	std	Y+1, r22	; 0x01
    1548:	7a 83       	std	Y+2, r23	; 0x02
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	be 01       	movw	r22, r28
    1554:	6b 5f       	subi	r22, 0xFB	; 251
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	61 f1       	breq	.+88     	; 0x15ba <__fixsfsi+0x80>
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	50 f1       	brcs	.+84     	; 0x15ba <__fixsfsi+0x80>
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	21 f4       	brne	.+8      	; 0x1572 <__fixsfsi+0x38>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	88 23       	and	r24, r24
    156e:	51 f1       	breq	.+84     	; 0x15c4 <__fixsfsi+0x8a>
    1570:	2e c0       	rjmp	.+92     	; 0x15ce <__fixsfsi+0x94>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	37 fd       	sbrc	r19, 7
    1578:	20 c0       	rjmp	.+64     	; 0x15ba <__fixsfsi+0x80>
    157a:	6e 81       	ldd	r22, Y+6	; 0x06
    157c:	2f 31       	cpi	r18, 0x1F	; 31
    157e:	31 05       	cpc	r19, r1
    1580:	1c f0       	brlt	.+6      	; 0x1588 <__fixsfsi+0x4e>
    1582:	66 23       	and	r22, r22
    1584:	f9 f0       	breq	.+62     	; 0x15c4 <__fixsfsi+0x8a>
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <__fixsfsi+0x94>
    1588:	8e e1       	ldi	r24, 0x1E	; 30
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	29 85       	ldd	r18, Y+9	; 0x09
    1592:	3a 85       	ldd	r19, Y+10	; 0x0a
    1594:	4b 85       	ldd	r20, Y+11	; 0x0b
    1596:	5c 85       	ldd	r21, Y+12	; 0x0c
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__fixsfsi+0x68>
    159a:	56 95       	lsr	r21
    159c:	47 95       	ror	r20
    159e:	37 95       	ror	r19
    15a0:	27 95       	ror	r18
    15a2:	8a 95       	dec	r24
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <__fixsfsi+0x60>
    15a6:	66 23       	and	r22, r22
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <__fixsfsi+0x9c>
    15aa:	50 95       	com	r21
    15ac:	40 95       	com	r20
    15ae:	30 95       	com	r19
    15b0:	21 95       	neg	r18
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	4f 4f       	sbci	r20, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <__fixsfsi+0x9c>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__fixsfsi+0x9c>
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f ef       	ldi	r20, 0xFF	; 255
    15ca:	5f e7       	ldi	r21, 0x7F	; 127
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__fixsfsi+0x9c>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e8       	ldi	r21, 0x80	; 128
    15d6:	b9 01       	movw	r22, r18
    15d8:	ca 01       	movw	r24, r20
    15da:	2c 96       	adiw	r28, 0x0c	; 12
    15dc:	e2 e0       	ldi	r30, 0x02	; 2
    15de:	0c 94 e6 30 	jmp	0x61cc	; 0x61cc <__epilogue_restores__+0x20>

000015e2 <__pack_f>:
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	fc 01       	movw	r30, r24
    15ee:	e4 80       	ldd	r14, Z+4	; 0x04
    15f0:	f5 80       	ldd	r15, Z+5	; 0x05
    15f2:	06 81       	ldd	r16, Z+6	; 0x06
    15f4:	17 81       	ldd	r17, Z+7	; 0x07
    15f6:	d1 80       	ldd	r13, Z+1	; 0x01
    15f8:	80 81       	ld	r24, Z
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	48 f4       	brcc	.+18     	; 0x1610 <__pack_f+0x2e>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e1       	ldi	r26, 0x10	; 16
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 2a       	or	r14, r24
    1608:	f9 2a       	or	r15, r25
    160a:	0a 2b       	or	r16, r26
    160c:	1b 2b       	or	r17, r27
    160e:	a5 c0       	rjmp	.+330    	; 0x175a <__pack_f+0x178>
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	09 f4       	brne	.+2      	; 0x1616 <__pack_f+0x34>
    1614:	9f c0       	rjmp	.+318    	; 0x1754 <__pack_f+0x172>
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	21 f4       	brne	.+8      	; 0x1622 <__pack_f+0x40>
    161a:	ee 24       	eor	r14, r14
    161c:	ff 24       	eor	r15, r15
    161e:	87 01       	movw	r16, r14
    1620:	05 c0       	rjmp	.+10     	; 0x162c <__pack_f+0x4a>
    1622:	e1 14       	cp	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	01 05       	cpc	r16, r1
    1628:	11 05       	cpc	r17, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <__pack_f+0x50>
    162c:	e0 e0       	ldi	r30, 0x00	; 0
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	96 c0       	rjmp	.+300    	; 0x175e <__pack_f+0x17c>
    1632:	62 81       	ldd	r22, Z+2	; 0x02
    1634:	73 81       	ldd	r23, Z+3	; 0x03
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	62 38       	cpi	r22, 0x82	; 130
    163a:	79 07       	cpc	r23, r25
    163c:	0c f0       	brlt	.+2      	; 0x1640 <__pack_f+0x5e>
    163e:	5b c0       	rjmp	.+182    	; 0x16f6 <__pack_f+0x114>
    1640:	22 e8       	ldi	r18, 0x82	; 130
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	26 1b       	sub	r18, r22
    1646:	37 0b       	sbc	r19, r23
    1648:	2a 31       	cpi	r18, 0x1A	; 26
    164a:	31 05       	cpc	r19, r1
    164c:	2c f0       	brlt	.+10     	; 0x1658 <__pack_f+0x76>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	2a c0       	rjmp	.+84     	; 0x16ac <__pack_f+0xca>
    1658:	b8 01       	movw	r22, r16
    165a:	a7 01       	movw	r20, r14
    165c:	02 2e       	mov	r0, r18
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__pack_f+0x86>
    1660:	76 95       	lsr	r23
    1662:	67 95       	ror	r22
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__pack_f+0x7e>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__pack_f+0x9c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	2a 95       	dec	r18
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <__pack_f+0x94>
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	a1 09       	sbc	r26, r1
    1686:	b1 09       	sbc	r27, r1
    1688:	8e 21       	and	r24, r14
    168a:	9f 21       	and	r25, r15
    168c:	a0 23       	and	r26, r16
    168e:	b1 23       	and	r27, r17
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	21 f0       	breq	.+8      	; 0x16a0 <__pack_f+0xbe>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	9a 01       	movw	r18, r20
    16a2:	ab 01       	movw	r20, r22
    16a4:	28 2b       	or	r18, r24
    16a6:	39 2b       	or	r19, r25
    16a8:	4a 2b       	or	r20, r26
    16aa:	5b 2b       	or	r21, r27
    16ac:	da 01       	movw	r26, r20
    16ae:	c9 01       	movw	r24, r18
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	a0 70       	andi	r26, 0x00	; 0
    16b6:	b0 70       	andi	r27, 0x00	; 0
    16b8:	80 34       	cpi	r24, 0x40	; 64
    16ba:	91 05       	cpc	r25, r1
    16bc:	a1 05       	cpc	r26, r1
    16be:	b1 05       	cpc	r27, r1
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <__pack_f+0xee>
    16c2:	27 ff       	sbrs	r18, 7
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <__pack_f+0xf6>
    16c6:	20 5c       	subi	r18, 0xC0	; 192
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	4f 4f       	sbci	r20, 0xFF	; 255
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <__pack_f+0xf6>
    16d0:	21 5c       	subi	r18, 0xC1	; 193
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	20 30       	cpi	r18, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	3a 07       	cpc	r19, r26
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	4a 07       	cpc	r20, r26
    16e6:	a0 e4       	ldi	r26, 0x40	; 64
    16e8:	5a 07       	cpc	r21, r26
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__pack_f+0x10e>
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	79 01       	movw	r14, r18
    16f2:	8a 01       	movw	r16, r20
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <__pack_f+0x162>
    16f6:	60 38       	cpi	r22, 0x80	; 128
    16f8:	71 05       	cpc	r23, r1
    16fa:	64 f5       	brge	.+88     	; 0x1754 <__pack_f+0x172>
    16fc:	fb 01       	movw	r30, r22
    16fe:	e1 58       	subi	r30, 0x81	; 129
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	d8 01       	movw	r26, r16
    1704:	c7 01       	movw	r24, r14
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	a0 70       	andi	r26, 0x00	; 0
    170c:	b0 70       	andi	r27, 0x00	; 0
    170e:	80 34       	cpi	r24, 0x40	; 64
    1710:	91 05       	cpc	r25, r1
    1712:	a1 05       	cpc	r26, r1
    1714:	b1 05       	cpc	r27, r1
    1716:	39 f4       	brne	.+14     	; 0x1726 <__pack_f+0x144>
    1718:	e7 fe       	sbrs	r14, 7
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <__pack_f+0x154>
    171c:	80 e4       	ldi	r24, 0x40	; 64
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__pack_f+0x14c>
    1726:	8f e3       	ldi	r24, 0x3F	; 63
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 0e       	add	r14, r24
    1730:	f9 1e       	adc	r15, r25
    1732:	0a 1f       	adc	r16, r26
    1734:	1b 1f       	adc	r17, r27
    1736:	17 ff       	sbrs	r17, 7
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__pack_f+0x162>
    173a:	16 95       	lsr	r17
    173c:	07 95       	ror	r16
    173e:	f7 94       	ror	r15
    1740:	e7 94       	ror	r14
    1742:	31 96       	adiw	r30, 0x01	; 1
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	16 95       	lsr	r17
    1748:	07 95       	ror	r16
    174a:	f7 94       	ror	r15
    174c:	e7 94       	ror	r14
    174e:	8a 95       	dec	r24
    1750:	d1 f7       	brne	.-12     	; 0x1746 <__pack_f+0x164>
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__pack_f+0x17c>
    1754:	ee 24       	eor	r14, r14
    1756:	ff 24       	eor	r15, r15
    1758:	87 01       	movw	r16, r14
    175a:	ef ef       	ldi	r30, 0xFF	; 255
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	6e 2f       	mov	r22, r30
    1760:	67 95       	ror	r22
    1762:	66 27       	eor	r22, r22
    1764:	67 95       	ror	r22
    1766:	90 2f       	mov	r25, r16
    1768:	9f 77       	andi	r25, 0x7F	; 127
    176a:	d7 94       	ror	r13
    176c:	dd 24       	eor	r13, r13
    176e:	d7 94       	ror	r13
    1770:	8e 2f       	mov	r24, r30
    1772:	86 95       	lsr	r24
    1774:	49 2f       	mov	r20, r25
    1776:	46 2b       	or	r20, r22
    1778:	58 2f       	mov	r21, r24
    177a:	5d 29       	or	r21, r13
    177c:	b7 01       	movw	r22, r14
    177e:	ca 01       	movw	r24, r20
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	08 95       	ret

0000178c <__unpack_f>:
    178c:	fc 01       	movw	r30, r24
    178e:	db 01       	movw	r26, r22
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	22 81       	ldd	r18, Z+2	; 0x02
    1796:	62 2f       	mov	r22, r18
    1798:	6f 77       	andi	r22, 0x7F	; 127
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	22 1f       	adc	r18, r18
    179e:	22 27       	eor	r18, r18
    17a0:	22 1f       	adc	r18, r18
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	89 2f       	mov	r24, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	82 2b       	or	r24, r18
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	99 1f       	adc	r25, r25
    17b0:	99 27       	eor	r25, r25
    17b2:	99 1f       	adc	r25, r25
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	9c 93       	st	X, r25
    17b8:	11 97       	sbiw	r26, 0x01	; 1
    17ba:	21 15       	cp	r18, r1
    17bc:	31 05       	cpc	r19, r1
    17be:	a9 f5       	brne	.+106    	; 0x182a <__unpack_f+0x9e>
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	61 05       	cpc	r22, r1
    17c6:	71 05       	cpc	r23, r1
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__unpack_f+0x42>
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	37 c0       	rjmp	.+110    	; 0x183c <__unpack_f+0xb0>
    17ce:	82 e8       	ldi	r24, 0x82	; 130
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	13 96       	adiw	r26, 0x03	; 3
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
    17d8:	12 97       	sbiw	r26, 0x02	; 2
    17da:	9a 01       	movw	r18, r20
    17dc:	ab 01       	movw	r20, r22
    17de:	67 e0       	ldi	r22, 0x07	; 7
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	6a 95       	dec	r22
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <__unpack_f+0x54>
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	8c 93       	st	X, r24
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <__unpack_f+0x80>
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	44 1f       	adc	r20, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	8d 91       	ld	r24, X+
    17fe:	9c 91       	ld	r25, X
    1800:	13 97       	sbiw	r26, 0x03	; 3
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	20 30       	cpi	r18, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	38 07       	cpc	r19, r24
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	48 07       	cpc	r20, r24
    1816:	80 e4       	ldi	r24, 0x40	; 64
    1818:	58 07       	cpc	r21, r24
    181a:	58 f3       	brcs	.-42     	; 0x17f2 <__unpack_f+0x66>
    181c:	14 96       	adiw	r26, 0x04	; 4
    181e:	2d 93       	st	X+, r18
    1820:	3d 93       	st	X+, r19
    1822:	4d 93       	st	X+, r20
    1824:	5c 93       	st	X, r21
    1826:	17 97       	sbiw	r26, 0x07	; 7
    1828:	08 95       	ret
    182a:	2f 3f       	cpi	r18, 0xFF	; 255
    182c:	31 05       	cpc	r19, r1
    182e:	79 f4       	brne	.+30     	; 0x184e <__unpack_f+0xc2>
    1830:	41 15       	cp	r20, r1
    1832:	51 05       	cpc	r21, r1
    1834:	61 05       	cpc	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	19 f4       	brne	.+6      	; 0x1840 <__unpack_f+0xb4>
    183a:	84 e0       	ldi	r24, 0x04	; 4
    183c:	8c 93       	st	X, r24
    183e:	08 95       	ret
    1840:	64 ff       	sbrs	r22, 4
    1842:	03 c0       	rjmp	.+6      	; 0x184a <__unpack_f+0xbe>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	8c 93       	st	X, r24
    1848:	12 c0       	rjmp	.+36     	; 0x186e <__unpack_f+0xe2>
    184a:	1c 92       	st	X, r1
    184c:	10 c0       	rjmp	.+32     	; 0x186e <__unpack_f+0xe2>
    184e:	2f 57       	subi	r18, 0x7F	; 127
    1850:	30 40       	sbci	r19, 0x00	; 0
    1852:	13 96       	adiw	r26, 0x03	; 3
    1854:	3c 93       	st	X, r19
    1856:	2e 93       	st	-X, r18
    1858:	12 97       	sbiw	r26, 0x02	; 2
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	8c 93       	st	X, r24
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	8a 95       	dec	r24
    186a:	d1 f7       	brne	.-12     	; 0x1860 <__unpack_f+0xd4>
    186c:	70 64       	ori	r23, 0x40	; 64
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	4d 93       	st	X+, r20
    1872:	5d 93       	st	X+, r21
    1874:	6d 93       	st	X+, r22
    1876:	7c 93       	st	X, r23
    1878:	17 97       	sbiw	r26, 0x07	; 7
    187a:	08 95       	ret

0000187c <__fpcmp_parts_f>:
    187c:	1f 93       	push	r17
    187e:	dc 01       	movw	r26, r24
    1880:	fb 01       	movw	r30, r22
    1882:	9c 91       	ld	r25, X
    1884:	92 30       	cpi	r25, 0x02	; 2
    1886:	08 f4       	brcc	.+2      	; 0x188a <__fpcmp_parts_f+0xe>
    1888:	47 c0       	rjmp	.+142    	; 0x1918 <__fpcmp_parts_f+0x9c>
    188a:	80 81       	ld	r24, Z
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	08 f4       	brcc	.+2      	; 0x1892 <__fpcmp_parts_f+0x16>
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <__fpcmp_parts_f+0x9c>
    1892:	94 30       	cpi	r25, 0x04	; 4
    1894:	51 f4       	brne	.+20     	; 0x18aa <__fpcmp_parts_f+0x2e>
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	1c 91       	ld	r17, X
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	99 f5       	brne	.+102    	; 0x1904 <__fpcmp_parts_f+0x88>
    189e:	81 81       	ldd	r24, Z+1	; 0x01
    18a0:	68 2f       	mov	r22, r24
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	61 1b       	sub	r22, r17
    18a6:	71 09       	sbc	r23, r1
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <__fpcmp_parts_f+0xac>
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <__fpcmp_parts_f+0x3a>
    18ae:	92 30       	cpi	r25, 0x02	; 2
    18b0:	31 f4       	brne	.+12     	; 0x18be <__fpcmp_parts_f+0x42>
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	b9 f1       	breq	.+110    	; 0x1924 <__fpcmp_parts_f+0xa8>
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	88 23       	and	r24, r24
    18ba:	89 f1       	breq	.+98     	; 0x191e <__fpcmp_parts_f+0xa2>
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <__fpcmp_parts_f+0x9c>
    18be:	11 96       	adiw	r26, 0x01	; 1
    18c0:	1c 91       	ld	r17, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	f1 f0       	breq	.+60     	; 0x1904 <__fpcmp_parts_f+0x88>
    18c8:	81 81       	ldd	r24, Z+1	; 0x01
    18ca:	18 17       	cp	r17, r24
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <__fpcmp_parts_f+0x88>
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	2d 91       	ld	r18, X+
    18d2:	3c 91       	ld	r19, X
    18d4:	13 97       	sbiw	r26, 0x03	; 3
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	94 f0       	brlt	.+36     	; 0x1904 <__fpcmp_parts_f+0x88>
    18e0:	28 17       	cp	r18, r24
    18e2:	39 07       	cpc	r19, r25
    18e4:	bc f0       	brlt	.+46     	; 0x1914 <__fpcmp_parts_f+0x98>
    18e6:	14 96       	adiw	r26, 0x04	; 4
    18e8:	8d 91       	ld	r24, X+
    18ea:	9d 91       	ld	r25, X+
    18ec:	0d 90       	ld	r0, X+
    18ee:	bc 91       	ld	r27, X
    18f0:	a0 2d       	mov	r26, r0
    18f2:	24 81       	ldd	r18, Z+4	; 0x04
    18f4:	35 81       	ldd	r19, Z+5	; 0x05
    18f6:	46 81       	ldd	r20, Z+6	; 0x06
    18f8:	57 81       	ldd	r21, Z+7	; 0x07
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	4a 07       	cpc	r20, r26
    1900:	5b 07       	cpc	r21, r27
    1902:	18 f4       	brcc	.+6      	; 0x190a <__fpcmp_parts_f+0x8e>
    1904:	11 23       	and	r17, r17
    1906:	41 f0       	breq	.+16     	; 0x1918 <__fpcmp_parts_f+0x9c>
    1908:	0a c0       	rjmp	.+20     	; 0x191e <__fpcmp_parts_f+0xa2>
    190a:	82 17       	cp	r24, r18
    190c:	93 07       	cpc	r25, r19
    190e:	a4 07       	cpc	r26, r20
    1910:	b5 07       	cpc	r27, r21
    1912:	40 f4       	brcc	.+16     	; 0x1924 <__fpcmp_parts_f+0xa8>
    1914:	11 23       	and	r17, r17
    1916:	19 f0       	breq	.+6      	; 0x191e <__fpcmp_parts_f+0xa2>
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__fpcmp_parts_f+0xac>
    191e:	6f ef       	ldi	r22, 0xFF	; 255
    1920:	7f ef       	ldi	r23, 0xFF	; 255
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <__fpcmp_parts_f+0xac>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	cb 01       	movw	r24, r22
    192a:	1f 91       	pop	r17
    192c:	08 95       	ret

0000192e <main>:
uint8 response;//the response of the slave that is sent back based on the command of the master
uint8 temp;
uint8 g_seconds;
uint8 ret=0;

int main(void){
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	6c 97       	sbiw	r28, 0x1c	; 28
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
	SREG=(1<<7);
    1942:	ef e5       	ldi	r30, 0x5F	; 95
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 e8       	ldi	r24, 0x80	; 128
    1948:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID,PIN_OUTPUT);
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN1_ID,PIN_OUTPUT);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN2_ID,PIN_OUTPUT);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	62 e0       	ldi	r22, 0x02	; 2
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	UART_init(9600);
    1968:	60 e8       	ldi	r22, 0x80	; 128
    196a:	75 e2       	ldi	r23, 0x25	; 37
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <UART_init>
	LCD_init();
    1974:	0e 94 1d 28 	call	0x503a	; 0x503a <LCD_init>
	LCD_displayString("Welcome to smart");
    1978:	80 e6       	ldi	r24, 0x60	; 96
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("home system");
    1988:	81 e7       	ldi	r24, 0x71	; 113
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a8 ec       	ldi	r26, 0xC8	; 200
    1996:	b3 e4       	ldi	r27, 0x43	; 67
    1998:	89 8f       	std	Y+25, r24	; 0x19
    199a:	9a 8f       	std	Y+26, r25	; 0x1a
    199c:	ab 8f       	std	Y+27, r26	; 0x1b
    199e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	69 8d       	ldd	r22, Y+25	; 0x19
    19a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a ef       	ldi	r20, 0xFA	; 250
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8d 8b       	std	Y+21, r24	; 0x15
    19ba:	9e 8b       	std	Y+22, r25	; 0x16
    19bc:	af 8b       	std	Y+23, r26	; 0x17
    19be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <main+0xb4>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 8b       	std	Y+20, r25	; 0x14
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <main+0x132>
	else if (__tmp > 65535)
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	69 8d       	ldd	r22, Y+25	; 0x19
    19fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9c 8b       	std	Y+20, r25	; 0x14
    1a20:	8b 8b       	std	Y+19, r24	; 0x13
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <main+0x114>
    1a24:	88 ec       	ldi	r24, 0xC8	; 200
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9a 8b       	std	Y+18, r25	; 0x12
    1a2a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a2c:	89 89       	ldd	r24, Y+17	; 0x11
    1a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <main+0x102>
    1a34:	9a 8b       	std	Y+18, r25	; 0x12
    1a36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9c 8b       	std	Y+20, r25	; 0x14
    1a40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	8b 89       	ldd	r24, Y+19	; 0x13
    1a44:	9c 89       	ldd	r25, Y+20	; 0x14
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <main+0xf6>
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a50:	8f 89       	ldd	r24, Y+23	; 0x17
    1a52:	98 8d       	ldd	r25, Y+24	; 0x18
    1a54:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	98 8b       	std	Y+16, r25	; 0x10
    1a66:	8f 87       	std	Y+15, r24	; 0x0f
    1a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6a:	98 89       	ldd	r25, Y+16	; 0x10
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <main+0x13e>
    1a70:	98 8b       	std	Y+16, r25	; 0x10
    1a72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);
	LCD_clearScreen();
    1a74:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a8 ec       	ldi	r26, 0xC8	; 200
    1a7e:	b2 e4       	ldi	r27, 0x42	; 66
    1a80:	8b 87       	std	Y+11, r24	; 0x0b
    1a82:	9c 87       	std	Y+12, r25	; 0x0c
    1a84:	ad 87       	std	Y+13, r26	; 0x0d
    1a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a ef       	ldi	r20, 0xFA	; 250
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8f 83       	std	Y+7, r24	; 0x07
    1aa2:	98 87       	std	Y+8, r25	; 0x08
    1aa4:	a9 87       	std	Y+9, r26	; 0x09
    1aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <main+0x19c>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <main+0x21a>
	else if (__tmp > 65535)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <main+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <main+0x1fc>
    1b0c:	88 ec       	ldi	r24, 0xC8	; 200
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <main+0x1ea>
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <main+0x1de>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <main+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <main+0x226>
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	setGuestPassword(password);
    1b5c:	87 e8       	ldi	r24, 0x87	; 135
    1b5e:	93 e0       	ldi	r25, 0x03	; 3
    1b60:	0e 94 69 10 	call	0x20d2	; 0x20d2 <setGuestPassword>
	setAdminPassword(password);
    1b64:	87 e8       	ldi	r24, 0x87	; 135
    1b66:	93 e0       	ldi	r25, 0x03	; 3
    1b68:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <setAdminPassword>


	while(1){
		ret=0;
    1b6c:	10 92 84 03 	sts	0x0384, r1
		selectMode(password);
    1b70:	87 e8       	ldi	r24, 0x87	; 135
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	0e 94 1f 12 	call	0x243e	; 0x243e <selectMode>
    1b78:	f9 cf       	rjmp	.-14     	; 0x1b6c <main+0x23e>

00001b7a <getPassword>:

}


/*******get password from key pad ******/
void getPassword(uint8 *password){
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	62 97       	sbiw	r28, 0x12	; 18
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	9a 8b       	std	Y+18, r25	; 0x12
    1b90:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i ,key;
	for (i=0 ; i<PASS_SIZE; i++){
    1b92:	18 8a       	std	Y+16, r1	; 0x10
    1b94:	88 c0       	rjmp	.+272    	; 0x1ca6 <getPassword+0x12c>
		key= KEYPAD_getPressedKey();
    1b96:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    1b9a:	8f 87       	std	Y+15, r24	; 0x0f
		delaySeconds(1);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <delaySeconds>
		password[i]=key;
    1ba2:	88 89       	ldd	r24, Y+16	; 0x10
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	89 89       	ldd	r24, Y+17	; 0x11
    1baa:	9a 89       	ldd	r25, Y+18	; 0x12
    1bac:	fc 01       	movw	r30, r24
    1bae:	e2 0f       	add	r30, r18
    1bb0:	f3 1f       	adc	r31, r19
    1bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb4:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1bb6:	8a e2       	ldi	r24, 0x2A	; 42
    1bb8:	0e 94 2a 2a 	call	0x5454	; 0x5454 <LCD_displayCharacter>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a6 e9       	ldi	r26, 0x96	; 150
    1bc2:	b3 e4       	ldi	r27, 0x43	; 67
    1bc4:	8b 87       	std	Y+11, r24	; 0x0b
    1bc6:	9c 87       	std	Y+12, r25	; 0x0c
    1bc8:	ad 87       	std	Y+13, r26	; 0x0d
    1bca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8f 83       	std	Y+7, r24	; 0x07
    1be6:	98 87       	std	Y+8, r25	; 0x08
    1be8:	a9 87       	std	Y+9, r26	; 0x09
    1bea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bec:	6f 81       	ldd	r22, Y+7	; 0x07
    1bee:	78 85       	ldd	r23, Y+8	; 0x08
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <getPassword+0x94>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <getPassword+0x112>
	else if (__tmp > 65535)
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <getPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <getPassword+0xf4>
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <getPassword+0xe2>
    1c60:	9c 83       	std	Y+4, r25	; 0x04
    1c62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <getPassword+0xd6>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <getPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <getPassword+0x11e>
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01


/*******get password from key pad ******/
void getPassword(uint8 *password){
	uint8 i ,key;
	for (i=0 ; i<PASS_SIZE; i++){
    1ca0:	88 89       	ldd	r24, Y+16	; 0x10
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	88 8b       	std	Y+16, r24	; 0x10
    1ca6:	88 89       	ldd	r24, Y+16	; 0x10
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	08 f4       	brcc	.+2      	; 0x1cae <getPassword+0x134>
    1cac:	74 cf       	rjmp	.-280    	; 0x1b96 <getPassword+0x1c>
		LCD_displayCharacter('*');
		_delay_ms(300);

	}

}
    1cae:	62 96       	adiw	r28, 0x12	; 18
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <sendPassword>:
/********************/
void sendPassword(uint8 * password){
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	61 97       	sbiw	r28, 0x11	; 17
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	99 8b       	std	Y+17, r25	; 0x11
    1cd6:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0 ; i<PASS_SIZE ; i++){
    1cd8:	1f 86       	std	Y+15, r1	; 0x0f
    1cda:	80 c0       	rjmp	.+256    	; 0x1ddc <sendPassword+0x11c>
		UART_sendByte(password[i]);
    1cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	88 89       	ldd	r24, Y+16	; 0x10
    1ce4:	99 89       	ldd	r25, Y+17	; 0x11
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e2 0f       	add	r30, r18
    1cea:	f3 1f       	adc	r31, r19
    1cec:	80 81       	ld	r24, Z
    1cee:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a6 e9       	ldi	r26, 0x96	; 150
    1cf8:	b3 e4       	ldi	r27, 0x43	; 67
    1cfa:	8b 87       	std	Y+11, r24	; 0x0b
    1cfc:	9c 87       	std	Y+12, r25	; 0x0c
    1cfe:	ad 87       	std	Y+13, r26	; 0x0d
    1d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
    1d1c:	98 87       	std	Y+8, r25	; 0x08
    1d1e:	a9 87       	std	Y+9, r26	; 0x09
    1d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <sendPassword+0x84>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <sendPassword+0x102>
	else if (__tmp > 65535)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <sendPassword+0xe4>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <sendPassword+0xd2>
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <sendPassword+0xc6>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <sendPassword+0x10e>
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01

}
/********************/
void sendPassword(uint8 * password){
	uint8 i;
	for(i=0 ; i<PASS_SIZE ; i++){
    1dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	8f 87       	std	Y+15, r24	; 0x0f
    1ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	08 f4       	brcc	.+2      	; 0x1de4 <sendPassword+0x124>
    1de2:	7c cf       	rjmp	.-264    	; 0x1cdc <sendPassword+0x1c>
		UART_sendByte(password[i]);
		_delay_ms(300);

	}
}
    1de4:	61 96       	adiw	r28, 0x11	; 17
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <setAdminPassword>:


void setAdminPassword(uint8 *password){
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	6e 97       	sbiw	r28, 0x1e	; 30
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0c:	8d 8f       	std	Y+29, r24	; 0x1d
	delaySeconds(0.25);
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <delaySeconds>
	LCD_displayString("Set Admin pass");
    1e14:	8d e7       	ldi	r24, 0x7D	; 125
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("Admin pass:");
    1e24:	8c e8       	ldi	r24, 0x8C	; 140
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	getPassword(password);
    1e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e30:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
	sendPassword(password);
    1e34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e38:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
	LCD_clearScreen();
    1e3c:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
	LCD_displayString("Set Admin pass ");
    1e40:	88 e9       	ldi	r24, 0x98	; 152
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("again pass:");
    1e50:	88 ea       	ldi	r24, 0xA8	; 168
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	getPassword(password);
    1e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e5c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
	sendPassword(password);
    1e60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e64:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
	g_matchingCheck=UART_recieveByte();
    1e68:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    1e6c:	80 93 8a 03 	sts	0x038A, r24
    1e70:	a8 c0       	rjmp	.+336    	; 0x1fc2 <setAdminPassword+0x1cc>
	while(g_matchingCheck==UNMATCHED){
		LCD_clearScreen();
    1e72:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Error try again!!");
    1e76:	84 eb       	ldi	r24, 0xB4	; 180
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a6 e9       	ldi	r26, 0x96	; 150
    1e84:	b3 e4       	ldi	r27, 0x43	; 67
    1e86:	89 8f       	std	Y+25, r24	; 0x19
    1e88:	9a 8f       	std	Y+26, r25	; 0x1a
    1e8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a ef       	ldi	r20, 0xFA	; 250
    1e9c:	54 e4       	ldi	r21, 0x44	; 68
    1e9e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8d 8b       	std	Y+21, r24	; 0x15
    1ea8:	9e 8b       	std	Y+22, r25	; 0x16
    1eaa:	af 8b       	std	Y+23, r26	; 0x17
    1eac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eae:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <setAdminPassword+0xda>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 8b       	std	Y+20, r25	; 0x14
    1ecc:	8b 8b       	std	Y+19, r24	; 0x13
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <setAdminPassword+0x158>
	else if (__tmp > 65535)
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <setAdminPassword+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <setAdminPassword+0x13a>
    1f12:	88 ec       	ldi	r24, 0xC8	; 200
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9a 8b       	std	Y+18, r25	; 0x12
    1f18:	89 8b       	std	Y+17, r24	; 0x11
    1f1a:	89 89       	ldd	r24, Y+17	; 0x11
    1f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <setAdminPassword+0x128>
    1f22:	9a 8b       	std	Y+18, r25	; 0x12
    1f24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	8b 89       	ldd	r24, Y+19	; 0x13
    1f32:	9c 89       	ldd	r25, Y+20	; 0x14
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <setAdminPassword+0x11c>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <setAdminPassword+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f40:	98 8d       	ldd	r25, Y+24	; 0x18
    1f42:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	98 8b       	std	Y+16, r25	; 0x10
    1f54:	8f 87       	std	Y+15, r24	; 0x0f
    1f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f58:	98 89       	ldd	r25, Y+16	; 0x10
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <setAdminPassword+0x164>
    1f5e:	98 8b       	std	Y+16, r25	; 0x10
    1f60:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_clearScreen();
    1f62:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Set Admin pass");
    1f66:	8d e7       	ldi	r24, 0x7D	; 125
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		LCD_moveCursor(1,0);
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
		LCD_displayString("again pass:");
    1f76:	88 ea       	ldi	r24, 0xA8	; 168
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		getPassword(password);
    1f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f82:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
		sendPassword(password);
    1f86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f8a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
		LCD_clearScreen();
    1f8e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>

		LCD_displayString("Set Admin pass ");
    1f92:	88 e9       	ldi	r24, 0x98	; 152
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		LCD_moveCursor(1,0);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
		LCD_displayString("again Admin pass:");
    1fa2:	86 ec       	ldi	r24, 0xC6	; 198
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		getPassword(password);
    1faa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fae:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
		sendPassword(password);
    1fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fb6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
		g_matchingCheck=UART_recieveByte();
    1fba:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    1fbe:	80 93 8a 03 	sts	0x038A, r24
	LCD_moveCursor(1,0);
	LCD_displayString("again pass:");
	getPassword(password);
	sendPassword(password);
	g_matchingCheck=UART_recieveByte();
	while(g_matchingCheck==UNMATCHED){
    1fc2:	80 91 8a 03 	lds	r24, 0x038A
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <setAdminPassword+0x1d6>
    1fca:	53 cf       	rjmp	.-346    	; 0x1e72 <setAdminPassword+0x7c>
		LCD_displayString("again Admin pass:");
		getPassword(password);
		sendPassword(password);
		g_matchingCheck=UART_recieveByte();
	}
	LCD_clearScreen();
    1fcc:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>

	LCD_displayString("Admin Successful !");
    1fd0:	88 ed       	ldi	r24, 0xD8	; 216
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a6 e9       	ldi	r26, 0x96	; 150
    1fde:	b3 e4       	ldi	r27, 0x43	; 67
    1fe0:	8b 87       	std	Y+11, r24	; 0x0b
    1fe2:	9c 87       	std	Y+12, r25	; 0x0c
    1fe4:	ad 87       	std	Y+13, r26	; 0x0d
    1fe6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a ef       	ldi	r20, 0xFA	; 250
    1ff6:	54 e4       	ldi	r21, 0x44	; 68
    1ff8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8f 83       	std	Y+7, r24	; 0x07
    2002:	98 87       	std	Y+8, r25	; 0x08
    2004:	a9 87       	std	Y+9, r26	; 0x09
    2006:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    201c:	88 23       	and	r24, r24
    201e:	2c f4       	brge	.+10     	; 0x202a <setAdminPassword+0x234>
		__ticks = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	3f c0       	rjmp	.+126    	; 0x20a8 <setAdminPassword+0x2b2>
	else if (__tmp > 65535)
    202a:	6f 81       	ldd	r22, Y+7	; 0x07
    202c:	78 85       	ldd	r23, Y+8	; 0x08
    202e:	89 85       	ldd	r24, Y+9	; 0x09
    2030:	9a 85       	ldd	r25, Y+10	; 0x0a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	4c f5       	brge	.+82     	; 0x2094 <setAdminPassword+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2042:	6b 85       	ldd	r22, Y+11	; 0x0b
    2044:	7c 85       	ldd	r23, Y+12	; 0x0c
    2046:	8d 85       	ldd	r24, Y+13	; 0x0d
    2048:	9e 85       	ldd	r25, Y+14	; 0x0e
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	0f c0       	rjmp	.+30     	; 0x208a <setAdminPassword+0x294>
    206c:	88 ec       	ldi	r24, 0xC8	; 200
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <setAdminPassword+0x282>
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	69 f7       	brne	.-38     	; 0x206c <setAdminPassword+0x276>
    2092:	14 c0       	rjmp	.+40     	; 0x20bc <setAdminPassword+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <setAdminPassword+0x2be>
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    20bc:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
}
    20c0:	6e 96       	adiw	r28, 0x1e	; 30
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <setGuestPassword>:
void setGuestPassword(uint8 *password){
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	6e 97       	sbiw	r28, 0x1e	; 30
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	9e 8f       	std	Y+30, r25	; 0x1e
    20e8:	8d 8f       	std	Y+29, r24	; 0x1d
	delaySeconds(0.25);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <delaySeconds>
	LCD_displayString("Set Guest pass");
    20f0:	8b ee       	ldi	r24, 0xEB	; 235
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("Guest pass:");
    2100:	8a ef       	ldi	r24, 0xFA	; 250
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	getPassword(password);
    2108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    210a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    210c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
	sendPassword(password);
    2110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2112:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2114:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
	LCD_clearScreen();
    2118:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>

	LCD_displayString("Set Guest pass");
    211c:	8b ee       	ldi	r24, 0xEB	; 235
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("pass again:");
    212c:	86 e0       	ldi	r24, 0x06	; 6
    212e:	91 e0       	ldi	r25, 0x01	; 1
    2130:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	getPassword(password);
    2134:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2136:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2138:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
	sendPassword(password);
    213c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2140:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
	g_matchingCheck=UART_recieveByte();
    2144:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    2148:	80 93 8a 03 	sts	0x038A, r24
    214c:	a8 c0       	rjmp	.+336    	; 0x229e <setGuestPassword+0x1cc>
	while(g_matchingCheck==UNMATCHED){
		LCD_clearScreen();
    214e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Error try again!!");
    2152:	84 eb       	ldi	r24, 0xB4	; 180
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a6 e9       	ldi	r26, 0x96	; 150
    2160:	b3 e4       	ldi	r27, 0x43	; 67
    2162:	89 8f       	std	Y+25, r24	; 0x19
    2164:	9a 8f       	std	Y+26, r25	; 0x1a
    2166:	ab 8f       	std	Y+27, r26	; 0x1b
    2168:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	69 8d       	ldd	r22, Y+25	; 0x19
    216c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a ef       	ldi	r20, 0xFA	; 250
    2178:	54 e4       	ldi	r21, 0x44	; 68
    217a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8d 8b       	std	Y+21, r24	; 0x15
    2184:	9e 8b       	std	Y+22, r25	; 0x16
    2186:	af 8b       	std	Y+23, r26	; 0x17
    2188:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <setGuestPassword+0xda>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <setGuestPassword+0x158>
	else if (__tmp > 65535)
    21ac:	6d 89       	ldd	r22, Y+21	; 0x15
    21ae:	7e 89       	ldd	r23, Y+22	; 0x16
    21b0:	8f 89       	ldd	r24, Y+23	; 0x17
    21b2:	98 8d       	ldd	r25, Y+24	; 0x18
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <setGuestPassword+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	69 8d       	ldd	r22, Y+25	; 0x19
    21c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <setGuestPassword+0x13a>
    21ee:	88 ec       	ldi	r24, 0xC8	; 200
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9a 8b       	std	Y+18, r25	; 0x12
    21f4:	89 8b       	std	Y+17, r24	; 0x11
    21f6:	89 89       	ldd	r24, Y+17	; 0x11
    21f8:	9a 89       	ldd	r25, Y+18	; 0x12
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <setGuestPassword+0x128>
    21fe:	9a 8b       	std	Y+18, r25	; 0x12
    2200:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8b 89       	ldd	r24, Y+19	; 0x13
    2204:	9c 89       	ldd	r25, Y+20	; 0x14
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9c 8b       	std	Y+20, r25	; 0x14
    220a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <setGuestPassword+0x11c>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <setGuestPassword+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6d 89       	ldd	r22, Y+21	; 0x15
    2218:	7e 89       	ldd	r23, Y+22	; 0x16
    221a:	8f 89       	ldd	r24, Y+23	; 0x17
    221c:	98 8d       	ldd	r25, Y+24	; 0x18
    221e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9c 8b       	std	Y+20, r25	; 0x14
    2228:	8b 8b       	std	Y+19, r24	; 0x13
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	98 8b       	std	Y+16, r25	; 0x10
    2230:	8f 87       	std	Y+15, r24	; 0x0f
    2232:	8f 85       	ldd	r24, Y+15	; 0x0f
    2234:	98 89       	ldd	r25, Y+16	; 0x10
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <setGuestPassword+0x164>
    223a:	98 8b       	std	Y+16, r25	; 0x10
    223c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_clearScreen();
    223e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Set Guest pass");
    2242:	8b ee       	ldi	r24, 0xEB	; 235
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		LCD_moveCursor(1,0);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
		LCD_displayString("Guest pass:");
    2252:	8a ef       	ldi	r24, 0xFA	; 250
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		getPassword(password);
    225a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    225e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
		sendPassword(password);
    2262:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2264:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2266:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
		LCD_clearScreen();
    226a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Set Guest pass");
    226e:	8b ee       	ldi	r24, 0xEB	; 235
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		LCD_moveCursor(1,0);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
		LCD_displayString("Guest pass:");
    227e:	8a ef       	ldi	r24, 0xFA	; 250
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		getPassword(password);
    2286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2288:	9e 8d       	ldd	r25, Y+30	; 0x1e
    228a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
		sendPassword(password);
    228e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2290:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2292:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
		g_matchingCheck=UART_recieveByte();
    2296:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    229a:	80 93 8a 03 	sts	0x038A, r24
	LCD_moveCursor(1,0);
	LCD_displayString("pass again:");
	getPassword(password);
	sendPassword(password);
	g_matchingCheck=UART_recieveByte();
	while(g_matchingCheck==UNMATCHED){
    229e:	80 91 8a 03 	lds	r24, 0x038A
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <setGuestPassword+0x1d6>
    22a6:	53 cf       	rjmp	.-346    	; 0x214e <setGuestPassword+0x7c>
		LCD_displayString("Guest pass:");
		getPassword(password);
		sendPassword(password);
		g_matchingCheck=UART_recieveByte();
	}
	LCD_clearScreen();
    22a8:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>

	LCD_displayString("Guest Successful !");
    22ac:	82 e1       	ldi	r24, 0x12	; 18
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a6 e9       	ldi	r26, 0x96	; 150
    22ba:	b3 e4       	ldi	r27, 0x43	; 67
    22bc:	8b 87       	std	Y+11, r24	; 0x0b
    22be:	9c 87       	std	Y+12, r25	; 0x0c
    22c0:	ad 87       	std	Y+13, r26	; 0x0d
    22c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a ef       	ldi	r20, 0xFA	; 250
    22d2:	54 e4       	ldi	r21, 0x44	; 68
    22d4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8f 83       	std	Y+7, r24	; 0x07
    22de:	98 87       	std	Y+8, r25	; 0x08
    22e0:	a9 87       	std	Y+9, r26	; 0x09
    22e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <setGuestPassword+0x234>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <setGuestPassword+0x2b2>
	else if (__tmp > 65535)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <setGuestPassword+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2320:	7c 85       	ldd	r23, Y+12	; 0x0c
    2322:	8d 85       	ldd	r24, Y+13	; 0x0d
    2324:	9e 85       	ldd	r25, Y+14	; 0x0e
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <setGuestPassword+0x294>
    2348:	88 ec       	ldi	r24, 0xC8	; 200
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	8b 83       	std	Y+3, r24	; 0x03
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <setGuestPassword+0x282>
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <setGuestPassword+0x276>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <setGuestPassword+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <setGuestPassword+0x2be>
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    2398:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
}
    239c:	6e 96       	adiw	r28, 0x1e	; 30
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <activeAdminMode>:

void activeAdminMode(void){
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_HIGH);
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <disableAdminMode>:
void disableAdminMode(void){
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
}
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <disableGuestMode>:
void disableGuestMode(void){
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    23e6:	82 e0       	ldi	r24, 0x02	; 2
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <activeGuestMode>:
void activeGuestMode(void){
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_HIGH);
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	61 e0       	ldi	r22, 0x01	; 1
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
}
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <activeBlockMode>:
void activeBlockMode(void){
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	62 e0       	ldi	r22, 0x02	; 2
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <disableBlockMode>:
void disableBlockMode(void){
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	62 e0       	ldi	r22, 0x02	; 2
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
}
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <selectMode>:

void selectMode(uint8* password){
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	a1 97       	sbiw	r28, 0x21	; 33
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	9f 8f       	std	Y+31, r25	; 0x1f
    2454:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 key;
	LCD_clearScreen();
    2456:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
	LCD_displayString("Select Mode:");
    245a:	85 e2       	ldi	r24, 0x25	; 37
    245c:	91 e0       	ldi	r25, 0x01	; 1
    245e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("0:Admin 1:Guest ");
    246a:	82 e3       	ldi	r24, 0x32	; 50
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	key=KEYPAD_getPressedKey();
    2472:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a6 e9       	ldi	r26, 0x96	; 150
    247e:	b3 e4       	ldi	r27, 0x43	; 67
    2480:	89 8f       	std	Y+25, r24	; 0x19
    2482:	9a 8f       	std	Y+26, r25	; 0x1a
    2484:	ab 8f       	std	Y+27, r26	; 0x1b
    2486:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	69 8d       	ldd	r22, Y+25	; 0x19
    248a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8d 8b       	std	Y+21, r24	; 0x15
    24a2:	9e 8b       	std	Y+22, r25	; 0x16
    24a4:	af 8b       	std	Y+23, r26	; 0x17
    24a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24a8:	6d 89       	ldd	r22, Y+21	; 0x15
    24aa:	7e 89       	ldd	r23, Y+22	; 0x16
    24ac:	8f 89       	ldd	r24, Y+23	; 0x17
    24ae:	98 8d       	ldd	r25, Y+24	; 0x18
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <selectMode+0x8c>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <selectMode+0x10a>
	else if (__tmp > 65535)
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <selectMode+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	69 8d       	ldd	r22, Y+25	; 0x19
    24e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9c 8b       	std	Y+20, r25	; 0x14
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	0f c0       	rjmp	.+30     	; 0x252a <selectMode+0xec>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
    2514:	89 89       	ldd	r24, Y+17	; 0x11
    2516:	9a 89       	ldd	r25, Y+18	; 0x12
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <selectMode+0xda>
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <selectMode+0xce>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <selectMode+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6d 89       	ldd	r22, Y+21	; 0x15
    2536:	7e 89       	ldd	r23, Y+22	; 0x16
    2538:	8f 89       	ldd	r24, Y+23	; 0x17
    253a:	98 8d       	ldd	r25, Y+24	; 0x18
    253c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
    2550:	8f 85       	ldd	r24, Y+15	; 0x0f
    2552:	98 89       	ldd	r25, Y+16	; 0x10
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <selectMode+0x116>
    2558:	98 8b       	std	Y+16, r25	; 0x10
    255a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	switch(key){
    255c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	39 a3       	std	Y+33, r19	; 0x21
    2564:	28 a3       	std	Y+32, r18	; 0x20
    2566:	88 a1       	ldd	r24, Y+32	; 0x20
    2568:	99 a1       	ldd	r25, Y+33	; 0x21
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	31 f0       	breq	.+12     	; 0x257a <selectMode+0x13c>
    256e:	28 a1       	ldd	r18, Y+32	; 0x20
    2570:	39 a1       	ldd	r19, Y+33	; 0x21
    2572:	21 30       	cpi	r18, 0x01	; 1
    2574:	31 05       	cpc	r19, r1
    2576:	49 f0       	breq	.+18     	; 0x258a <selectMode+0x14c>
    2578:	10 c0       	rjmp	.+32     	; 0x259a <selectMode+0x15c>
	case 0:
		UART_sendByte(ADMIN_MODE);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
		adminMode(password);
    2580:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2582:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2584:	0e 94 50 13 	call	0x26a0	; 0x26a0 <adminMode>
    2588:	82 c0       	rjmp	.+260    	; 0x268e <selectMode+0x250>
		break;
	case 1:
		UART_sendByte(GUEST_MODE);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
		guestMode(password);
    2590:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2592:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2594:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <guestMode>
    2598:	7a c0       	rjmp	.+244    	; 0x268e <selectMode+0x250>
		break;
	default:
		LCD_clearScreen();
    259a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Plz Enter 0 or 1!");
    259e:	83 e4       	ldi	r24, 0x43	; 67
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	a8 ec       	ldi	r26, 0xC8	; 200
    25ac:	b3 e4       	ldi	r27, 0x43	; 67
    25ae:	8b 87       	std	Y+11, r24	; 0x0b
    25b0:	9c 87       	std	Y+12, r25	; 0x0c
    25b2:	ad 87       	std	Y+13, r26	; 0x0d
    25b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    25bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a ef       	ldi	r20, 0xFA	; 250
    25c4:	54 e4       	ldi	r21, 0x44	; 68
    25c6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8f 83       	std	Y+7, r24	; 0x07
    25d0:	98 87       	std	Y+8, r25	; 0x08
    25d2:	a9 87       	std	Y+9, r26	; 0x09
    25d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	2c f4       	brge	.+10     	; 0x25f8 <selectMode+0x1ba>
		__ticks = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	3f c0       	rjmp	.+126    	; 0x2676 <selectMode+0x238>
	else if (__tmp > 65535)
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	3f ef       	ldi	r19, 0xFF	; 255
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	57 e4       	ldi	r21, 0x47	; 71
    2608:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	4c f5       	brge	.+82     	; 0x2662 <selectMode+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2610:	6b 85       	ldd	r22, Y+11	; 0x0b
    2612:	7c 85       	ldd	r23, Y+12	; 0x0c
    2614:	8d 85       	ldd	r24, Y+13	; 0x0d
    2616:	9e 85       	ldd	r25, Y+14	; 0x0e
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
    2638:	0f c0       	rjmp	.+30     	; 0x2658 <selectMode+0x21a>
    263a:	88 ec       	ldi	r24, 0xC8	; 200
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <selectMode+0x208>
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	69 f7       	brne	.-38     	; 0x263a <selectMode+0x1fc>
    2660:	14 c0       	rjmp	.+40     	; 0x268a <selectMode+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <selectMode+0x244>
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		LCD_clearScreen();
    268a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
	}
}
    268e:	a1 96       	adiw	r28, 0x21	; 33
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <adminMode>:
void adminMode(uint8* passowrd){
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	cf 5a       	subi	r28, 0xAF	; 175
    26ae:	d0 40       	sbci	r29, 0x00	; 0
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	fe 01       	movw	r30, r28
    26bc:	e6 55       	subi	r30, 0x56	; 86
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
	uint8 key;
	LCD_clearScreen();
    26c4:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
	LCD_displayString("Admin Mode:");
    26c8:	85 e5       	ldi	r24, 0x55	; 85
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("Enter pass: ");
    26d8:	81 e6       	ldi	r24, 0x61	; 97
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	getPassword(password);
    26e0:	87 e8       	ldi	r24, 0x87	; 135
    26e2:	93 e0       	ldi	r25, 0x03	; 3
    26e4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
	sendPassword(password);
    26e8:	87 e8       	ldi	r24, 0x87	; 135
    26ea:	93 e0       	ldi	r25, 0x03	; 3
    26ec:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
	g_matchingCheck=UART_recieveByte();
    26f0:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    26f4:	80 93 8a 03 	sts	0x038A, r24
    26f8:	d3 c0       	rjmp	.+422    	; 0x28a0 <adminMode+0x200>
	while(g_matchingCheck!=MATCHED){
		LCD_clearScreen();
    26fa:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("password invalid!");
    26fe:	8e e6       	ldi	r24, 0x6E	; 110
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    2706:	fe 01       	movw	r30, r28
    2708:	eb 55       	subi	r30, 0x5B	; 91
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a6 e9       	ldi	r26, 0x96	; 150
    2712:	b3 e4       	ldi	r27, 0x43	; 67
    2714:	80 83       	st	Z, r24
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	a2 83       	std	Z+2, r26	; 0x02
    271a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271c:	8e 01       	movw	r16, r28
    271e:	0f 55       	subi	r16, 0x5F	; 95
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	fe 01       	movw	r30, r28
    2724:	eb 55       	subi	r30, 0x5B	; 91
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a ef       	ldi	r20, 0xFA	; 250
    2736:	54 e4       	ldi	r21, 0x44	; 68
    2738:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	f8 01       	movw	r30, r16
    2742:	80 83       	st	Z, r24
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	a2 83       	std	Z+2, r26	; 0x02
    2748:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    274a:	fe 01       	movw	r30, r28
    274c:	ef 55       	subi	r30, 0x5F	; 95
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	44 f4       	brge	.+16     	; 0x2778 <adminMode+0xd8>
		__ticks = 1;
    2768:	fe 01       	movw	r30, r28
    276a:	e1 56       	subi	r30, 0x61	; 97
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	64 c0       	rjmp	.+200    	; 0x2840 <adminMode+0x1a0>
	else if (__tmp > 65535)
    2778:	fe 01       	movw	r30, r28
    277a:	ef 55       	subi	r30, 0x5F	; 95
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	0c f0       	brlt	.+2      	; 0x2798 <adminMode+0xf8>
    2796:	43 c0       	rjmp	.+134    	; 0x281e <adminMode+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	fe 01       	movw	r30, r28
    279a:	eb 55       	subi	r30, 0x5B	; 91
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8e 01       	movw	r16, r28
    27b8:	01 56       	subi	r16, 0x61	; 97
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	f8 01       	movw	r30, r16
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	1f c0       	rjmp	.+62     	; 0x280e <adminMode+0x16e>
    27d0:	fe 01       	movw	r30, r28
    27d2:	e3 56       	subi	r30, 0x63	; 99
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	88 ec       	ldi	r24, 0xC8	; 200
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	fe 01       	movw	r30, r28
    27e0:	e3 56       	subi	r30, 0x63	; 99
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <adminMode+0x148>
    27ec:	fe 01       	movw	r30, r28
    27ee:	e3 56       	subi	r30, 0x63	; 99
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	de 01       	movw	r26, r28
    27f8:	a1 56       	subi	r26, 0x61	; 97
    27fa:	bf 4f       	sbci	r27, 0xFF	; 255
    27fc:	fe 01       	movw	r30, r28
    27fe:	e1 56       	subi	r30, 0x61	; 97
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	9c 93       	st	X, r25
    280c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	fe 01       	movw	r30, r28
    2810:	e1 56       	subi	r30, 0x61	; 97
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	d1 f6       	brne	.-76     	; 0x27d0 <adminMode+0x130>
    281c:	27 c0       	rjmp	.+78     	; 0x286c <adminMode+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	8e 01       	movw	r16, r28
    2820:	01 56       	subi	r16, 0x61	; 97
    2822:	1f 4f       	sbci	r17, 0xFF	; 255
    2824:	fe 01       	movw	r30, r28
    2826:	ef 55       	subi	r30, 0x5F	; 95
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	f8 01       	movw	r30, r16
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	de 01       	movw	r26, r28
    2842:	a5 56       	subi	r26, 0x65	; 101
    2844:	bf 4f       	sbci	r27, 0xFF	; 255
    2846:	fe 01       	movw	r30, r28
    2848:	e1 56       	subi	r30, 0x61	; 97
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	8d 93       	st	X+, r24
    2852:	9c 93       	st	X, r25
    2854:	fe 01       	movw	r30, r28
    2856:	e5 56       	subi	r30, 0x65	; 101
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <adminMode+0x1be>
    2862:	fe 01       	movw	r30, r28
    2864:	e5 56       	subi	r30, 0x65	; 101
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
		_delay_ms(300);
		LCD_clearScreen();
    286c:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Admin Mode:");
    2870:	85 e5       	ldi	r24, 0x55	; 85
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		LCD_moveCursor(1,0);
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
		LCD_displayString("Enter pass: ");
    2880:	81 e6       	ldi	r24, 0x61	; 97
    2882:	91 e0       	ldi	r25, 0x01	; 1
    2884:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		getPassword(password);
    2888:	87 e8       	ldi	r24, 0x87	; 135
    288a:	93 e0       	ldi	r25, 0x03	; 3
    288c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
		sendPassword(password);
    2890:	87 e8       	ldi	r24, 0x87	; 135
    2892:	93 e0       	ldi	r25, 0x03	; 3
    2894:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
		g_matchingCheck=UART_recieveByte();
    2898:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    289c:	80 93 8a 03 	sts	0x038A, r24
	LCD_moveCursor(1,0);
	LCD_displayString("Enter pass: ");
	getPassword(password);
	sendPassword(password);
	g_matchingCheck=UART_recieveByte();
	while(g_matchingCheck!=MATCHED){
    28a0:	80 91 8a 03 	lds	r24, 0x038A
    28a4:	88 23       	and	r24, r24
    28a6:	09 f0       	breq	.+2      	; 0x28aa <adminMode+0x20a>
    28a8:	28 cf       	rjmp	.-432    	; 0x26fa <adminMode+0x5a>
		LCD_displayString("Enter pass: ");
		getPassword(password);
		sendPassword(password);
		g_matchingCheck=UART_recieveByte();
	}
	if(g_matchingCheck==MATCHED){
    28aa:	80 91 8a 03 	lds	r24, 0x038A
    28ae:	88 23       	and	r24, r24
    28b0:	11 f0       	breq	.+4      	; 0x28b6 <adminMode+0x216>
    28b2:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <adminMode+0x144c>
		LCD_clearScreen();
    28b6:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		disableGuestMode();
    28ba:	0e 94 ef 11 	call	0x23de	; 0x23de <disableGuestMode>
		activeAdminMode();
    28be:	0e 94 d7 11 	call	0x23ae	; 0x23ae <activeAdminMode>
		LCD_displayString("You now in admin mode");
    28c2:	80 e8       	ldi	r24, 0x80	; 128
    28c4:	91 e0       	ldi	r25, 0x01	; 1
    28c6:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 56       	subi	r30, 0x69	; 105
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a6 e9       	ldi	r26, 0x96	; 150
    28d6:	b3 e4       	ldi	r27, 0x43	; 67
    28d8:	80 83       	st	Z, r24
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	a2 83       	std	Z+2, r26	; 0x02
    28de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	8e 01       	movw	r16, r28
    28e2:	0d 56       	subi	r16, 0x6D	; 109
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	fe 01       	movw	r30, r28
    28e8:	e9 56       	subi	r30, 0x69	; 105
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a ef       	ldi	r20, 0xFA	; 250
    28fa:	54 e4       	ldi	r21, 0x44	; 68
    28fc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	f8 01       	movw	r30, r16
    2906:	80 83       	st	Z, r24
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	a2 83       	std	Z+2, r26	; 0x02
    290c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290e:	fe 01       	movw	r30, r28
    2910:	ed 56       	subi	r30, 0x6D	; 109
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2928:	88 23       	and	r24, r24
    292a:	44 f4       	brge	.+16     	; 0x293c <adminMode+0x29c>
		__ticks = 1;
    292c:	fe 01       	movw	r30, r28
    292e:	ef 56       	subi	r30, 0x6F	; 111
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	64 c0       	rjmp	.+200    	; 0x2a04 <adminMode+0x364>
	else if (__tmp > 65535)
    293c:	fe 01       	movw	r30, r28
    293e:	ed 56       	subi	r30, 0x6D	; 109
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	3f ef       	ldi	r19, 0xFF	; 255
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	57 e4       	ldi	r21, 0x47	; 71
    2952:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	0c f0       	brlt	.+2      	; 0x295c <adminMode+0x2bc>
    295a:	43 c0       	rjmp	.+134    	; 0x29e2 <adminMode+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	fe 01       	movw	r30, r28
    295e:	e9 56       	subi	r30, 0x69	; 105
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8e 01       	movw	r16, r28
    297c:	0f 56       	subi	r16, 0x6F	; 111
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	1f c0       	rjmp	.+62     	; 0x29d2 <adminMode+0x332>
    2994:	fe 01       	movw	r30, r28
    2996:	e1 57       	subi	r30, 0x71	; 113
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	88 ec       	ldi	r24, 0xC8	; 200
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	fe 01       	movw	r30, r28
    29a4:	e1 57       	subi	r30, 0x71	; 113
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <adminMode+0x30c>
    29b0:	fe 01       	movw	r30, r28
    29b2:	e1 57       	subi	r30, 0x71	; 113
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	de 01       	movw	r26, r28
    29bc:	af 56       	subi	r26, 0x6F	; 111
    29be:	bf 4f       	sbci	r27, 0xFF	; 255
    29c0:	fe 01       	movw	r30, r28
    29c2:	ef 56       	subi	r30, 0x6F	; 111
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	9c 93       	st	X, r25
    29d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	fe 01       	movw	r30, r28
    29d4:	ef 56       	subi	r30, 0x6F	; 111
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	d1 f6       	brne	.-76     	; 0x2994 <adminMode+0x2f4>
    29e0:	27 c0       	rjmp	.+78     	; 0x2a30 <adminMode+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	8e 01       	movw	r16, r28
    29e4:	0f 56       	subi	r16, 0x6F	; 111
    29e6:	1f 4f       	sbci	r17, 0xFF	; 255
    29e8:	fe 01       	movw	r30, r28
    29ea:	ed 56       	subi	r30, 0x6D	; 109
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	f8 01       	movw	r30, r16
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24
    2a04:	de 01       	movw	r26, r28
    2a06:	a3 57       	subi	r26, 0x73	; 115
    2a08:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ef 56       	subi	r30, 0x6F	; 111
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	8d 93       	st	X+, r24
    2a16:	9c 93       	st	X, r25
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e3 57       	subi	r30, 0x73	; 115
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <adminMode+0x382>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e3 57       	subi	r30, 0x73	; 115
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
		_delay_ms(300);
		LCD_clearScreen();
    2a30:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		do{
			LCD_displayStringRowColumn(0,0,"1:Room1 2:Room2");
    2a34:	26 e9       	ldi	r18, 0x96	; 150
    2a36:	31 e0       	ldi	r19, 0x01	; 1
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	a9 01       	movw	r20, r18
    2a3e:	0e 94 84 2c 	call	0x5908	; 0x5908 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"3:Room3 4:More");
    2a42:	26 ea       	ldi	r18, 0xA6	; 166
    2a44:	31 e0       	ldi	r19, 0x01	; 1
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	a9 01       	movw	r20, r18
    2a4c:	0e 94 84 2c 	call	0x5908	; 0x5908 <LCD_displayStringRowColumn>
			key=KEYPAD_getPressedKey();
    2a50:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 55       	subi	r30, 0x57	; 87
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 83       	st	Z, r24
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e7 57       	subi	r30, 0x77	; 119
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a8 ec       	ldi	r26, 0xC8	; 200
    2a68:	b3 e4       	ldi	r27, 0x43	; 67
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	8e 01       	movw	r16, r28
    2a74:	0b 57       	subi	r16, 0x7B	; 123
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e7 57       	subi	r30, 0x77	; 119
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	a2 83       	std	Z+2, r26	; 0x02
    2a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	eb 57       	subi	r30, 0x7B	; 123
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	44 f4       	brge	.+16     	; 0x2ace <adminMode+0x42e>
		__ticks = 1;
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ed 57       	subi	r30, 0x7D	; 125
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	64 c0       	rjmp	.+200    	; 0x2b96 <adminMode+0x4f6>
	else if (__tmp > 65535)
    2ace:	fe 01       	movw	r30, r28
    2ad0:	eb 57       	subi	r30, 0x7B	; 123
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <adminMode+0x44e>
    2aec:	43 c0       	rjmp	.+134    	; 0x2b74 <adminMode+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	fe 01       	movw	r30, r28
    2af0:	e7 57       	subi	r30, 0x77	; 119
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	8e 01       	movw	r16, r28
    2b0e:	0d 57       	subi	r16, 0x7D	; 125
    2b10:	1f 4f       	sbci	r17, 0xFF	; 255
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	1f c0       	rjmp	.+62     	; 0x2b64 <adminMode+0x4c4>
    2b26:	fe 01       	movw	r30, r28
    2b28:	ef 57       	subi	r30, 0x7F	; 127
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	88 ec       	ldi	r24, 0xC8	; 200
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	ef 57       	subi	r30, 0x7F	; 127
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <adminMode+0x49e>
    2b42:	fe 01       	movw	r30, r28
    2b44:	ef 57       	subi	r30, 0x7F	; 127
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4c:	de 01       	movw	r26, r28
    2b4e:	ad 57       	subi	r26, 0x7D	; 125
    2b50:	bf 4f       	sbci	r27, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	ed 57       	subi	r30, 0x7D	; 125
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	11 96       	adiw	r26, 0x01	; 1
    2b60:	9c 93       	st	X, r25
    2b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	fe 01       	movw	r30, r28
    2b66:	ed 57       	subi	r30, 0x7D	; 125
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	d1 f6       	brne	.-76     	; 0x2b26 <adminMode+0x486>
    2b72:	28 c0       	rjmp	.+80     	; 0x2bc4 <adminMode+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b74:	8e 01       	movw	r16, r28
    2b76:	0d 57       	subi	r16, 0x7D	; 125
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	eb 57       	subi	r30, 0x7B	; 123
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	f8 01       	movw	r30, r16
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	de 01       	movw	r26, r28
    2b98:	a1 58       	subi	r26, 0x81	; 129
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ed 57       	subi	r30, 0x7D	; 125
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	9c 93       	st	X, r25
    2baa:	8e 93       	st	-X, r24
    2bac:	fe 01       	movw	r30, r28
    2bae:	e1 58       	subi	r30, 0x81	; 129
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <adminMode+0x516>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e1 58       	subi	r30, 0x81	; 129
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
			_delay_ms(400);
			if(key==1){
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e7 55       	subi	r30, 0x57	; 87
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <adminMode+0x532>
    2bd0:	fe c0       	rjmp	.+508    	; 0x2dce <adminMode+0x72e>
				UART_sendByte(ROOM1);
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
				LCD_clearScreen();
    2bd8:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
				LCD_displayString("ROOM1 S:");
    2bdc:	85 eb       	ldi	r24, 0xB5	; 181
    2bde:	91 e0       	ldi	r25, 0x01	; 1
    2be0:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				response=UART_recieveByte();
    2be4:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    2be8:	80 93 89 03 	sts	0x0389, r24
				if(response==OFF){
    2bec:	80 91 89 03 	lds	r24, 0x0389
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	29 f4       	brne	.+10     	; 0x2bfe <adminMode+0x55e>
					LCD_displayString("OFF");
    2bf4:	8e eb       	ldi	r24, 0xBE	; 190
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <adminMode+0x566>
				}else{
					LCD_displayString("ON");
    2bfe:	82 ec       	ldi	r24, 0xC2	; 194
    2c00:	91 e0       	ldi	r25, 0x01	; 1
    2c02:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

				}
				LCD_moveCursor(1,0);
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
				LCD_displayString("1-ON 2-OFF 0-RET");
    2c0e:	85 ec       	ldi	r24, 0xC5	; 197
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				key=KEYPAD_getPressedKey();
    2c16:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e7 55       	subi	r30, 0x57	; 87
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 83       	st	Z, r24
    2c22:	fe 01       	movw	r30, r28
    2c24:	e5 58       	subi	r30, 0x85	; 133
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a8 ec       	ldi	r26, 0xC8	; 200
    2c2e:	b3 e4       	ldi	r27, 0x43	; 67
    2c30:	80 83       	st	Z, r24
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	8e 01       	movw	r16, r28
    2c3a:	09 58       	subi	r16, 0x89	; 137
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e5 58       	subi	r30, 0x85	; 133
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a ef       	ldi	r20, 0xFA	; 250
    2c52:	54 e4       	ldi	r21, 0x44	; 68
    2c54:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c66:	fe 01       	movw	r30, r28
    2c68:	e9 58       	subi	r30, 0x89	; 137
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	44 f4       	brge	.+16     	; 0x2c94 <adminMode+0x5f4>
		__ticks = 1;
    2c84:	fe 01       	movw	r30, r28
    2c86:	eb 58       	subi	r30, 0x8B	; 139
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	80 83       	st	Z, r24
    2c92:	64 c0       	rjmp	.+200    	; 0x2d5c <adminMode+0x6bc>
	else if (__tmp > 65535)
    2c94:	fe 01       	movw	r30, r28
    2c96:	e9 58       	subi	r30, 0x89	; 137
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	0c f0       	brlt	.+2      	; 0x2cb4 <adminMode+0x614>
    2cb2:	43 c0       	rjmp	.+134    	; 0x2d3a <adminMode+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e5 58       	subi	r30, 0x85	; 133
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	0b 58       	subi	r16, 0x8B	; 139
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
    2cea:	1f c0       	rjmp	.+62     	; 0x2d2a <adminMode+0x68a>
    2cec:	fe 01       	movw	r30, r28
    2cee:	ed 58       	subi	r30, 0x8D	; 141
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	88 ec       	ldi	r24, 0xC8	; 200
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ed 58       	subi	r30, 0x8D	; 141
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <adminMode+0x664>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ed 58       	subi	r30, 0x8D	; 141
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	de 01       	movw	r26, r28
    2d14:	ab 58       	subi	r26, 0x8B	; 139
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	eb 58       	subi	r30, 0x8B	; 139
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	11 96       	adiw	r26, 0x01	; 1
    2d26:	9c 93       	st	X, r25
    2d28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	eb 58       	subi	r30, 0x8B	; 139
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	d1 f6       	brne	.-76     	; 0x2cec <adminMode+0x64c>
    2d38:	28 c0       	rjmp	.+80     	; 0x2d8a <adminMode+0x6ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	8e 01       	movw	r16, r28
    2d3c:	0b 58       	subi	r16, 0x8B	; 139
    2d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	e9 58       	subi	r30, 0x89	; 137
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
    2d5c:	de 01       	movw	r26, r28
    2d5e:	af 58       	subi	r26, 0x8F	; 143
    2d60:	bf 4f       	sbci	r27, 0xFF	; 255
    2d62:	fe 01       	movw	r30, r28
    2d64:	eb 58       	subi	r30, 0x8B	; 139
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	11 96       	adiw	r26, 0x01	; 1
    2d6e:	9c 93       	st	X, r25
    2d70:	8e 93       	st	-X, r24
    2d72:	fe 01       	movw	r30, r28
    2d74:	ef 58       	subi	r30, 0x8F	; 143
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 81       	ld	r24, Z
    2d7a:	91 81       	ldd	r25, Z+1	; 0x01
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <adminMode+0x6dc>
    2d80:	fe 01       	movw	r30, r28
    2d82:	ef 58       	subi	r30, 0x8F	; 143
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
				_delay_ms(400);
				if(key==1){
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	e7 55       	subi	r30, 0x57	; 87
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	21 f4       	brne	.+8      	; 0x2d9e <adminMode+0x6fe>
					UART_sendByte(ON);
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    2d9c:	a1 c6       	rjmp	.+3394   	; 0x3ae0 <adminMode+0x1440>
				}else if(key==2){
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e7 55       	subi	r30, 0x57	; 87
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	82 30       	cpi	r24, 0x02	; 2
    2da8:	21 f4       	brne	.+8      	; 0x2db2 <adminMode+0x712>
					UART_sendByte(OFF);
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    2db0:	97 c6       	rjmp	.+3374   	; 0x3ae0 <adminMode+0x1440>

				}else if(key==0){
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 55       	subi	r30, 0x57	; 87
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	88 23       	and	r24, r24
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <adminMode+0x720>
    2dbe:	90 c6       	rjmp	.+3360   	; 0x3ae0 <adminMode+0x1440>
					UART_sendByte(RET);
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
					ret=1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	80 93 84 03 	sts	0x0384, r24
    2dcc:	89 c6       	rjmp	.+3346   	; 0x3ae0 <adminMode+0x1440>

				}
			}else if(key==2){
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e7 55       	subi	r30, 0x57	; 87
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	82 30       	cpi	r24, 0x02	; 2
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <adminMode+0x73c>
    2dda:	fe c0       	rjmp	.+508    	; 0x2fd8 <adminMode+0x938>
				UART_sendByte(ROOM2);
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
				LCD_clearScreen();
    2de2:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
				LCD_displayString("ROOM2 S:");
    2de6:	86 ed       	ldi	r24, 0xD6	; 214
    2de8:	91 e0       	ldi	r25, 0x01	; 1
    2dea:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				response=UART_recieveByte();
    2dee:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    2df2:	80 93 89 03 	sts	0x0389, r24
				if(response==OFF){
    2df6:	80 91 89 03 	lds	r24, 0x0389
    2dfa:	81 30       	cpi	r24, 0x01	; 1
    2dfc:	29 f4       	brne	.+10     	; 0x2e08 <adminMode+0x768>
					LCD_displayString("OFF");
    2dfe:	8e eb       	ldi	r24, 0xBE	; 190
    2e00:	91 e0       	ldi	r25, 0x01	; 1
    2e02:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    2e06:	04 c0       	rjmp	.+8      	; 0x2e10 <adminMode+0x770>
				}else{
					LCD_displayString("ON");
    2e08:	82 ec       	ldi	r24, 0xC2	; 194
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

				}
				LCD_moveCursor(1,0);
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
				LCD_displayString("1-ON 2-OFF 0-RET");
    2e18:	85 ec       	ldi	r24, 0xC5	; 197
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				key=KEYPAD_getPressedKey();
    2e20:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    2e24:	fe 01       	movw	r30, r28
    2e26:	e7 55       	subi	r30, 0x57	; 87
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 83       	st	Z, r24
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e3 59       	subi	r30, 0x93	; 147
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	a8 ec       	ldi	r26, 0xC8	; 200
    2e38:	b3 e4       	ldi	r27, 0x43	; 67
    2e3a:	80 83       	st	Z, r24
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	a2 83       	std	Z+2, r26	; 0x02
    2e40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	8e 01       	movw	r16, r28
    2e44:	07 59       	subi	r16, 0x97	; 151
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e3 59       	subi	r30, 0x93	; 147
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4a ef       	ldi	r20, 0xFA	; 250
    2e5c:	54 e4       	ldi	r21, 0x44	; 68
    2e5e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	f8 01       	movw	r30, r16
    2e68:	80 83       	st	Z, r24
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	a2 83       	std	Z+2, r26	; 0x02
    2e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e70:	fe 01       	movw	r30, r28
    2e72:	e7 59       	subi	r30, 0x97	; 151
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	44 f4       	brge	.+16     	; 0x2e9e <adminMode+0x7fe>
		__ticks = 1;
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e9 59       	subi	r30, 0x99	; 153
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
    2e9c:	64 c0       	rjmp	.+200    	; 0x2f66 <adminMode+0x8c6>
	else if (__tmp > 65535)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e7 59       	subi	r30, 0x97	; 151
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	3f ef       	ldi	r19, 0xFF	; 255
    2eb0:	4f e7       	ldi	r20, 0x7F	; 127
    2eb2:	57 e4       	ldi	r21, 0x47	; 71
    2eb4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2eb8:	18 16       	cp	r1, r24
    2eba:	0c f0       	brlt	.+2      	; 0x2ebe <adminMode+0x81e>
    2ebc:	43 c0       	rjmp	.+134    	; 0x2f44 <adminMode+0x8a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e3 59       	subi	r30, 0x93	; 147
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8e 01       	movw	r16, r28
    2ede:	09 59       	subi	r16, 0x99	; 153
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	f8 01       	movw	r30, r16
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
    2ef4:	1f c0       	rjmp	.+62     	; 0x2f34 <adminMode+0x894>
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	eb 59       	subi	r30, 0x9B	; 155
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	88 ec       	ldi	r24, 0xC8	; 200
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	80 83       	st	Z, r24
    2f04:	fe 01       	movw	r30, r28
    2f06:	eb 59       	subi	r30, 0x9B	; 155
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <adminMode+0x86e>
    2f12:	fe 01       	movw	r30, r28
    2f14:	eb 59       	subi	r30, 0x9B	; 155
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	de 01       	movw	r26, r28
    2f1e:	a9 59       	subi	r26, 0x99	; 153
    2f20:	bf 4f       	sbci	r27, 0xFF	; 255
    2f22:	fe 01       	movw	r30, r28
    2f24:	e9 59       	subi	r30, 0x99	; 153
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	11 96       	adiw	r26, 0x01	; 1
    2f30:	9c 93       	st	X, r25
    2f32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	fe 01       	movw	r30, r28
    2f36:	e9 59       	subi	r30, 0x99	; 153
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	d1 f6       	brne	.-76     	; 0x2ef6 <adminMode+0x856>
    2f42:	28 c0       	rjmp	.+80     	; 0x2f94 <adminMode+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	8e 01       	movw	r16, r28
    2f46:	09 59       	subi	r16, 0x99	; 153
    2f48:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e7 59       	subi	r30, 0x97	; 151
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	f8 01       	movw	r30, r16
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
    2f66:	de 01       	movw	r26, r28
    2f68:	ad 59       	subi	r26, 0x9D	; 157
    2f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e9 59       	subi	r30, 0x99	; 153
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	11 96       	adiw	r26, 0x01	; 1
    2f78:	9c 93       	st	X, r25
    2f7a:	8e 93       	st	-X, r24
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ed 59       	subi	r30, 0x9D	; 157
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	80 81       	ld	r24, Z
    2f84:	91 81       	ldd	r25, Z+1	; 0x01
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <adminMode+0x8e6>
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 59       	subi	r30, 0x9D	; 157
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
				_delay_ms(400);
				if(key==1){
    2f94:	fe 01       	movw	r30, r28
    2f96:	e7 55       	subi	r30, 0x57	; 87
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	21 f4       	brne	.+8      	; 0x2fa8 <adminMode+0x908>
					UART_sendByte(ON);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    2fa6:	9c c5       	rjmp	.+2872   	; 0x3ae0 <adminMode+0x1440>
				}else if(key==2){
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e7 55       	subi	r30, 0x57	; 87
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	21 f4       	brne	.+8      	; 0x2fbc <adminMode+0x91c>
					UART_sendByte(OFF);
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    2fba:	92 c5       	rjmp	.+2852   	; 0x3ae0 <adminMode+0x1440>

				}else if(key==0){
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e7 55       	subi	r30, 0x57	; 87
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 81       	ld	r24, Z
    2fc4:	88 23       	and	r24, r24
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <adminMode+0x92a>
    2fc8:	8b c5       	rjmp	.+2838   	; 0x3ae0 <adminMode+0x1440>
					UART_sendByte(RET);
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
					ret=1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	80 93 84 03 	sts	0x0384, r24
    2fd6:	84 c5       	rjmp	.+2824   	; 0x3ae0 <adminMode+0x1440>

				}
			}else if(key==3){
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e7 55       	subi	r30, 0x57	; 87
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	83 30       	cpi	r24, 0x03	; 3
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <adminMode+0x946>
    2fe4:	fe c0       	rjmp	.+508    	; 0x31e2 <adminMode+0xb42>
				UART_sendByte(ROOM3);
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
				LCD_clearScreen();
    2fec:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
				LCD_displayString("ROOM3 S:");
    2ff0:	8f ed       	ldi	r24, 0xDF	; 223
    2ff2:	91 e0       	ldi	r25, 0x01	; 1
    2ff4:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				response=UART_recieveByte();
    2ff8:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    2ffc:	80 93 89 03 	sts	0x0389, r24
				if(response==OFF){
    3000:	80 91 89 03 	lds	r24, 0x0389
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	29 f4       	brne	.+10     	; 0x3012 <adminMode+0x972>
					LCD_displayString("OFF");
    3008:	8e eb       	ldi	r24, 0xBE	; 190
    300a:	91 e0       	ldi	r25, 0x01	; 1
    300c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    3010:	04 c0       	rjmp	.+8      	; 0x301a <adminMode+0x97a>
				}else{
					LCD_displayString("ON");
    3012:	82 ec       	ldi	r24, 0xC2	; 194
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

				}
				LCD_moveCursor(1,0);
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
				LCD_displayString("1-ON 2-OFF 0-RET");
    3022:	85 ec       	ldi	r24, 0xC5	; 197
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				key=KEYPAD_getPressedKey();
    302a:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    302e:	fe 01       	movw	r30, r28
    3030:	e7 55       	subi	r30, 0x57	; 87
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 83       	st	Z, r24
    3036:	fe 01       	movw	r30, r28
    3038:	e1 5a       	subi	r30, 0xA1	; 161
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	a8 ec       	ldi	r26, 0xC8	; 200
    3042:	b3 e4       	ldi	r27, 0x43	; 67
    3044:	80 83       	st	Z, r24
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	a2 83       	std	Z+2, r26	; 0x02
    304a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304c:	8e 01       	movw	r16, r28
    304e:	05 5a       	subi	r16, 0xA5	; 165
    3050:	1f 4f       	sbci	r17, 0xFF	; 255
    3052:	fe 01       	movw	r30, r28
    3054:	e1 5a       	subi	r30, 0xA1	; 161
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	4a ef       	ldi	r20, 0xFA	; 250
    3066:	54 e4       	ldi	r21, 0x44	; 68
    3068:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	f8 01       	movw	r30, r16
    3072:	80 83       	st	Z, r24
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	a2 83       	std	Z+2, r26	; 0x02
    3078:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    307a:	fe 01       	movw	r30, r28
    307c:	e5 5a       	subi	r30, 0xA5	; 165
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	60 81       	ld	r22, Z
    3082:	71 81       	ldd	r23, Z+1	; 0x01
    3084:	82 81       	ldd	r24, Z+2	; 0x02
    3086:	93 81       	ldd	r25, Z+3	; 0x03
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	5f e3       	ldi	r21, 0x3F	; 63
    3090:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3094:	88 23       	and	r24, r24
    3096:	44 f4       	brge	.+16     	; 0x30a8 <adminMode+0xa08>
		__ticks = 1;
    3098:	fe 01       	movw	r30, r28
    309a:	e7 5a       	subi	r30, 0xA7	; 167
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
    30a6:	64 c0       	rjmp	.+200    	; 0x3170 <adminMode+0xad0>
	else if (__tmp > 65535)
    30a8:	fe 01       	movw	r30, r28
    30aa:	e5 5a       	subi	r30, 0xA5	; 165
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	3f ef       	ldi	r19, 0xFF	; 255
    30ba:	4f e7       	ldi	r20, 0x7F	; 127
    30bc:	57 e4       	ldi	r21, 0x47	; 71
    30be:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    30c2:	18 16       	cp	r1, r24
    30c4:	0c f0       	brlt	.+2      	; 0x30c8 <adminMode+0xa28>
    30c6:	43 c0       	rjmp	.+134    	; 0x314e <adminMode+0xaae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c8:	fe 01       	movw	r30, r28
    30ca:	e1 5a       	subi	r30, 0xA1	; 161
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e2       	ldi	r20, 0x20	; 32
    30dc:	51 e4       	ldi	r21, 0x41	; 65
    30de:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	8e 01       	movw	r16, r28
    30e8:	07 5a       	subi	r16, 0xA7	; 167
    30ea:	1f 4f       	sbci	r17, 0xFF	; 255
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	f8 01       	movw	r30, r16
    30fa:	91 83       	std	Z+1, r25	; 0x01
    30fc:	80 83       	st	Z, r24
    30fe:	1f c0       	rjmp	.+62     	; 0x313e <adminMode+0xa9e>
    3100:	fe 01       	movw	r30, r28
    3102:	e9 5a       	subi	r30, 0xA9	; 169
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	88 ec       	ldi	r24, 0xC8	; 200
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
    310e:	fe 01       	movw	r30, r28
    3110:	e9 5a       	subi	r30, 0xA9	; 169
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <adminMode+0xa78>
    311c:	fe 01       	movw	r30, r28
    311e:	e9 5a       	subi	r30, 0xA9	; 169
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3126:	de 01       	movw	r26, r28
    3128:	a7 5a       	subi	r26, 0xA7	; 167
    312a:	bf 4f       	sbci	r27, 0xFF	; 255
    312c:	fe 01       	movw	r30, r28
    312e:	e7 5a       	subi	r30, 0xA7	; 167
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	80 81       	ld	r24, Z
    3134:	91 81       	ldd	r25, Z+1	; 0x01
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	11 96       	adiw	r26, 0x01	; 1
    313a:	9c 93       	st	X, r25
    313c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313e:	fe 01       	movw	r30, r28
    3140:	e7 5a       	subi	r30, 0xA7	; 167
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	d1 f6       	brne	.-76     	; 0x3100 <adminMode+0xa60>
    314c:	28 c0       	rjmp	.+80     	; 0x319e <adminMode+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314e:	8e 01       	movw	r16, r28
    3150:	07 5a       	subi	r16, 0xA7	; 167
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
    3154:	fe 01       	movw	r30, r28
    3156:	e5 5a       	subi	r30, 0xA5	; 165
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	f8 01       	movw	r30, r16
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	80 83       	st	Z, r24
    3170:	de 01       	movw	r26, r28
    3172:	ab 5a       	subi	r26, 0xAB	; 171
    3174:	bf 4f       	sbci	r27, 0xFF	; 255
    3176:	fe 01       	movw	r30, r28
    3178:	e7 5a       	subi	r30, 0xA7	; 167
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	11 96       	adiw	r26, 0x01	; 1
    3182:	9c 93       	st	X, r25
    3184:	8e 93       	st	-X, r24
    3186:	fe 01       	movw	r30, r28
    3188:	eb 5a       	subi	r30, 0xAB	; 171
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <adminMode+0xaf0>
    3194:	fe 01       	movw	r30, r28
    3196:	eb 5a       	subi	r30, 0xAB	; 171
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	80 83       	st	Z, r24
				_delay_ms(400);
				if(key==1){
    319e:	fe 01       	movw	r30, r28
    31a0:	e7 55       	subi	r30, 0x57	; 87
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	80 81       	ld	r24, Z
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	21 f4       	brne	.+8      	; 0x31b2 <adminMode+0xb12>
					UART_sendByte(ON);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    31b0:	97 c4       	rjmp	.+2350   	; 0x3ae0 <adminMode+0x1440>
				}else if(key==2){
    31b2:	fe 01       	movw	r30, r28
    31b4:	e7 55       	subi	r30, 0x57	; 87
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	80 81       	ld	r24, Z
    31ba:	82 30       	cpi	r24, 0x02	; 2
    31bc:	21 f4       	brne	.+8      	; 0x31c6 <adminMode+0xb26>
					UART_sendByte(OFF);
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    31c4:	8d c4       	rjmp	.+2330   	; 0x3ae0 <adminMode+0x1440>

				}else if(key==0){
    31c6:	fe 01       	movw	r30, r28
    31c8:	e7 55       	subi	r30, 0x57	; 87
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	80 81       	ld	r24, Z
    31ce:	88 23       	and	r24, r24
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <adminMode+0xb34>
    31d2:	86 c4       	rjmp	.+2316   	; 0x3ae0 <adminMode+0x1440>

					UART_sendByte(RET);
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
					ret=1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	80 93 84 03 	sts	0x0384, r24
    31e0:	7f c4       	rjmp	.+2302   	; 0x3ae0 <adminMode+0x1440>

				}
			}else if(key==4){
    31e2:	fe 01       	movw	r30, r28
    31e4:	e7 55       	subi	r30, 0x57	; 87
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	84 30       	cpi	r24, 0x04	; 4
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <adminMode+0xb50>
    31ee:	78 c4       	rjmp	.+2288   	; 0x3ae0 <adminMode+0x1440>
				UART_sendByte(MORE);
    31f0:	84 e0       	ldi	r24, 0x04	; 4
    31f2:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
				LCD_clearScreen();
    31f6:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
				LCD_displayString("1:ROOM4 2:TV");
    31fa:	88 ee       	ldi	r24, 0xE8	; 232
    31fc:	91 e0       	ldi	r25, 0x01	; 1
    31fe:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				LCD_moveCursor(1,0);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
				LCD_displayString("3:Air con 4:RET");
    320a:	85 ef       	ldi	r24, 0xF5	; 245
    320c:	91 e0       	ldi	r25, 0x01	; 1
    320e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
				key=KEYPAD_getPressedKey();
    3212:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    3216:	fe 01       	movw	r30, r28
    3218:	e7 55       	subi	r30, 0x57	; 87
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	80 83       	st	Z, r24
    321e:	fe 01       	movw	r30, r28
    3220:	ef 5a       	subi	r30, 0xAF	; 175
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	aa ef       	ldi	r26, 0xFA	; 250
    322a:	b3 e4       	ldi	r27, 0x43	; 67
    322c:	80 83       	st	Z, r24
    322e:	91 83       	std	Z+1, r25	; 0x01
    3230:	a2 83       	std	Z+2, r26	; 0x02
    3232:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	8e 01       	movw	r16, r28
    3236:	03 5b       	subi	r16, 0xB3	; 179
    3238:	1f 4f       	sbci	r17, 0xFF	; 255
    323a:	fe 01       	movw	r30, r28
    323c:	ef 5a       	subi	r30, 0xAF	; 175
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	60 81       	ld	r22, Z
    3242:	71 81       	ldd	r23, Z+1	; 0x01
    3244:	82 81       	ldd	r24, Z+2	; 0x02
    3246:	93 81       	ldd	r25, Z+3	; 0x03
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4a ef       	ldi	r20, 0xFA	; 250
    324e:	54 e4       	ldi	r21, 0x44	; 68
    3250:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	80 83       	st	Z, r24
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	a2 83       	std	Z+2, r26	; 0x02
    3260:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3262:	fe 01       	movw	r30, r28
    3264:	e3 5b       	subi	r30, 0xB3	; 179
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	60 81       	ld	r22, Z
    326a:	71 81       	ldd	r23, Z+1	; 0x01
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	93 81       	ldd	r25, Z+3	; 0x03
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e8       	ldi	r20, 0x80	; 128
    3276:	5f e3       	ldi	r21, 0x3F	; 63
    3278:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    327c:	88 23       	and	r24, r24
    327e:	44 f4       	brge	.+16     	; 0x3290 <adminMode+0xbf0>
		__ticks = 1;
    3280:	fe 01       	movw	r30, r28
    3282:	e5 5b       	subi	r30, 0xB5	; 181
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
    328e:	64 c0       	rjmp	.+200    	; 0x3358 <adminMode+0xcb8>
	else if (__tmp > 65535)
    3290:	fe 01       	movw	r30, r28
    3292:	e3 5b       	subi	r30, 0xB3	; 179
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	93 81       	ldd	r25, Z+3	; 0x03
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	0c f0       	brlt	.+2      	; 0x32b0 <adminMode+0xc10>
    32ae:	43 c0       	rjmp	.+134    	; 0x3336 <adminMode+0xc96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b0:	fe 01       	movw	r30, r28
    32b2:	ef 5a       	subi	r30, 0xAF	; 175
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	60 81       	ld	r22, Z
    32b8:	71 81       	ldd	r23, Z+1	; 0x01
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	93 81       	ldd	r25, Z+3	; 0x03
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e2       	ldi	r20, 0x20	; 32
    32c4:	51 e4       	ldi	r21, 0x41	; 65
    32c6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	8e 01       	movw	r16, r28
    32d0:	05 5b       	subi	r16, 0xB5	; 181
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	bc 01       	movw	r22, r24
    32d6:	cd 01       	movw	r24, r26
    32d8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	f8 01       	movw	r30, r16
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	80 83       	st	Z, r24
    32e6:	1f c0       	rjmp	.+62     	; 0x3326 <adminMode+0xc86>
    32e8:	fe 01       	movw	r30, r28
    32ea:	e7 5b       	subi	r30, 0xB7	; 183
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	88 ec       	ldi	r24, 0xC8	; 200
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	91 83       	std	Z+1, r25	; 0x01
    32f4:	80 83       	st	Z, r24
    32f6:	fe 01       	movw	r30, r28
    32f8:	e7 5b       	subi	r30, 0xB7	; 183
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <adminMode+0xc60>
    3304:	fe 01       	movw	r30, r28
    3306:	e7 5b       	subi	r30, 0xB7	; 183
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	91 83       	std	Z+1, r25	; 0x01
    330c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330e:	de 01       	movw	r26, r28
    3310:	a5 5b       	subi	r26, 0xB5	; 181
    3312:	bf 4f       	sbci	r27, 0xFF	; 255
    3314:	fe 01       	movw	r30, r28
    3316:	e5 5b       	subi	r30, 0xB5	; 181
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 81       	ld	r24, Z
    331c:	91 81       	ldd	r25, Z+1	; 0x01
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	11 96       	adiw	r26, 0x01	; 1
    3322:	9c 93       	st	X, r25
    3324:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3326:	fe 01       	movw	r30, r28
    3328:	e5 5b       	subi	r30, 0xB5	; 181
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 81       	ld	r24, Z
    332e:	91 81       	ldd	r25, Z+1	; 0x01
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	d1 f6       	brne	.-76     	; 0x32e8 <adminMode+0xc48>
    3334:	28 c0       	rjmp	.+80     	; 0x3386 <adminMode+0xce6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3336:	8e 01       	movw	r16, r28
    3338:	05 5b       	subi	r16, 0xB5	; 181
    333a:	1f 4f       	sbci	r17, 0xFF	; 255
    333c:	fe 01       	movw	r30, r28
    333e:	e3 5b       	subi	r30, 0xB3	; 179
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	f8 01       	movw	r30, r16
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
    3358:	de 01       	movw	r26, r28
    335a:	a9 5b       	subi	r26, 0xB9	; 185
    335c:	bf 4f       	sbci	r27, 0xFF	; 255
    335e:	fe 01       	movw	r30, r28
    3360:	e5 5b       	subi	r30, 0xB5	; 181
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	11 96       	adiw	r26, 0x01	; 1
    336a:	9c 93       	st	X, r25
    336c:	8e 93       	st	-X, r24
    336e:	fe 01       	movw	r30, r28
    3370:	e9 5b       	subi	r30, 0xB9	; 185
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <adminMode+0xcd8>
    337c:	fe 01       	movw	r30, r28
    337e:	e9 5b       	subi	r30, 0xB9	; 185
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
				_delay_ms(500);
				switch(key){
    3386:	fe 01       	movw	r30, r28
    3388:	e7 55       	subi	r30, 0x57	; 87
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	28 2f       	mov	r18, r24
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	c2 55       	subi	r28, 0x52	; 82
    3394:	df 4f       	sbci	r29, 0xFF	; 255
    3396:	39 83       	std	Y+1, r19	; 0x01
    3398:	28 83       	st	Y, r18
    339a:	ce 5a       	subi	r28, 0xAE	; 174
    339c:	d0 40       	sbci	r29, 0x00	; 0
    339e:	c2 55       	subi	r28, 0x52	; 82
    33a0:	df 4f       	sbci	r29, 0xFF	; 255
    33a2:	88 81       	ld	r24, Y
    33a4:	99 81       	ldd	r25, Y+1	; 0x01
    33a6:	ce 5a       	subi	r28, 0xAE	; 174
    33a8:	d0 40       	sbci	r29, 0x00	; 0
    33aa:	82 30       	cpi	r24, 0x02	; 2
    33ac:	91 05       	cpc	r25, r1
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <adminMode+0xd12>
    33b0:	e3 c0       	rjmp	.+454    	; 0x3578 <adminMode+0xed8>
    33b2:	c2 55       	subi	r28, 0x52	; 82
    33b4:	df 4f       	sbci	r29, 0xFF	; 255
    33b6:	e8 81       	ld	r30, Y
    33b8:	f9 81       	ldd	r31, Y+1	; 0x01
    33ba:	ce 5a       	subi	r28, 0xAE	; 174
    33bc:	d0 40       	sbci	r29, 0x00	; 0
    33be:	e3 30       	cpi	r30, 0x03	; 3
    33c0:	f1 05       	cpc	r31, r1
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <adminMode+0xd26>
    33c4:	95 c1       	rjmp	.+810    	; 0x36f0 <adminMode+0x1050>
    33c6:	c2 55       	subi	r28, 0x52	; 82
    33c8:	df 4f       	sbci	r29, 0xFF	; 255
    33ca:	28 81       	ld	r18, Y
    33cc:	39 81       	ldd	r19, Y+1	; 0x01
    33ce:	ce 5a       	subi	r28, 0xAE	; 174
    33d0:	d0 40       	sbci	r29, 0x00	; 0
    33d2:	21 30       	cpi	r18, 0x01	; 1
    33d4:	31 05       	cpc	r19, r1
    33d6:	09 f0       	breq	.+2      	; 0x33da <adminMode+0xd3a>
    33d8:	83 c3       	rjmp	.+1798   	; 0x3ae0 <adminMode+0x1440>
				case 1:
					UART_sendByte(ROOM4);
    33da:	83 e0       	ldi	r24, 0x03	; 3
    33dc:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
					LCD_clearScreen();
    33e0:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
					LCD_displayString("ROOM4 S:");
    33e4:	85 e0       	ldi	r24, 0x05	; 5
    33e6:	92 e0       	ldi	r25, 0x02	; 2
    33e8:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
					response=UART_recieveByte();
    33ec:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    33f0:	80 93 89 03 	sts	0x0389, r24
					if(response==OFF){
    33f4:	80 91 89 03 	lds	r24, 0x0389
    33f8:	81 30       	cpi	r24, 0x01	; 1
    33fa:	29 f4       	brne	.+10     	; 0x3406 <adminMode+0xd66>
						LCD_displayString("OFF");
    33fc:	8e eb       	ldi	r24, 0xBE	; 190
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    3404:	04 c0       	rjmp	.+8      	; 0x340e <adminMode+0xd6e>
					}else{
						LCD_displayString("ON");
    3406:	82 ec       	ldi	r24, 0xC2	; 194
    3408:	91 e0       	ldi	r25, 0x01	; 1
    340a:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

					}
					LCD_moveCursor(1,0);
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
					LCD_displayString("1-ON 2-OFF 0-RET");
    3416:	85 ec       	ldi	r24, 0xC5	; 197
    3418:	91 e0       	ldi	r25, 0x01	; 1
    341a:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
					key=KEYPAD_getPressedKey();
    341e:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    3422:	fe 01       	movw	r30, r28
    3424:	e7 55       	subi	r30, 0x57	; 87
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 83       	st	Z, r24
    342a:	fe 01       	movw	r30, r28
    342c:	ed 5b       	subi	r30, 0xBD	; 189
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	aa ef       	ldi	r26, 0xFA	; 250
    3436:	b3 e4       	ldi	r27, 0x43	; 67
    3438:	80 83       	st	Z, r24
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	a2 83       	std	Z+2, r26	; 0x02
    343e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3440:	8e 01       	movw	r16, r28
    3442:	01 5c       	subi	r16, 0xC1	; 193
    3444:	1f 4f       	sbci	r17, 0xFF	; 255
    3446:	fe 01       	movw	r30, r28
    3448:	ed 5b       	subi	r30, 0xBD	; 189
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a ef       	ldi	r20, 0xFA	; 250
    345a:	54 e4       	ldi	r21, 0x44	; 68
    345c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	f8 01       	movw	r30, r16
    3466:	80 83       	st	Z, r24
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	a2 83       	std	Z+2, r26	; 0x02
    346c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    346e:	fe 01       	movw	r30, r28
    3470:	ff 96       	adiw	r30, 0x3f	; 63
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e8       	ldi	r20, 0x80	; 128
    3480:	5f e3       	ldi	r21, 0x3F	; 63
    3482:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3486:	88 23       	and	r24, r24
    3488:	2c f4       	brge	.+10     	; 0x3494 <adminMode+0xdf4>
		__ticks = 1;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9e af       	std	Y+62, r25	; 0x3e
    3490:	8d af       	std	Y+61, r24	; 0x3d
    3492:	46 c0       	rjmp	.+140    	; 0x3520 <adminMode+0xe80>
	else if (__tmp > 65535)
    3494:	fe 01       	movw	r30, r28
    3496:	ff 96       	adiw	r30, 0x3f	; 63
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	3f ef       	ldi	r19, 0xFF	; 255
    34a4:	4f e7       	ldi	r20, 0x7F	; 127
    34a6:	57 e4       	ldi	r21, 0x47	; 71
    34a8:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    34ac:	18 16       	cp	r1, r24
    34ae:	64 f5       	brge	.+88     	; 0x3508 <adminMode+0xe68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b0:	fe 01       	movw	r30, r28
    34b2:	ed 5b       	subi	r30, 0xBD	; 189
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	60 81       	ld	r22, Z
    34b8:	71 81       	ldd	r23, Z+1	; 0x01
    34ba:	82 81       	ldd	r24, Z+2	; 0x02
    34bc:	93 81       	ldd	r25, Z+3	; 0x03
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e2       	ldi	r20, 0x20	; 32
    34c4:	51 e4       	ldi	r21, 0x41	; 65
    34c6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9e af       	std	Y+62, r25	; 0x3e
    34dc:	8d af       	std	Y+61, r24	; 0x3d
    34de:	0f c0       	rjmp	.+30     	; 0x34fe <adminMode+0xe5e>
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9c af       	std	Y+60, r25	; 0x3c
    34e6:	8b af       	std	Y+59, r24	; 0x3b
    34e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    34ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <adminMode+0xe4c>
    34f0:	9c af       	std	Y+60, r25	; 0x3c
    34f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    34f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	9e af       	std	Y+62, r25	; 0x3e
    34fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3500:	9e ad       	ldd	r25, Y+62	; 0x3e
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	69 f7       	brne	.-38     	; 0x34e0 <adminMode+0xe40>
    3506:	16 c0       	rjmp	.+44     	; 0x3534 <adminMode+0xe94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3508:	fe 01       	movw	r30, r28
    350a:	ff 96       	adiw	r30, 0x3f	; 63
    350c:	60 81       	ld	r22, Z
    350e:	71 81       	ldd	r23, Z+1	; 0x01
    3510:	82 81       	ldd	r24, Z+2	; 0x02
    3512:	93 81       	ldd	r25, Z+3	; 0x03
    3514:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	9e af       	std	Y+62, r25	; 0x3e
    351e:	8d af       	std	Y+61, r24	; 0x3d
    3520:	8d ad       	ldd	r24, Y+61	; 0x3d
    3522:	9e ad       	ldd	r25, Y+62	; 0x3e
    3524:	9a af       	std	Y+58, r25	; 0x3a
    3526:	89 af       	std	Y+57, r24	; 0x39
    3528:	89 ad       	ldd	r24, Y+57	; 0x39
    352a:	9a ad       	ldd	r25, Y+58	; 0x3a
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	f1 f7       	brne	.-4      	; 0x352c <adminMode+0xe8c>
    3530:	9a af       	std	Y+58, r25	; 0x3a
    3532:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(500);
					if(key==1){
    3534:	fe 01       	movw	r30, r28
    3536:	e7 55       	subi	r30, 0x57	; 87
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	80 81       	ld	r24, Z
    353c:	81 30       	cpi	r24, 0x01	; 1
    353e:	21 f4       	brne	.+8      	; 0x3548 <adminMode+0xea8>
						UART_sendByte(ON);
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    3546:	cc c2       	rjmp	.+1432   	; 0x3ae0 <adminMode+0x1440>
					}else if(key==2){
    3548:	fe 01       	movw	r30, r28
    354a:	e7 55       	subi	r30, 0x57	; 87
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	82 30       	cpi	r24, 0x02	; 2
    3552:	21 f4       	brne	.+8      	; 0x355c <adminMode+0xebc>
						UART_sendByte(OFF);
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    355a:	c2 c2       	rjmp	.+1412   	; 0x3ae0 <adminMode+0x1440>

					}else if(key==0){
    355c:	fe 01       	movw	r30, r28
    355e:	e7 55       	subi	r30, 0x57	; 87
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	88 23       	and	r24, r24
    3566:	09 f0       	breq	.+2      	; 0x356a <adminMode+0xeca>
    3568:	bb c2       	rjmp	.+1398   	; 0x3ae0 <adminMode+0x1440>
						UART_sendByte(RET);
    356a:	82 e0       	ldi	r24, 0x02	; 2
    356c:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
						ret=1;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	80 93 84 03 	sts	0x0384, r24
    3576:	b4 c2       	rjmp	.+1384   	; 0x3ae0 <adminMode+0x1440>

					}
					break;
				case 2:
					UART_sendByte(TV);
    3578:	85 e0       	ldi	r24, 0x05	; 5
    357a:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
					LCD_clearScreen();
    357e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
					LCD_displayString("TV S:");
    3582:	8e e0       	ldi	r24, 0x0E	; 14
    3584:	92 e0       	ldi	r25, 0x02	; 2
    3586:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
					response=UART_recieveByte();
    358a:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    358e:	80 93 89 03 	sts	0x0389, r24
					if(response==OFF){
    3592:	80 91 89 03 	lds	r24, 0x0389
    3596:	81 30       	cpi	r24, 0x01	; 1
    3598:	29 f4       	brne	.+10     	; 0x35a4 <adminMode+0xf04>
						LCD_displayString("OFF");
    359a:	8e eb       	ldi	r24, 0xBE	; 190
    359c:	91 e0       	ldi	r25, 0x01	; 1
    359e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    35a2:	04 c0       	rjmp	.+8      	; 0x35ac <adminMode+0xf0c>
					}else{
						LCD_displayString("ON");
    35a4:	82 ec       	ldi	r24, 0xC2	; 194
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

					}
					LCD_moveCursor(1,0);
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
					LCD_displayString("1-ON 2-OFF 0-RET");
    35b4:	85 ec       	ldi	r24, 0xC5	; 197
    35b6:	91 e0       	ldi	r25, 0x01	; 1
    35b8:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
					key=KEYPAD_getPressedKey();
    35bc:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    35c0:	fe 01       	movw	r30, r28
    35c2:	e7 55       	subi	r30, 0x57	; 87
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 83       	st	Z, r24
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	aa ef       	ldi	r26, 0xFA	; 250
    35ce:	b3 e4       	ldi	r27, 0x43	; 67
    35d0:	8d ab       	std	Y+53, r24	; 0x35
    35d2:	9e ab       	std	Y+54, r25	; 0x36
    35d4:	af ab       	std	Y+55, r26	; 0x37
    35d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	6d a9       	ldd	r22, Y+53	; 0x35
    35da:	7e a9       	ldd	r23, Y+54	; 0x36
    35dc:	8f a9       	ldd	r24, Y+55	; 0x37
    35de:	98 ad       	ldd	r25, Y+56	; 0x38
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	4a ef       	ldi	r20, 0xFA	; 250
    35e6:	54 e4       	ldi	r21, 0x44	; 68
    35e8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	89 ab       	std	Y+49, r24	; 0x31
    35f2:	9a ab       	std	Y+50, r25	; 0x32
    35f4:	ab ab       	std	Y+51, r26	; 0x33
    35f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35f8:	69 a9       	ldd	r22, Y+49	; 0x31
    35fa:	7a a9       	ldd	r23, Y+50	; 0x32
    35fc:	8b a9       	ldd	r24, Y+51	; 0x33
    35fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <adminMode+0xf7a>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	98 ab       	std	Y+48, r25	; 0x30
    3616:	8f a7       	std	Y+47, r24	; 0x2f
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <adminMode+0xff8>
	else if (__tmp > 65535)
    361a:	69 a9       	ldd	r22, Y+49	; 0x31
    361c:	7a a9       	ldd	r23, Y+50	; 0x32
    361e:	8b a9       	ldd	r24, Y+51	; 0x33
    3620:	9c a9       	ldd	r25, Y+52	; 0x34
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	3f ef       	ldi	r19, 0xFF	; 255
    3626:	4f e7       	ldi	r20, 0x7F	; 127
    3628:	57 e4       	ldi	r21, 0x47	; 71
    362a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    362e:	18 16       	cp	r1, r24
    3630:	4c f5       	brge	.+82     	; 0x3684 <adminMode+0xfe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	6d a9       	ldd	r22, Y+53	; 0x35
    3634:	7e a9       	ldd	r23, Y+54	; 0x36
    3636:	8f a9       	ldd	r24, Y+55	; 0x37
    3638:	98 ad       	ldd	r25, Y+56	; 0x38
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e2       	ldi	r20, 0x20	; 32
    3640:	51 e4       	ldi	r21, 0x41	; 65
    3642:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	98 ab       	std	Y+48, r25	; 0x30
    3658:	8f a7       	std	Y+47, r24	; 0x2f
    365a:	0f c0       	rjmp	.+30     	; 0x367a <adminMode+0xfda>
    365c:	88 ec       	ldi	r24, 0xC8	; 200
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	9e a7       	std	Y+46, r25	; 0x2e
    3662:	8d a7       	std	Y+45, r24	; 0x2d
    3664:	8d a5       	ldd	r24, Y+45	; 0x2d
    3666:	9e a5       	ldd	r25, Y+46	; 0x2e
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <adminMode+0xfc8>
    366c:	9e a7       	std	Y+46, r25	; 0x2e
    366e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3670:	8f a5       	ldd	r24, Y+47	; 0x2f
    3672:	98 a9       	ldd	r25, Y+48	; 0x30
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	98 ab       	std	Y+48, r25	; 0x30
    3678:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367a:	8f a5       	ldd	r24, Y+47	; 0x2f
    367c:	98 a9       	ldd	r25, Y+48	; 0x30
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	69 f7       	brne	.-38     	; 0x365c <adminMode+0xfbc>
    3682:	14 c0       	rjmp	.+40     	; 0x36ac <adminMode+0x100c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	69 a9       	ldd	r22, Y+49	; 0x31
    3686:	7a a9       	ldd	r23, Y+50	; 0x32
    3688:	8b a9       	ldd	r24, Y+51	; 0x33
    368a:	9c a9       	ldd	r25, Y+52	; 0x34
    368c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	98 ab       	std	Y+48, r25	; 0x30
    3696:	8f a7       	std	Y+47, r24	; 0x2f
    3698:	8f a5       	ldd	r24, Y+47	; 0x2f
    369a:	98 a9       	ldd	r25, Y+48	; 0x30
    369c:	9c a7       	std	Y+44, r25	; 0x2c
    369e:	8b a7       	std	Y+43, r24	; 0x2b
    36a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    36a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <adminMode+0x1004>
    36a8:	9c a7       	std	Y+44, r25	; 0x2c
    36aa:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					if(key==1){
    36ac:	fe 01       	movw	r30, r28
    36ae:	e7 55       	subi	r30, 0x57	; 87
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	80 81       	ld	r24, Z
    36b4:	81 30       	cpi	r24, 0x01	; 1
    36b6:	21 f4       	brne	.+8      	; 0x36c0 <adminMode+0x1020>
						UART_sendByte(ON);
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    36be:	10 c2       	rjmp	.+1056   	; 0x3ae0 <adminMode+0x1440>
					}else if(key==2){
    36c0:	fe 01       	movw	r30, r28
    36c2:	e7 55       	subi	r30, 0x57	; 87
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	82 30       	cpi	r24, 0x02	; 2
    36ca:	21 f4       	brne	.+8      	; 0x36d4 <adminMode+0x1034>
						UART_sendByte(OFF);
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    36d2:	06 c2       	rjmp	.+1036   	; 0x3ae0 <adminMode+0x1440>

					}else if(key==0){
    36d4:	fe 01       	movw	r30, r28
    36d6:	e7 55       	subi	r30, 0x57	; 87
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 81       	ld	r24, Z
    36dc:	88 23       	and	r24, r24
    36de:	09 f0       	breq	.+2      	; 0x36e2 <adminMode+0x1042>
    36e0:	ff c1       	rjmp	.+1022   	; 0x3ae0 <adminMode+0x1440>
						UART_sendByte(RET);
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
						ret=1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	80 93 84 03 	sts	0x0384, r24
    36ee:	f8 c1       	rjmp	.+1008   	; 0x3ae0 <adminMode+0x1440>

					}
					break;
				case 3:

					UART_sendByte(COND);
    36f0:	86 e0       	ldi	r24, 0x06	; 6
    36f2:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
					LCD_clearScreen();
    36f6:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
					LCD_displayString("1:Set Temperature");
    36fa:	84 e1       	ldi	r24, 0x14	; 20
    36fc:	92 e0       	ldi	r25, 0x02	; 2
    36fe:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
					LCD_moveCursor(1,0);
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
					LCD_displayString("2:Control 3:RET");
    370a:	86 e2       	ldi	r24, 0x26	; 38
    370c:	92 e0       	ldi	r25, 0x02	; 2
    370e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
					key=KEYPAD_getPressedKey();
    3712:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    3716:	fe 01       	movw	r30, r28
    3718:	e7 55       	subi	r30, 0x57	; 87
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 83       	st	Z, r24
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	aa ef       	ldi	r26, 0xFA	; 250
    3724:	b3 e4       	ldi	r27, 0x43	; 67
    3726:	8f a3       	std	Y+39, r24	; 0x27
    3728:	98 a7       	std	Y+40, r25	; 0x28
    372a:	a9 a7       	std	Y+41, r26	; 0x29
    372c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372e:	6f a1       	ldd	r22, Y+39	; 0x27
    3730:	78 a5       	ldd	r23, Y+40	; 0x28
    3732:	89 a5       	ldd	r24, Y+41	; 0x29
    3734:	9a a5       	ldd	r25, Y+42	; 0x2a
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	4a ef       	ldi	r20, 0xFA	; 250
    373c:	54 e4       	ldi	r21, 0x44	; 68
    373e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	8b a3       	std	Y+35, r24	; 0x23
    3748:	9c a3       	std	Y+36, r25	; 0x24
    374a:	ad a3       	std	Y+37, r26	; 0x25
    374c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    374e:	6b a1       	ldd	r22, Y+35	; 0x23
    3750:	7c a1       	ldd	r23, Y+36	; 0x24
    3752:	8d a1       	ldd	r24, Y+37	; 0x25
    3754:	9e a1       	ldd	r25, Y+38	; 0x26
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e8       	ldi	r20, 0x80	; 128
    375c:	5f e3       	ldi	r21, 0x3F	; 63
    375e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3762:	88 23       	and	r24, r24
    3764:	2c f4       	brge	.+10     	; 0x3770 <adminMode+0x10d0>
		__ticks = 1;
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	9a a3       	std	Y+34, r25	; 0x22
    376c:	89 a3       	std	Y+33, r24	; 0x21
    376e:	3f c0       	rjmp	.+126    	; 0x37ee <adminMode+0x114e>
	else if (__tmp > 65535)
    3770:	6b a1       	ldd	r22, Y+35	; 0x23
    3772:	7c a1       	ldd	r23, Y+36	; 0x24
    3774:	8d a1       	ldd	r24, Y+37	; 0x25
    3776:	9e a1       	ldd	r25, Y+38	; 0x26
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	3f ef       	ldi	r19, 0xFF	; 255
    377c:	4f e7       	ldi	r20, 0x7F	; 127
    377e:	57 e4       	ldi	r21, 0x47	; 71
    3780:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    3784:	18 16       	cp	r1, r24
    3786:	4c f5       	brge	.+82     	; 0x37da <adminMode+0x113a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3788:	6f a1       	ldd	r22, Y+39	; 0x27
    378a:	78 a5       	ldd	r23, Y+40	; 0x28
    378c:	89 a5       	ldd	r24, Y+41	; 0x29
    378e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e2       	ldi	r20, 0x20	; 32
    3796:	51 e4       	ldi	r21, 0x41	; 65
    3798:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	bc 01       	movw	r22, r24
    37a2:	cd 01       	movw	r24, r26
    37a4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9a a3       	std	Y+34, r25	; 0x22
    37ae:	89 a3       	std	Y+33, r24	; 0x21
    37b0:	0f c0       	rjmp	.+30     	; 0x37d0 <adminMode+0x1130>
    37b2:	88 ec       	ldi	r24, 0xC8	; 200
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	98 a3       	std	Y+32, r25	; 0x20
    37b8:	8f 8f       	std	Y+31, r24	; 0x1f
    37ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37bc:	98 a1       	ldd	r25, Y+32	; 0x20
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	f1 f7       	brne	.-4      	; 0x37be <adminMode+0x111e>
    37c2:	98 a3       	std	Y+32, r25	; 0x20
    37c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c6:	89 a1       	ldd	r24, Y+33	; 0x21
    37c8:	9a a1       	ldd	r25, Y+34	; 0x22
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	9a a3       	std	Y+34, r25	; 0x22
    37ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d0:	89 a1       	ldd	r24, Y+33	; 0x21
    37d2:	9a a1       	ldd	r25, Y+34	; 0x22
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	69 f7       	brne	.-38     	; 0x37b2 <adminMode+0x1112>
    37d8:	14 c0       	rjmp	.+40     	; 0x3802 <adminMode+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37da:	6b a1       	ldd	r22, Y+35	; 0x23
    37dc:	7c a1       	ldd	r23, Y+36	; 0x24
    37de:	8d a1       	ldd	r24, Y+37	; 0x25
    37e0:	9e a1       	ldd	r25, Y+38	; 0x26
    37e2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	9a a3       	std	Y+34, r25	; 0x22
    37ec:	89 a3       	std	Y+33, r24	; 0x21
    37ee:	89 a1       	ldd	r24, Y+33	; 0x21
    37f0:	9a a1       	ldd	r25, Y+34	; 0x22
    37f2:	9e 8f       	std	Y+30, r25	; 0x1e
    37f4:	8d 8f       	std	Y+29, r24	; 0x1d
    37f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <adminMode+0x115a>
    37fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3800:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
					switch(key){
    3802:	fe 01       	movw	r30, r28
    3804:	e7 55       	subi	r30, 0x57	; 87
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	80 81       	ld	r24, Z
    380a:	28 2f       	mov	r18, r24
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	c4 55       	subi	r28, 0x54	; 84
    3810:	df 4f       	sbci	r29, 0xFF	; 255
    3812:	39 83       	std	Y+1, r19	; 0x01
    3814:	28 83       	st	Y, r18
    3816:	cc 5a       	subi	r28, 0xAC	; 172
    3818:	d0 40       	sbci	r29, 0x00	; 0
    381a:	c4 55       	subi	r28, 0x54	; 84
    381c:	df 4f       	sbci	r29, 0xFF	; 255
    381e:	88 81       	ld	r24, Y
    3820:	99 81       	ldd	r25, Y+1	; 0x01
    3822:	cc 5a       	subi	r28, 0xAC	; 172
    3824:	d0 40       	sbci	r29, 0x00	; 0
    3826:	81 30       	cpi	r24, 0x01	; 1
    3828:	91 05       	cpc	r25, r1
    382a:	59 f0       	breq	.+22     	; 0x3842 <adminMode+0x11a2>
    382c:	c4 55       	subi	r28, 0x54	; 84
    382e:	df 4f       	sbci	r29, 0xFF	; 255
    3830:	e8 81       	ld	r30, Y
    3832:	f9 81       	ldd	r31, Y+1	; 0x01
    3834:	cc 5a       	subi	r28, 0xAC	; 172
    3836:	d0 40       	sbci	r29, 0x00	; 0
    3838:	e2 30       	cpi	r30, 0x02	; 2
    383a:	f1 05       	cpc	r31, r1
    383c:	09 f4       	brne	.+2      	; 0x3840 <adminMode+0x11a0>
    383e:	96 c0       	rjmp	.+300    	; 0x396c <adminMode+0x12cc>
    3840:	4f c1       	rjmp	.+670    	; 0x3ae0 <adminMode+0x1440>
					case 1:
						UART_sendByte(SET_TEMP);
    3842:	88 e0       	ldi	r24, 0x08	; 8
    3844:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
						temp=UART_recieveByte();
    3848:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    384c:	80 93 8b 03 	sts	0x038B, r24
						LCD_clearScreen();
    3850:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
						LCD_displayString("TEMP= ");
    3854:	86 e3       	ldi	r24, 0x36	; 54
    3856:	92 e0       	ldi	r25, 0x02	; 2
    3858:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
						LCD_intgerToString(temp);
    385c:	80 91 8b 03 	lds	r24, 0x038B
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 9d 2c 	call	0x593a	; 0x593a <LCD_intgerToString>
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	aa ef       	ldi	r26, 0xFA	; 250
    386e:	b3 e4       	ldi	r27, 0x43	; 67
    3870:	89 8f       	std	Y+25, r24	; 0x19
    3872:	9a 8f       	std	Y+26, r25	; 0x1a
    3874:	ab 8f       	std	Y+27, r26	; 0x1b
    3876:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3878:	69 8d       	ldd	r22, Y+25	; 0x19
    387a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    387c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    387e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	4a ef       	ldi	r20, 0xFA	; 250
    3886:	54 e4       	ldi	r21, 0x44	; 68
    3888:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	8d 8b       	std	Y+21, r24	; 0x15
    3892:	9e 8b       	std	Y+22, r25	; 0x16
    3894:	af 8b       	std	Y+23, r26	; 0x17
    3896:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3898:	6d 89       	ldd	r22, Y+21	; 0x15
    389a:	7e 89       	ldd	r23, Y+22	; 0x16
    389c:	8f 89       	ldd	r24, Y+23	; 0x17
    389e:	98 8d       	ldd	r25, Y+24	; 0x18
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e8       	ldi	r20, 0x80	; 128
    38a6:	5f e3       	ldi	r21, 0x3F	; 63
    38a8:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    38ac:	88 23       	and	r24, r24
    38ae:	2c f4       	brge	.+10     	; 0x38ba <adminMode+0x121a>
		__ticks = 1;
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	9c 8b       	std	Y+20, r25	; 0x14
    38b6:	8b 8b       	std	Y+19, r24	; 0x13
    38b8:	3f c0       	rjmp	.+126    	; 0x3938 <adminMode+0x1298>
	else if (__tmp > 65535)
    38ba:	6d 89       	ldd	r22, Y+21	; 0x15
    38bc:	7e 89       	ldd	r23, Y+22	; 0x16
    38be:	8f 89       	ldd	r24, Y+23	; 0x17
    38c0:	98 8d       	ldd	r25, Y+24	; 0x18
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	3f ef       	ldi	r19, 0xFF	; 255
    38c6:	4f e7       	ldi	r20, 0x7F	; 127
    38c8:	57 e4       	ldi	r21, 0x47	; 71
    38ca:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    38ce:	18 16       	cp	r1, r24
    38d0:	4c f5       	brge	.+82     	; 0x3924 <adminMode+0x1284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d2:	69 8d       	ldd	r22, Y+25	; 0x19
    38d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e2       	ldi	r20, 0x20	; 32
    38e0:	51 e4       	ldi	r21, 0x41	; 65
    38e2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	bc 01       	movw	r22, r24
    38ec:	cd 01       	movw	r24, r26
    38ee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	9c 8b       	std	Y+20, r25	; 0x14
    38f8:	8b 8b       	std	Y+19, r24	; 0x13
    38fa:	0f c0       	rjmp	.+30     	; 0x391a <adminMode+0x127a>
    38fc:	88 ec       	ldi	r24, 0xC8	; 200
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	9a 8b       	std	Y+18, r25	; 0x12
    3902:	89 8b       	std	Y+17, r24	; 0x11
    3904:	89 89       	ldd	r24, Y+17	; 0x11
    3906:	9a 89       	ldd	r25, Y+18	; 0x12
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	f1 f7       	brne	.-4      	; 0x3908 <adminMode+0x1268>
    390c:	9a 8b       	std	Y+18, r25	; 0x12
    390e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3910:	8b 89       	ldd	r24, Y+19	; 0x13
    3912:	9c 89       	ldd	r25, Y+20	; 0x14
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	9c 8b       	std	Y+20, r25	; 0x14
    3918:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    391a:	8b 89       	ldd	r24, Y+19	; 0x13
    391c:	9c 89       	ldd	r25, Y+20	; 0x14
    391e:	00 97       	sbiw	r24, 0x00	; 0
    3920:	69 f7       	brne	.-38     	; 0x38fc <adminMode+0x125c>
    3922:	14 c0       	rjmp	.+40     	; 0x394c <adminMode+0x12ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3924:	6d 89       	ldd	r22, Y+21	; 0x15
    3926:	7e 89       	ldd	r23, Y+22	; 0x16
    3928:	8f 89       	ldd	r24, Y+23	; 0x17
    392a:	98 8d       	ldd	r25, Y+24	; 0x18
    392c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	9c 8b       	std	Y+20, r25	; 0x14
    3936:	8b 8b       	std	Y+19, r24	; 0x13
    3938:	8b 89       	ldd	r24, Y+19	; 0x13
    393a:	9c 89       	ldd	r25, Y+20	; 0x14
    393c:	98 8b       	std	Y+16, r25	; 0x10
    393e:	8f 87       	std	Y+15, r24	; 0x0f
    3940:	8f 85       	ldd	r24, Y+15	; 0x0f
    3942:	98 89       	ldd	r25, Y+16	; 0x10
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	f1 f7       	brne	.-4      	; 0x3944 <adminMode+0x12a4>
    3948:	98 8b       	std	Y+16, r25	; 0x10
    394a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						if(temp>49){
    394c:	80 91 8b 03 	lds	r24, 0x038B
    3950:	82 33       	cpi	r24, 0x32	; 50
    3952:	30 f0       	brcs	.+12     	; 0x3960 <adminMode+0x12c0>
							GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
    3954:	82 e0       	ldi	r24, 0x02	; 2
    3956:	62 e0       	ldi	r22, 0x02	; 2
    3958:	41 e0       	ldi	r20, 0x01	; 1
    395a:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    395e:	c0 c0       	rjmp	.+384    	; 0x3ae0 <adminMode+0x1440>
						}else{
							GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
    3960:	82 e0       	ldi	r24, 0x02	; 2
    3962:	62 e0       	ldi	r22, 0x02	; 2
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    396a:	ba c0       	rjmp	.+372    	; 0x3ae0 <adminMode+0x1440>
						}
						break;
					case 2:
						UART_sendByte(CONTROL_AIR);
    396c:	87 e0       	ldi	r24, 0x07	; 7
    396e:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
						LCD_clearScreen();
    3972:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
						LCD_displayString("AIR S:");
    3976:	8d e3       	ldi	r24, 0x3D	; 61
    3978:	92 e0       	ldi	r25, 0x02	; 2
    397a:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
						response=UART_recieveByte();
    397e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    3982:	80 93 89 03 	sts	0x0389, r24
						if(response==OFF){
    3986:	80 91 89 03 	lds	r24, 0x0389
    398a:	81 30       	cpi	r24, 0x01	; 1
    398c:	29 f4       	brne	.+10     	; 0x3998 <adminMode+0x12f8>
							LCD_displayString("OFF");
    398e:	8e eb       	ldi	r24, 0xBE	; 190
    3990:	91 e0       	ldi	r25, 0x01	; 1
    3992:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    3996:	04 c0       	rjmp	.+8      	; 0x39a0 <adminMode+0x1300>
						}else{
							LCD_displayString("ON");
    3998:	82 ec       	ldi	r24, 0xC2	; 194
    399a:	91 e0       	ldi	r25, 0x01	; 1
    399c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

						}
						LCD_moveCursor(1,0);
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
						LCD_displayString("1-ON 2-OFF 0-RET");
    39a8:	85 ec       	ldi	r24, 0xC5	; 197
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
						key=KEYPAD_getPressedKey();
    39b0:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    39b4:	fe 01       	movw	r30, r28
    39b6:	e7 55       	subi	r30, 0x57	; 87
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	80 83       	st	Z, r24
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	aa ef       	ldi	r26, 0xFA	; 250
    39c2:	b3 e4       	ldi	r27, 0x43	; 67
    39c4:	8b 87       	std	Y+11, r24	; 0x0b
    39c6:	9c 87       	std	Y+12, r25	; 0x0c
    39c8:	ad 87       	std	Y+13, r26	; 0x0d
    39ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a ef       	ldi	r20, 0xFA	; 250
    39da:	54 e4       	ldi	r21, 0x44	; 68
    39dc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	8f 83       	std	Y+7, r24	; 0x07
    39e6:	98 87       	std	Y+8, r25	; 0x08
    39e8:	a9 87       	std	Y+9, r26	; 0x09
    39ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ec:	6f 81       	ldd	r22, Y+7	; 0x07
    39ee:	78 85       	ldd	r23, Y+8	; 0x08
    39f0:	89 85       	ldd	r24, Y+9	; 0x09
    39f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e8       	ldi	r20, 0x80	; 128
    39fa:	5f e3       	ldi	r21, 0x3F	; 63
    39fc:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3a00:	88 23       	and	r24, r24
    3a02:	2c f4       	brge	.+10     	; 0x3a0e <adminMode+0x136e>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9e 83       	std	Y+6, r25	; 0x06
    3a0a:	8d 83       	std	Y+5, r24	; 0x05
    3a0c:	3f c0       	rjmp	.+126    	; 0x3a8c <adminMode+0x13ec>
	else if (__tmp > 65535)
    3a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a10:	78 85       	ldd	r23, Y+8	; 0x08
    3a12:	89 85       	ldd	r24, Y+9	; 0x09
    3a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	4c f5       	brge	.+82     	; 0x3a78 <adminMode+0x13d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e2       	ldi	r20, 0x20	; 32
    3a34:	51 e4       	ldi	r21, 0x41	; 65
    3a36:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9e 83       	std	Y+6, r25	; 0x06
    3a4c:	8d 83       	std	Y+5, r24	; 0x05
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <adminMode+0x13ce>
    3a50:	88 ec       	ldi	r24, 0xC8	; 200
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9c 83       	std	Y+4, r25	; 0x04
    3a56:	8b 83       	std	Y+3, r24	; 0x03
    3a58:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <adminMode+0x13bc>
    3a60:	9c 83       	std	Y+4, r25	; 0x04
    3a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a64:	8d 81       	ldd	r24, Y+5	; 0x05
    3a66:	9e 81       	ldd	r25, Y+6	; 0x06
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	69 f7       	brne	.-38     	; 0x3a50 <adminMode+0x13b0>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <adminMode+0x1400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7a:	78 85       	ldd	r23, Y+8	; 0x08
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9e 83       	std	Y+6, r25	; 0x06
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <adminMode+0x13f8>
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500);
						if(key==1){
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e7 55       	subi	r30, 0x57	; 87
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	81 30       	cpi	r24, 0x01	; 1
    3aaa:	21 f4       	brne	.+8      	; 0x3ab4 <adminMode+0x1414>
							UART_sendByte(ON);
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    3ab2:	16 c0       	rjmp	.+44     	; 0x3ae0 <adminMode+0x1440>
						}else if(key==2){
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e7 55       	subi	r30, 0x57	; 87
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	80 81       	ld	r24, Z
    3abc:	82 30       	cpi	r24, 0x02	; 2
    3abe:	21 f4       	brne	.+8      	; 0x3ac8 <adminMode+0x1428>
							UART_sendByte(OFF);
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    3ac6:	0c c0       	rjmp	.+24     	; 0x3ae0 <adminMode+0x1440>

						}else if(key==0){
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e7 55       	subi	r30, 0x57	; 87
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	88 23       	and	r24, r24
    3ad2:	31 f4       	brne	.+12     	; 0x3ae0 <adminMode+0x1440>
							UART_sendByte(RET);
    3ad4:	82 e0       	ldi	r24, 0x02	; 2
    3ad6:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
							ret=1;
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	80 93 84 03 	sts	0x0384, r24
				}


			}

		}while(ret!=1);
    3ae0:	80 91 84 03 	lds	r24, 0x0384
    3ae4:	81 30       	cpi	r24, 0x01	; 1
    3ae6:	11 f0       	breq	.+4      	; 0x3aec <adminMode+0x144c>
    3ae8:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <adminMode+0x394>

	}

}
    3aec:	c1 55       	subi	r28, 0x51	; 81
    3aee:	df 4f       	sbci	r29, 0xFF	; 255
    3af0:	0f b6       	in	r0, 0x3f	; 63
    3af2:	f8 94       	cli
    3af4:	de bf       	out	0x3e, r29	; 62
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	cd bf       	out	0x3d, r28	; 61
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	1f 91       	pop	r17
    3b00:	0f 91       	pop	r16
    3b02:	08 95       	ret

00003b04 <guestMode>:
void guestMode(uint8 *password){
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	df 93       	push	r29
    3b0a:	cf 93       	push	r28
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	c5 56       	subi	r28, 0x65	; 101
    3b12:	d0 40       	sbci	r29, 0x00	; 0
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	fe 01       	movw	r30, r28
    3b20:	ec 59       	subi	r30, 0x9C	; 156
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	80 83       	st	Z, r24
	uint8 key;
	LCD_clearScreen();
    3b28:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
	LCD_displayString("Guest Mode:");
    3b2c:	84 e4       	ldi	r24, 0x44	; 68
    3b2e:	92 e0       	ldi	r25, 0x02	; 2
    3b30:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	LCD_moveCursor(1,0);
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString("Enter pass: ");
    3b3c:	81 e6       	ldi	r24, 0x61	; 97
    3b3e:	91 e0       	ldi	r25, 0x01	; 1
    3b40:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
	getPassword(password);
    3b44:	fe 01       	movw	r30, r28
    3b46:	ec 59       	subi	r30, 0x9C	; 156
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
	sendPassword(password);
    3b52:	fe 01       	movw	r30, r28
    3b54:	ec 59       	subi	r30, 0x9C	; 156
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	80 81       	ld	r24, Z
    3b5a:	91 81       	ldd	r25, Z+1	; 0x01
    3b5c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
	g_matchingCheck=UART_recieveByte();
    3b60:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    3b64:	80 93 8a 03 	sts	0x038A, r24
    3b68:	d9 c0       	rjmp	.+434    	; 0x3d1c <guestMode+0x218>
	while(g_matchingCheck!=MATCHED){
		LCD_clearScreen();
    3b6a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("password invalid!");
    3b6e:	8e e6       	ldi	r24, 0x6E	; 110
    3b70:	91 e0       	ldi	r25, 0x01	; 1
    3b72:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    3b76:	fe 01       	movw	r30, r28
    3b78:	e1 5a       	subi	r30, 0xA1	; 161
    3b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	a6 e9       	ldi	r26, 0x96	; 150
    3b82:	b3 e4       	ldi	r27, 0x43	; 67
    3b84:	80 83       	st	Z, r24
    3b86:	91 83       	std	Z+1, r25	; 0x01
    3b88:	a2 83       	std	Z+2, r26	; 0x02
    3b8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b8c:	8e 01       	movw	r16, r28
    3b8e:	05 5a       	subi	r16, 0xA5	; 165
    3b90:	1f 4f       	sbci	r17, 0xFF	; 255
    3b92:	fe 01       	movw	r30, r28
    3b94:	e1 5a       	subi	r30, 0xA1	; 161
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	4a ef       	ldi	r20, 0xFA	; 250
    3ba6:	54 e4       	ldi	r21, 0x44	; 68
    3ba8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	f8 01       	movw	r30, r16
    3bb2:	80 83       	st	Z, r24
    3bb4:	91 83       	std	Z+1, r25	; 0x01
    3bb6:	a2 83       	std	Z+2, r26	; 0x02
    3bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bba:	fe 01       	movw	r30, r28
    3bbc:	e5 5a       	subi	r30, 0xA5	; 165
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	60 81       	ld	r22, Z
    3bc2:	71 81       	ldd	r23, Z+1	; 0x01
    3bc4:	82 81       	ldd	r24, Z+2	; 0x02
    3bc6:	93 81       	ldd	r25, Z+3	; 0x03
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e8       	ldi	r20, 0x80	; 128
    3bce:	5f e3       	ldi	r21, 0x3F	; 63
    3bd0:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3bd4:	88 23       	and	r24, r24
    3bd6:	44 f4       	brge	.+16     	; 0x3be8 <guestMode+0xe4>
		__ticks = 1;
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e7 5a       	subi	r30, 0xA7	; 167
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	91 83       	std	Z+1, r25	; 0x01
    3be4:	80 83       	st	Z, r24
    3be6:	64 c0       	rjmp	.+200    	; 0x3cb0 <guestMode+0x1ac>
	else if (__tmp > 65535)
    3be8:	fe 01       	movw	r30, r28
    3bea:	e5 5a       	subi	r30, 0xA5	; 165
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	60 81       	ld	r22, Z
    3bf0:	71 81       	ldd	r23, Z+1	; 0x01
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	3f ef       	ldi	r19, 0xFF	; 255
    3bfa:	4f e7       	ldi	r20, 0x7F	; 127
    3bfc:	57 e4       	ldi	r21, 0x47	; 71
    3bfe:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    3c02:	18 16       	cp	r1, r24
    3c04:	0c f0       	brlt	.+2      	; 0x3c08 <guestMode+0x104>
    3c06:	43 c0       	rjmp	.+134    	; 0x3c8e <guestMode+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c08:	fe 01       	movw	r30, r28
    3c0a:	e1 5a       	subi	r30, 0xA1	; 161
    3c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0e:	60 81       	ld	r22, Z
    3c10:	71 81       	ldd	r23, Z+1	; 0x01
    3c12:	82 81       	ldd	r24, Z+2	; 0x02
    3c14:	93 81       	ldd	r25, Z+3	; 0x03
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e2       	ldi	r20, 0x20	; 32
    3c1c:	51 e4       	ldi	r21, 0x41	; 65
    3c1e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	8e 01       	movw	r16, r28
    3c28:	07 5a       	subi	r16, 0xA7	; 167
    3c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	f8 01       	movw	r30, r16
    3c3a:	91 83       	std	Z+1, r25	; 0x01
    3c3c:	80 83       	st	Z, r24
    3c3e:	1f c0       	rjmp	.+62     	; 0x3c7e <guestMode+0x17a>
    3c40:	fe 01       	movw	r30, r28
    3c42:	e9 5a       	subi	r30, 0xA9	; 169
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	88 ec       	ldi	r24, 0xC8	; 200
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	91 83       	std	Z+1, r25	; 0x01
    3c4c:	80 83       	st	Z, r24
    3c4e:	fe 01       	movw	r30, r28
    3c50:	e9 5a       	subi	r30, 0xA9	; 169
    3c52:	ff 4f       	sbci	r31, 0xFF	; 255
    3c54:	80 81       	ld	r24, Z
    3c56:	91 81       	ldd	r25, Z+1	; 0x01
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	f1 f7       	brne	.-4      	; 0x3c58 <guestMode+0x154>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e9 5a       	subi	r30, 0xA9	; 169
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c66:	de 01       	movw	r26, r28
    3c68:	a7 5a       	subi	r26, 0xA7	; 167
    3c6a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e7 5a       	subi	r30, 0xA7	; 167
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 81       	ld	r24, Z
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	11 96       	adiw	r26, 0x01	; 1
    3c7a:	9c 93       	st	X, r25
    3c7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e7 5a       	subi	r30, 0xA7	; 167
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	80 81       	ld	r24, Z
    3c86:	91 81       	ldd	r25, Z+1	; 0x01
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	d1 f6       	brne	.-76     	; 0x3c40 <guestMode+0x13c>
    3c8c:	27 c0       	rjmp	.+78     	; 0x3cdc <guestMode+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c8e:	8e 01       	movw	r16, r28
    3c90:	07 5a       	subi	r16, 0xA7	; 167
    3c92:	1f 4f       	sbci	r17, 0xFF	; 255
    3c94:	fe 01       	movw	r30, r28
    3c96:	e5 5a       	subi	r30, 0xA5	; 165
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	60 81       	ld	r22, Z
    3c9c:	71 81       	ldd	r23, Z+1	; 0x01
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	f8 01       	movw	r30, r16
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	80 83       	st	Z, r24
    3cb0:	de 01       	movw	r26, r28
    3cb2:	ab 5a       	subi	r26, 0xAB	; 171
    3cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e7 5a       	subi	r30, 0xA7	; 167
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	8d 93       	st	X+, r24
    3cc2:	9c 93       	st	X, r25
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	eb 5a       	subi	r30, 0xAB	; 171
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	f1 f7       	brne	.-4      	; 0x3cce <guestMode+0x1ca>
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	eb 5a       	subi	r30, 0xAB	; 171
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	91 83       	std	Z+1, r25	; 0x01
    3cda:	80 83       	st	Z, r24
		_delay_ms(300);
		LCD_clearScreen();
    3cdc:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		LCD_displayString("Guest Mode:");
    3ce0:	84 e4       	ldi	r24, 0x44	; 68
    3ce2:	92 e0       	ldi	r25, 0x02	; 2
    3ce4:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		LCD_moveCursor(1,0);
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	60 e0       	ldi	r22, 0x00	; 0
    3cec:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
		LCD_displayString("Enter pass: ");
    3cf0:	81 e6       	ldi	r24, 0x61	; 97
    3cf2:	91 e0       	ldi	r25, 0x01	; 1
    3cf4:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
		getPassword(password);
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	ec 59       	subi	r30, 0x9C	; 156
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	80 81       	ld	r24, Z
    3d00:	91 81       	ldd	r25, Z+1	; 0x01
    3d02:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <getPassword>
		sendPassword(password);
    3d06:	fe 01       	movw	r30, r28
    3d08:	ec 59       	subi	r30, 0x9C	; 156
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <sendPassword>
		g_matchingCheck=UART_recieveByte();
    3d14:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    3d18:	80 93 8a 03 	sts	0x038A, r24
	LCD_moveCursor(1,0);
	LCD_displayString("Enter pass: ");
	getPassword(password);
	sendPassword(password);
	g_matchingCheck=UART_recieveByte();
	while(g_matchingCheck!=MATCHED){
    3d1c:	80 91 8a 03 	lds	r24, 0x038A
    3d20:	88 23       	and	r24, r24
    3d22:	09 f0       	breq	.+2      	; 0x3d26 <guestMode+0x222>
    3d24:	22 cf       	rjmp	.-444    	; 0x3b6a <guestMode+0x66>
		LCD_displayString("Enter pass: ");
		getPassword(password);
		sendPassword(password);
		g_matchingCheck=UART_recieveByte();
	}
	if(g_matchingCheck==MATCHED){
    3d26:	80 91 8a 03 	lds	r24, 0x038A
    3d2a:	88 23       	and	r24, r24
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <guestMode+0x22c>
    3d2e:	56 c4       	rjmp	.+2220   	; 0x45dc <guestMode+0xad8>
		LCD_clearScreen();
    3d30:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
		disableAdminMode();
    3d34:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <disableAdminMode>
		activeGuestMode();
    3d38:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <activeGuestMode>
		LCD_displayString("You now in Guest mode");
    3d3c:	80 e5       	ldi	r24, 0x50	; 80
    3d3e:	92 e0       	ldi	r25, 0x02	; 2
    3d40:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    3d44:	fe 01       	movw	r30, r28
    3d46:	ef 5a       	subi	r30, 0xAF	; 175
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	a6 e9       	ldi	r26, 0x96	; 150
    3d50:	b3 e4       	ldi	r27, 0x43	; 67
    3d52:	80 83       	st	Z, r24
    3d54:	91 83       	std	Z+1, r25	; 0x01
    3d56:	a2 83       	std	Z+2, r26	; 0x02
    3d58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d5a:	8e 01       	movw	r16, r28
    3d5c:	03 5b       	subi	r16, 0xB3	; 179
    3d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d60:	fe 01       	movw	r30, r28
    3d62:	ef 5a       	subi	r30, 0xAF	; 175
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	60 81       	ld	r22, Z
    3d68:	71 81       	ldd	r23, Z+1	; 0x01
    3d6a:	82 81       	ldd	r24, Z+2	; 0x02
    3d6c:	93 81       	ldd	r25, Z+3	; 0x03
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	4a ef       	ldi	r20, 0xFA	; 250
    3d74:	54 e4       	ldi	r21, 0x44	; 68
    3d76:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	f8 01       	movw	r30, r16
    3d80:	80 83       	st	Z, r24
    3d82:	91 83       	std	Z+1, r25	; 0x01
    3d84:	a2 83       	std	Z+2, r26	; 0x02
    3d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 5b       	subi	r30, 0xB3	; 179
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e8       	ldi	r20, 0x80	; 128
    3d9c:	5f e3       	ldi	r21, 0x3F	; 63
    3d9e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3da2:	88 23       	and	r24, r24
    3da4:	44 f4       	brge	.+16     	; 0x3db6 <guestMode+0x2b2>
		__ticks = 1;
    3da6:	fe 01       	movw	r30, r28
    3da8:	e5 5b       	subi	r30, 0xB5	; 181
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	91 83       	std	Z+1, r25	; 0x01
    3db2:	80 83       	st	Z, r24
    3db4:	64 c0       	rjmp	.+200    	; 0x3e7e <guestMode+0x37a>
	else if (__tmp > 65535)
    3db6:	fe 01       	movw	r30, r28
    3db8:	e3 5b       	subi	r30, 0xB3	; 179
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	60 81       	ld	r22, Z
    3dbe:	71 81       	ldd	r23, Z+1	; 0x01
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	93 81       	ldd	r25, Z+3	; 0x03
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	3f ef       	ldi	r19, 0xFF	; 255
    3dc8:	4f e7       	ldi	r20, 0x7F	; 127
    3dca:	57 e4       	ldi	r21, 0x47	; 71
    3dcc:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    3dd0:	18 16       	cp	r1, r24
    3dd2:	0c f0       	brlt	.+2      	; 0x3dd6 <guestMode+0x2d2>
    3dd4:	43 c0       	rjmp	.+134    	; 0x3e5c <guestMode+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ef 5a       	subi	r30, 0xAF	; 175
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	40 e2       	ldi	r20, 0x20	; 32
    3dea:	51 e4       	ldi	r21, 0x41	; 65
    3dec:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	8e 01       	movw	r16, r28
    3df6:	05 5b       	subi	r16, 0xB5	; 181
    3df8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfa:	bc 01       	movw	r22, r24
    3dfc:	cd 01       	movw	r24, r26
    3dfe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	f8 01       	movw	r30, r16
    3e08:	91 83       	std	Z+1, r25	; 0x01
    3e0a:	80 83       	st	Z, r24
    3e0c:	1f c0       	rjmp	.+62     	; 0x3e4c <guestMode+0x348>
    3e0e:	fe 01       	movw	r30, r28
    3e10:	e7 5b       	subi	r30, 0xB7	; 183
    3e12:	ff 4f       	sbci	r31, 0xFF	; 255
    3e14:	88 ec       	ldi	r24, 0xC8	; 200
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	91 83       	std	Z+1, r25	; 0x01
    3e1a:	80 83       	st	Z, r24
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	e7 5b       	subi	r30, 0xB7	; 183
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	80 81       	ld	r24, Z
    3e24:	91 81       	ldd	r25, Z+1	; 0x01
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	f1 f7       	brne	.-4      	; 0x3e26 <guestMode+0x322>
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e7 5b       	subi	r30, 0xB7	; 183
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	91 83       	std	Z+1, r25	; 0x01
    3e32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e34:	de 01       	movw	r26, r28
    3e36:	a5 5b       	subi	r26, 0xB5	; 181
    3e38:	bf 4f       	sbci	r27, 0xFF	; 255
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e5 5b       	subi	r30, 0xB5	; 181
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	80 81       	ld	r24, Z
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	11 96       	adiw	r26, 0x01	; 1
    3e48:	9c 93       	st	X, r25
    3e4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e5 5b       	subi	r30, 0xB5	; 181
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 81       	ld	r24, Z
    3e54:	91 81       	ldd	r25, Z+1	; 0x01
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	d1 f6       	brne	.-76     	; 0x3e0e <guestMode+0x30a>
    3e5a:	27 c0       	rjmp	.+78     	; 0x3eaa <guestMode+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5c:	8e 01       	movw	r16, r28
    3e5e:	05 5b       	subi	r16, 0xB5	; 181
    3e60:	1f 4f       	sbci	r17, 0xFF	; 255
    3e62:	fe 01       	movw	r30, r28
    3e64:	e3 5b       	subi	r30, 0xB3	; 179
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	60 81       	ld	r22, Z
    3e6a:	71 81       	ldd	r23, Z+1	; 0x01
    3e6c:	82 81       	ldd	r24, Z+2	; 0x02
    3e6e:	93 81       	ldd	r25, Z+3	; 0x03
    3e70:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	f8 01       	movw	r30, r16
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
    3e7e:	de 01       	movw	r26, r28
    3e80:	a9 5b       	subi	r26, 0xB9	; 185
    3e82:	bf 4f       	sbci	r27, 0xFF	; 255
    3e84:	fe 01       	movw	r30, r28
    3e86:	e5 5b       	subi	r30, 0xB5	; 181
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	80 81       	ld	r24, Z
    3e8c:	91 81       	ldd	r25, Z+1	; 0x01
    3e8e:	8d 93       	st	X+, r24
    3e90:	9c 93       	st	X, r25
    3e92:	fe 01       	movw	r30, r28
    3e94:	e9 5b       	subi	r30, 0xB9	; 185
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	80 81       	ld	r24, Z
    3e9a:	91 81       	ldd	r25, Z+1	; 0x01
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	f1 f7       	brne	.-4      	; 0x3e9c <guestMode+0x398>
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e9 5b       	subi	r30, 0xB9	; 185
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	80 83       	st	Z, r24
		_delay_ms(300);
		LCD_clearScreen();
    3eaa:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>

		LCD_displayStringRowColumn(0,0,"1:Room1 2:Room2");
    3eae:	26 e9       	ldi	r18, 0x96	; 150
    3eb0:	31 e0       	ldi	r19, 0x01	; 1
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	60 e0       	ldi	r22, 0x00	; 0
    3eb6:	a9 01       	movw	r20, r18
    3eb8:	0e 94 84 2c 	call	0x5908	; 0x5908 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"3:Room3 4:Room4");
    3ebc:	26 e6       	ldi	r18, 0x66	; 102
    3ebe:	32 e0       	ldi	r19, 0x02	; 2
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	60 e0       	ldi	r22, 0x00	; 0
    3ec4:	a9 01       	movw	r20, r18
    3ec6:	0e 94 84 2c 	call	0x5908	; 0x5908 <LCD_displayStringRowColumn>
		key=KEYPAD_getPressedKey();
    3eca:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    3ece:	fe 01       	movw	r30, r28
    3ed0:	ed 59       	subi	r30, 0x9D	; 157
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	80 83       	st	Z, r24
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	ed 5b       	subi	r30, 0xBD	; 189
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a8 ec       	ldi	r26, 0xC8	; 200
    3ee2:	b3 e4       	ldi	r27, 0x43	; 67
    3ee4:	80 83       	st	Z, r24
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	a2 83       	std	Z+2, r26	; 0x02
    3eea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eec:	8e 01       	movw	r16, r28
    3eee:	01 5c       	subi	r16, 0xC1	; 193
    3ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	ed 5b       	subi	r30, 0xBD	; 189
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	60 81       	ld	r22, Z
    3efa:	71 81       	ldd	r23, Z+1	; 0x01
    3efc:	82 81       	ldd	r24, Z+2	; 0x02
    3efe:	93 81       	ldd	r25, Z+3	; 0x03
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	4a ef       	ldi	r20, 0xFA	; 250
    3f06:	54 e4       	ldi	r21, 0x44	; 68
    3f08:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	f8 01       	movw	r30, r16
    3f12:	80 83       	st	Z, r24
    3f14:	91 83       	std	Z+1, r25	; 0x01
    3f16:	a2 83       	std	Z+2, r26	; 0x02
    3f18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	ff 96       	adiw	r30, 0x3f	; 63
    3f1e:	60 81       	ld	r22, Z
    3f20:	71 81       	ldd	r23, Z+1	; 0x01
    3f22:	82 81       	ldd	r24, Z+2	; 0x02
    3f24:	93 81       	ldd	r25, Z+3	; 0x03
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e8       	ldi	r20, 0x80	; 128
    3f2c:	5f e3       	ldi	r21, 0x3F	; 63
    3f2e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3f32:	88 23       	and	r24, r24
    3f34:	2c f4       	brge	.+10     	; 0x3f40 <guestMode+0x43c>
		__ticks = 1;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	9e af       	std	Y+62, r25	; 0x3e
    3f3c:	8d af       	std	Y+61, r24	; 0x3d
    3f3e:	46 c0       	rjmp	.+140    	; 0x3fcc <guestMode+0x4c8>
	else if (__tmp > 65535)
    3f40:	fe 01       	movw	r30, r28
    3f42:	ff 96       	adiw	r30, 0x3f	; 63
    3f44:	60 81       	ld	r22, Z
    3f46:	71 81       	ldd	r23, Z+1	; 0x01
    3f48:	82 81       	ldd	r24, Z+2	; 0x02
    3f4a:	93 81       	ldd	r25, Z+3	; 0x03
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	3f ef       	ldi	r19, 0xFF	; 255
    3f50:	4f e7       	ldi	r20, 0x7F	; 127
    3f52:	57 e4       	ldi	r21, 0x47	; 71
    3f54:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    3f58:	18 16       	cp	r1, r24
    3f5a:	64 f5       	brge	.+88     	; 0x3fb4 <guestMode+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	ed 5b       	subi	r30, 0xBD	; 189
    3f60:	ff 4f       	sbci	r31, 0xFF	; 255
    3f62:	60 81       	ld	r22, Z
    3f64:	71 81       	ldd	r23, Z+1	; 0x01
    3f66:	82 81       	ldd	r24, Z+2	; 0x02
    3f68:	93 81       	ldd	r25, Z+3	; 0x03
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	40 e2       	ldi	r20, 0x20	; 32
    3f70:	51 e4       	ldi	r21, 0x41	; 65
    3f72:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	cd 01       	movw	r24, r26
    3f7e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	9e af       	std	Y+62, r25	; 0x3e
    3f88:	8d af       	std	Y+61, r24	; 0x3d
    3f8a:	0f c0       	rjmp	.+30     	; 0x3faa <guestMode+0x4a6>
    3f8c:	88 ec       	ldi	r24, 0xC8	; 200
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	9c af       	std	Y+60, r25	; 0x3c
    3f92:	8b af       	std	Y+59, r24	; 0x3b
    3f94:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f96:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f98:	01 97       	sbiw	r24, 0x01	; 1
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <guestMode+0x494>
    3f9c:	9c af       	std	Y+60, r25	; 0x3c
    3f9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fa2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	9e af       	std	Y+62, r25	; 0x3e
    3fa8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3faa:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fac:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fae:	00 97       	sbiw	r24, 0x00	; 0
    3fb0:	69 f7       	brne	.-38     	; 0x3f8c <guestMode+0x488>
    3fb2:	16 c0       	rjmp	.+44     	; 0x3fe0 <guestMode+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	ff 96       	adiw	r30, 0x3f	; 63
    3fb8:	60 81       	ld	r22, Z
    3fba:	71 81       	ldd	r23, Z+1	; 0x01
    3fbc:	82 81       	ldd	r24, Z+2	; 0x02
    3fbe:	93 81       	ldd	r25, Z+3	; 0x03
    3fc0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9e af       	std	Y+62, r25	; 0x3e
    3fca:	8d af       	std	Y+61, r24	; 0x3d
    3fcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fce:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fd0:	9a af       	std	Y+58, r25	; 0x3a
    3fd2:	89 af       	std	Y+57, r24	; 0x39
    3fd4:	89 ad       	ldd	r24, Y+57	; 0x39
    3fd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <guestMode+0x4d4>
    3fdc:	9a af       	std	Y+58, r25	; 0x3a
    3fde:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(400);
		if(key==1){
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	ed 59       	subi	r30, 0x9D	; 157
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	80 81       	ld	r24, Z
    3fe8:	81 30       	cpi	r24, 0x01	; 1
    3fea:	09 f0       	breq	.+2      	; 0x3fee <guestMode+0x4ea>
    3fec:	b9 c0       	rjmp	.+370    	; 0x4160 <guestMode+0x65c>
			UART_sendByte(ROOM1);
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
			LCD_clearScreen();
    3ff4:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
			LCD_displayString("ROOM1 S:");
    3ff8:	85 eb       	ldi	r24, 0xB5	; 181
    3ffa:	91 e0       	ldi	r25, 0x01	; 1
    3ffc:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			response=UART_recieveByte();
    4000:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    4004:	80 93 89 03 	sts	0x0389, r24
			if(response==OFF){
    4008:	80 91 89 03 	lds	r24, 0x0389
    400c:	81 30       	cpi	r24, 0x01	; 1
    400e:	29 f4       	brne	.+10     	; 0x401a <guestMode+0x516>
				LCD_displayString("OFF");
    4010:	8e eb       	ldi	r24, 0xBE	; 190
    4012:	91 e0       	ldi	r25, 0x01	; 1
    4014:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    4018:	04 c0       	rjmp	.+8      	; 0x4022 <guestMode+0x51e>
			}else{
				LCD_displayString("ON");
    401a:	82 ec       	ldi	r24, 0xC2	; 194
    401c:	91 e0       	ldi	r25, 0x01	; 1
    401e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

			}
			LCD_moveCursor(1,0);
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	60 e0       	ldi	r22, 0x00	; 0
    4026:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
			LCD_displayString("1-ON 2-OFF 0-RET");
    402a:	85 ec       	ldi	r24, 0xC5	; 197
    402c:	91 e0       	ldi	r25, 0x01	; 1
    402e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			key=KEYPAD_getPressedKey();
    4032:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    4036:	fe 01       	movw	r30, r28
    4038:	ed 59       	subi	r30, 0x9D	; 157
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	80 83       	st	Z, r24
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	a8 ec       	ldi	r26, 0xC8	; 200
    4044:	b3 e4       	ldi	r27, 0x43	; 67
    4046:	8d ab       	std	Y+53, r24	; 0x35
    4048:	9e ab       	std	Y+54, r25	; 0x36
    404a:	af ab       	std	Y+55, r26	; 0x37
    404c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    404e:	6d a9       	ldd	r22, Y+53	; 0x35
    4050:	7e a9       	ldd	r23, Y+54	; 0x36
    4052:	8f a9       	ldd	r24, Y+55	; 0x37
    4054:	98 ad       	ldd	r25, Y+56	; 0x38
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	4a ef       	ldi	r20, 0xFA	; 250
    405c:	54 e4       	ldi	r21, 0x44	; 68
    405e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	89 ab       	std	Y+49, r24	; 0x31
    4068:	9a ab       	std	Y+50, r25	; 0x32
    406a:	ab ab       	std	Y+51, r26	; 0x33
    406c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    406e:	69 a9       	ldd	r22, Y+49	; 0x31
    4070:	7a a9       	ldd	r23, Y+50	; 0x32
    4072:	8b a9       	ldd	r24, Y+51	; 0x33
    4074:	9c a9       	ldd	r25, Y+52	; 0x34
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e8       	ldi	r20, 0x80	; 128
    407c:	5f e3       	ldi	r21, 0x3F	; 63
    407e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    4082:	88 23       	and	r24, r24
    4084:	2c f4       	brge	.+10     	; 0x4090 <guestMode+0x58c>
		__ticks = 1;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	98 ab       	std	Y+48, r25	; 0x30
    408c:	8f a7       	std	Y+47, r24	; 0x2f
    408e:	3f c0       	rjmp	.+126    	; 0x410e <guestMode+0x60a>
	else if (__tmp > 65535)
    4090:	69 a9       	ldd	r22, Y+49	; 0x31
    4092:	7a a9       	ldd	r23, Y+50	; 0x32
    4094:	8b a9       	ldd	r24, Y+51	; 0x33
    4096:	9c a9       	ldd	r25, Y+52	; 0x34
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	3f ef       	ldi	r19, 0xFF	; 255
    409c:	4f e7       	ldi	r20, 0x7F	; 127
    409e:	57 e4       	ldi	r21, 0x47	; 71
    40a0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    40a4:	18 16       	cp	r1, r24
    40a6:	4c f5       	brge	.+82     	; 0x40fa <guestMode+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a8:	6d a9       	ldd	r22, Y+53	; 0x35
    40aa:	7e a9       	ldd	r23, Y+54	; 0x36
    40ac:	8f a9       	ldd	r24, Y+55	; 0x37
    40ae:	98 ad       	ldd	r25, Y+56	; 0x38
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e2       	ldi	r20, 0x20	; 32
    40b6:	51 e4       	ldi	r21, 0x41	; 65
    40b8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	bc 01       	movw	r22, r24
    40c2:	cd 01       	movw	r24, r26
    40c4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	98 ab       	std	Y+48, r25	; 0x30
    40ce:	8f a7       	std	Y+47, r24	; 0x2f
    40d0:	0f c0       	rjmp	.+30     	; 0x40f0 <guestMode+0x5ec>
    40d2:	88 ec       	ldi	r24, 0xC8	; 200
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	9e a7       	std	Y+46, r25	; 0x2e
    40d8:	8d a7       	std	Y+45, r24	; 0x2d
    40da:	8d a5       	ldd	r24, Y+45	; 0x2d
    40dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <guestMode+0x5da>
    40e2:	9e a7       	std	Y+46, r25	; 0x2e
    40e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e8:	98 a9       	ldd	r25, Y+48	; 0x30
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	98 ab       	std	Y+48, r25	; 0x30
    40ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    40f2:	98 a9       	ldd	r25, Y+48	; 0x30
    40f4:	00 97       	sbiw	r24, 0x00	; 0
    40f6:	69 f7       	brne	.-38     	; 0x40d2 <guestMode+0x5ce>
    40f8:	14 c0       	rjmp	.+40     	; 0x4122 <guestMode+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40fa:	69 a9       	ldd	r22, Y+49	; 0x31
    40fc:	7a a9       	ldd	r23, Y+50	; 0x32
    40fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4100:	9c a9       	ldd	r25, Y+52	; 0x34
    4102:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	98 ab       	std	Y+48, r25	; 0x30
    410c:	8f a7       	std	Y+47, r24	; 0x2f
    410e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4110:	98 a9       	ldd	r25, Y+48	; 0x30
    4112:	9c a7       	std	Y+44, r25	; 0x2c
    4114:	8b a7       	std	Y+43, r24	; 0x2b
    4116:	8b a5       	ldd	r24, Y+43	; 0x2b
    4118:	9c a5       	ldd	r25, Y+44	; 0x2c
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	f1 f7       	brne	.-4      	; 0x411a <guestMode+0x616>
    411e:	9c a7       	std	Y+44, r25	; 0x2c
    4120:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(400);
			if(key==1){
    4122:	fe 01       	movw	r30, r28
    4124:	ed 59       	subi	r30, 0x9D	; 157
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	81 30       	cpi	r24, 0x01	; 1
    412c:	21 f4       	brne	.+8      	; 0x4136 <guestMode+0x632>
				UART_sendByte(ON);
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    4134:	53 c2       	rjmp	.+1190   	; 0x45dc <guestMode+0xad8>
			}else if(key==2){
    4136:	fe 01       	movw	r30, r28
    4138:	ed 59       	subi	r30, 0x9D	; 157
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	82 30       	cpi	r24, 0x02	; 2
    4140:	21 f4       	brne	.+8      	; 0x414a <guestMode+0x646>
				UART_sendByte(OFF);
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    4148:	49 c2       	rjmp	.+1170   	; 0x45dc <guestMode+0xad8>

			}else if(key==0){
    414a:	fe 01       	movw	r30, r28
    414c:	ed 59       	subi	r30, 0x9D	; 157
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	80 81       	ld	r24, Z
    4152:	88 23       	and	r24, r24
    4154:	09 f0       	breq	.+2      	; 0x4158 <guestMode+0x654>
    4156:	42 c2       	rjmp	.+1156   	; 0x45dc <guestMode+0xad8>
				UART_sendByte(RET);
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    415e:	3e c2       	rjmp	.+1148   	; 0x45dc <guestMode+0xad8>
			}
		}else if(key==2){
    4160:	fe 01       	movw	r30, r28
    4162:	ed 59       	subi	r30, 0x9D	; 157
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	80 81       	ld	r24, Z
    4168:	82 30       	cpi	r24, 0x02	; 2
    416a:	09 f0       	breq	.+2      	; 0x416e <guestMode+0x66a>
    416c:	b9 c0       	rjmp	.+370    	; 0x42e0 <guestMode+0x7dc>
			UART_sendByte(ROOM2);
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
			LCD_clearScreen();
    4174:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
			LCD_displayString("ROOM2 S:");
    4178:	86 ed       	ldi	r24, 0xD6	; 214
    417a:	91 e0       	ldi	r25, 0x01	; 1
    417c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			response=UART_recieveByte();
    4180:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    4184:	80 93 89 03 	sts	0x0389, r24
			if(response==OFF){
    4188:	80 91 89 03 	lds	r24, 0x0389
    418c:	81 30       	cpi	r24, 0x01	; 1
    418e:	29 f4       	brne	.+10     	; 0x419a <guestMode+0x696>
				LCD_displayString("OFF");
    4190:	8e eb       	ldi	r24, 0xBE	; 190
    4192:	91 e0       	ldi	r25, 0x01	; 1
    4194:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    4198:	04 c0       	rjmp	.+8      	; 0x41a2 <guestMode+0x69e>
			}else{
				LCD_displayString("ON");
    419a:	82 ec       	ldi	r24, 0xC2	; 194
    419c:	91 e0       	ldi	r25, 0x01	; 1
    419e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

			}
			LCD_moveCursor(1,0);
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	60 e0       	ldi	r22, 0x00	; 0
    41a6:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
			LCD_displayString("1-ON 2-OFF 0-RET");
    41aa:	85 ec       	ldi	r24, 0xC5	; 197
    41ac:	91 e0       	ldi	r25, 0x01	; 1
    41ae:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			key=KEYPAD_getPressedKey();
    41b2:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    41b6:	fe 01       	movw	r30, r28
    41b8:	ed 59       	subi	r30, 0x9D	; 157
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 83       	st	Z, r24
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	a8 ec       	ldi	r26, 0xC8	; 200
    41c4:	b3 e4       	ldi	r27, 0x43	; 67
    41c6:	8f a3       	std	Y+39, r24	; 0x27
    41c8:	98 a7       	std	Y+40, r25	; 0x28
    41ca:	a9 a7       	std	Y+41, r26	; 0x29
    41cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ce:	6f a1       	ldd	r22, Y+39	; 0x27
    41d0:	78 a5       	ldd	r23, Y+40	; 0x28
    41d2:	89 a5       	ldd	r24, Y+41	; 0x29
    41d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	4a ef       	ldi	r20, 0xFA	; 250
    41dc:	54 e4       	ldi	r21, 0x44	; 68
    41de:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	8b a3       	std	Y+35, r24	; 0x23
    41e8:	9c a3       	std	Y+36, r25	; 0x24
    41ea:	ad a3       	std	Y+37, r26	; 0x25
    41ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41ee:	6b a1       	ldd	r22, Y+35	; 0x23
    41f0:	7c a1       	ldd	r23, Y+36	; 0x24
    41f2:	8d a1       	ldd	r24, Y+37	; 0x25
    41f4:	9e a1       	ldd	r25, Y+38	; 0x26
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	40 e8       	ldi	r20, 0x80	; 128
    41fc:	5f e3       	ldi	r21, 0x3F	; 63
    41fe:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    4202:	88 23       	and	r24, r24
    4204:	2c f4       	brge	.+10     	; 0x4210 <guestMode+0x70c>
		__ticks = 1;
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9a a3       	std	Y+34, r25	; 0x22
    420c:	89 a3       	std	Y+33, r24	; 0x21
    420e:	3f c0       	rjmp	.+126    	; 0x428e <guestMode+0x78a>
	else if (__tmp > 65535)
    4210:	6b a1       	ldd	r22, Y+35	; 0x23
    4212:	7c a1       	ldd	r23, Y+36	; 0x24
    4214:	8d a1       	ldd	r24, Y+37	; 0x25
    4216:	9e a1       	ldd	r25, Y+38	; 0x26
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	3f ef       	ldi	r19, 0xFF	; 255
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	57 e4       	ldi	r21, 0x47	; 71
    4220:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	4c f5       	brge	.+82     	; 0x427a <guestMode+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4228:	6f a1       	ldd	r22, Y+39	; 0x27
    422a:	78 a5       	ldd	r23, Y+40	; 0x28
    422c:	89 a5       	ldd	r24, Y+41	; 0x29
    422e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e2       	ldi	r20, 0x20	; 32
    4236:	51 e4       	ldi	r21, 0x41	; 65
    4238:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	bc 01       	movw	r22, r24
    4242:	cd 01       	movw	r24, r26
    4244:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	9a a3       	std	Y+34, r25	; 0x22
    424e:	89 a3       	std	Y+33, r24	; 0x21
    4250:	0f c0       	rjmp	.+30     	; 0x4270 <guestMode+0x76c>
    4252:	88 ec       	ldi	r24, 0xC8	; 200
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	98 a3       	std	Y+32, r25	; 0x20
    4258:	8f 8f       	std	Y+31, r24	; 0x1f
    425a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    425c:	98 a1       	ldd	r25, Y+32	; 0x20
    425e:	01 97       	sbiw	r24, 0x01	; 1
    4260:	f1 f7       	brne	.-4      	; 0x425e <guestMode+0x75a>
    4262:	98 a3       	std	Y+32, r25	; 0x20
    4264:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4266:	89 a1       	ldd	r24, Y+33	; 0x21
    4268:	9a a1       	ldd	r25, Y+34	; 0x22
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	9a a3       	std	Y+34, r25	; 0x22
    426e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4270:	89 a1       	ldd	r24, Y+33	; 0x21
    4272:	9a a1       	ldd	r25, Y+34	; 0x22
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	69 f7       	brne	.-38     	; 0x4252 <guestMode+0x74e>
    4278:	14 c0       	rjmp	.+40     	; 0x42a2 <guestMode+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427a:	6b a1       	ldd	r22, Y+35	; 0x23
    427c:	7c a1       	ldd	r23, Y+36	; 0x24
    427e:	8d a1       	ldd	r24, Y+37	; 0x25
    4280:	9e a1       	ldd	r25, Y+38	; 0x26
    4282:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	9a a3       	std	Y+34, r25	; 0x22
    428c:	89 a3       	std	Y+33, r24	; 0x21
    428e:	89 a1       	ldd	r24, Y+33	; 0x21
    4290:	9a a1       	ldd	r25, Y+34	; 0x22
    4292:	9e 8f       	std	Y+30, r25	; 0x1e
    4294:	8d 8f       	std	Y+29, r24	; 0x1d
    4296:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4298:	9e 8d       	ldd	r25, Y+30	; 0x1e
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	f1 f7       	brne	.-4      	; 0x429a <guestMode+0x796>
    429e:	9e 8f       	std	Y+30, r25	; 0x1e
    42a0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(400);
			if(key==1){
    42a2:	fe 01       	movw	r30, r28
    42a4:	ed 59       	subi	r30, 0x9D	; 157
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	80 81       	ld	r24, Z
    42aa:	81 30       	cpi	r24, 0x01	; 1
    42ac:	21 f4       	brne	.+8      	; 0x42b6 <guestMode+0x7b2>
				UART_sendByte(ON);
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    42b4:	93 c1       	rjmp	.+806    	; 0x45dc <guestMode+0xad8>
			}else if(key==2){
    42b6:	fe 01       	movw	r30, r28
    42b8:	ed 59       	subi	r30, 0x9D	; 157
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	80 81       	ld	r24, Z
    42be:	82 30       	cpi	r24, 0x02	; 2
    42c0:	21 f4       	brne	.+8      	; 0x42ca <guestMode+0x7c6>
				UART_sendByte(OFF);
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    42c8:	89 c1       	rjmp	.+786    	; 0x45dc <guestMode+0xad8>

			}else if(key==0){
    42ca:	fe 01       	movw	r30, r28
    42cc:	ed 59       	subi	r30, 0x9D	; 157
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	80 81       	ld	r24, Z
    42d2:	88 23       	and	r24, r24
    42d4:	09 f0       	breq	.+2      	; 0x42d8 <guestMode+0x7d4>
    42d6:	82 c1       	rjmp	.+772    	; 0x45dc <guestMode+0xad8>
				UART_sendByte(RET);
    42d8:	82 e0       	ldi	r24, 0x02	; 2
    42da:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    42de:	7e c1       	rjmp	.+764    	; 0x45dc <guestMode+0xad8>
			}
		}else if(key==3){
    42e0:	fe 01       	movw	r30, r28
    42e2:	ed 59       	subi	r30, 0x9D	; 157
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	80 81       	ld	r24, Z
    42e8:	83 30       	cpi	r24, 0x03	; 3
    42ea:	09 f0       	breq	.+2      	; 0x42ee <guestMode+0x7ea>
    42ec:	b9 c0       	rjmp	.+370    	; 0x4460 <guestMode+0x95c>
			UART_sendByte(ROOM3);
    42ee:	82 e0       	ldi	r24, 0x02	; 2
    42f0:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
			LCD_clearScreen();
    42f4:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
			LCD_displayString("ROOM3 S:");
    42f8:	8f ed       	ldi	r24, 0xDF	; 223
    42fa:	91 e0       	ldi	r25, 0x01	; 1
    42fc:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			response=UART_recieveByte();
    4300:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    4304:	80 93 89 03 	sts	0x0389, r24
			if(response==OFF){
    4308:	80 91 89 03 	lds	r24, 0x0389
    430c:	81 30       	cpi	r24, 0x01	; 1
    430e:	29 f4       	brne	.+10     	; 0x431a <guestMode+0x816>
				LCD_displayString("OFF");
    4310:	8e eb       	ldi	r24, 0xBE	; 190
    4312:	91 e0       	ldi	r25, 0x01	; 1
    4314:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    4318:	04 c0       	rjmp	.+8      	; 0x4322 <guestMode+0x81e>
			}else{
				LCD_displayString("ON");
    431a:	82 ec       	ldi	r24, 0xC2	; 194
    431c:	91 e0       	ldi	r25, 0x01	; 1
    431e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

			}
			LCD_moveCursor(1,0);
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	60 e0       	ldi	r22, 0x00	; 0
    4326:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
			LCD_displayString("1-ON 2-OFF 0-RET");
    432a:	85 ec       	ldi	r24, 0xC5	; 197
    432c:	91 e0       	ldi	r25, 0x01	; 1
    432e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			key=KEYPAD_getPressedKey();
    4332:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    4336:	fe 01       	movw	r30, r28
    4338:	ed 59       	subi	r30, 0x9D	; 157
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	80 83       	st	Z, r24
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	a8 ec       	ldi	r26, 0xC8	; 200
    4344:	b3 e4       	ldi	r27, 0x43	; 67
    4346:	89 8f       	std	Y+25, r24	; 0x19
    4348:	9a 8f       	std	Y+26, r25	; 0x1a
    434a:	ab 8f       	std	Y+27, r26	; 0x1b
    434c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    434e:	69 8d       	ldd	r22, Y+25	; 0x19
    4350:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	4a ef       	ldi	r20, 0xFA	; 250
    435c:	54 e4       	ldi	r21, 0x44	; 68
    435e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	8d 8b       	std	Y+21, r24	; 0x15
    4368:	9e 8b       	std	Y+22, r25	; 0x16
    436a:	af 8b       	std	Y+23, r26	; 0x17
    436c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    436e:	6d 89       	ldd	r22, Y+21	; 0x15
    4370:	7e 89       	ldd	r23, Y+22	; 0x16
    4372:	8f 89       	ldd	r24, Y+23	; 0x17
    4374:	98 8d       	ldd	r25, Y+24	; 0x18
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	40 e8       	ldi	r20, 0x80	; 128
    437c:	5f e3       	ldi	r21, 0x3F	; 63
    437e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    4382:	88 23       	and	r24, r24
    4384:	2c f4       	brge	.+10     	; 0x4390 <guestMode+0x88c>
		__ticks = 1;
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	9c 8b       	std	Y+20, r25	; 0x14
    438c:	8b 8b       	std	Y+19, r24	; 0x13
    438e:	3f c0       	rjmp	.+126    	; 0x440e <guestMode+0x90a>
	else if (__tmp > 65535)
    4390:	6d 89       	ldd	r22, Y+21	; 0x15
    4392:	7e 89       	ldd	r23, Y+22	; 0x16
    4394:	8f 89       	ldd	r24, Y+23	; 0x17
    4396:	98 8d       	ldd	r25, Y+24	; 0x18
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	3f ef       	ldi	r19, 0xFF	; 255
    439c:	4f e7       	ldi	r20, 0x7F	; 127
    439e:	57 e4       	ldi	r21, 0x47	; 71
    43a0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    43a4:	18 16       	cp	r1, r24
    43a6:	4c f5       	brge	.+82     	; 0x43fa <guestMode+0x8f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a8:	69 8d       	ldd	r22, Y+25	; 0x19
    43aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	40 e2       	ldi	r20, 0x20	; 32
    43b6:	51 e4       	ldi	r21, 0x41	; 65
    43b8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	bc 01       	movw	r22, r24
    43c2:	cd 01       	movw	r24, r26
    43c4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	9c 8b       	std	Y+20, r25	; 0x14
    43ce:	8b 8b       	std	Y+19, r24	; 0x13
    43d0:	0f c0       	rjmp	.+30     	; 0x43f0 <guestMode+0x8ec>
    43d2:	88 ec       	ldi	r24, 0xC8	; 200
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	9a 8b       	std	Y+18, r25	; 0x12
    43d8:	89 8b       	std	Y+17, r24	; 0x11
    43da:	89 89       	ldd	r24, Y+17	; 0x11
    43dc:	9a 89       	ldd	r25, Y+18	; 0x12
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	f1 f7       	brne	.-4      	; 0x43de <guestMode+0x8da>
    43e2:	9a 8b       	std	Y+18, r25	; 0x12
    43e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e6:	8b 89       	ldd	r24, Y+19	; 0x13
    43e8:	9c 89       	ldd	r25, Y+20	; 0x14
    43ea:	01 97       	sbiw	r24, 0x01	; 1
    43ec:	9c 8b       	std	Y+20, r25	; 0x14
    43ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f0:	8b 89       	ldd	r24, Y+19	; 0x13
    43f2:	9c 89       	ldd	r25, Y+20	; 0x14
    43f4:	00 97       	sbiw	r24, 0x00	; 0
    43f6:	69 f7       	brne	.-38     	; 0x43d2 <guestMode+0x8ce>
    43f8:	14 c0       	rjmp	.+40     	; 0x4422 <guestMode+0x91e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43fa:	6d 89       	ldd	r22, Y+21	; 0x15
    43fc:	7e 89       	ldd	r23, Y+22	; 0x16
    43fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4400:	98 8d       	ldd	r25, Y+24	; 0x18
    4402:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	9c 8b       	std	Y+20, r25	; 0x14
    440c:	8b 8b       	std	Y+19, r24	; 0x13
    440e:	8b 89       	ldd	r24, Y+19	; 0x13
    4410:	9c 89       	ldd	r25, Y+20	; 0x14
    4412:	98 8b       	std	Y+16, r25	; 0x10
    4414:	8f 87       	std	Y+15, r24	; 0x0f
    4416:	8f 85       	ldd	r24, Y+15	; 0x0f
    4418:	98 89       	ldd	r25, Y+16	; 0x10
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	f1 f7       	brne	.-4      	; 0x441a <guestMode+0x916>
    441e:	98 8b       	std	Y+16, r25	; 0x10
    4420:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(400);
			if(key==1){
    4422:	fe 01       	movw	r30, r28
    4424:	ed 59       	subi	r30, 0x9D	; 157
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	80 81       	ld	r24, Z
    442a:	81 30       	cpi	r24, 0x01	; 1
    442c:	21 f4       	brne	.+8      	; 0x4436 <guestMode+0x932>
				UART_sendByte(ON);
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    4434:	d3 c0       	rjmp	.+422    	; 0x45dc <guestMode+0xad8>
			}else if(key==2){
    4436:	fe 01       	movw	r30, r28
    4438:	ed 59       	subi	r30, 0x9D	; 157
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	80 81       	ld	r24, Z
    443e:	82 30       	cpi	r24, 0x02	; 2
    4440:	21 f4       	brne	.+8      	; 0x444a <guestMode+0x946>
				UART_sendByte(OFF);
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    4448:	c9 c0       	rjmp	.+402    	; 0x45dc <guestMode+0xad8>

			}else if(key==0){
    444a:	fe 01       	movw	r30, r28
    444c:	ed 59       	subi	r30, 0x9D	; 157
    444e:	ff 4f       	sbci	r31, 0xFF	; 255
    4450:	80 81       	ld	r24, Z
    4452:	88 23       	and	r24, r24
    4454:	09 f0       	breq	.+2      	; 0x4458 <guestMode+0x954>
    4456:	c2 c0       	rjmp	.+388    	; 0x45dc <guestMode+0xad8>
				UART_sendByte(RET);
    4458:	82 e0       	ldi	r24, 0x02	; 2
    445a:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    445e:	be c0       	rjmp	.+380    	; 0x45dc <guestMode+0xad8>
			}
		}else if(key==4){
    4460:	fe 01       	movw	r30, r28
    4462:	ed 59       	subi	r30, 0x9D	; 157
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	80 81       	ld	r24, Z
    4468:	84 30       	cpi	r24, 0x04	; 4
    446a:	09 f0       	breq	.+2      	; 0x446e <guestMode+0x96a>
    446c:	b7 c0       	rjmp	.+366    	; 0x45dc <guestMode+0xad8>

			UART_sendByte(ROOM4);
    446e:	83 e0       	ldi	r24, 0x03	; 3
    4470:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
			LCD_clearScreen();
    4474:	0e 94 c0 2c 	call	0x5980	; 0x5980 <LCD_clearScreen>
			LCD_displayString("ROOM4 S:");
    4478:	85 e0       	ldi	r24, 0x05	; 5
    447a:	92 e0       	ldi	r25, 0x02	; 2
    447c:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			response=UART_recieveByte();
    4480:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    4484:	80 93 89 03 	sts	0x0389, r24
			if(response==OFF){
    4488:	80 91 89 03 	lds	r24, 0x0389
    448c:	81 30       	cpi	r24, 0x01	; 1
    448e:	29 f4       	brne	.+10     	; 0x449a <guestMode+0x996>
				LCD_displayString("OFF");
    4490:	8e eb       	ldi	r24, 0xBE	; 190
    4492:	91 e0       	ldi	r25, 0x01	; 1
    4494:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
    4498:	04 c0       	rjmp	.+8      	; 0x44a2 <guestMode+0x99e>
			}else{
				LCD_displayString("ON");
    449a:	82 ec       	ldi	r24, 0xC2	; 194
    449c:	91 e0       	ldi	r25, 0x01	; 1
    449e:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>

			}
			LCD_moveCursor(1,0);
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
			LCD_displayString("1-ON 2-OFF 0-RET");
    44aa:	85 ec       	ldi	r24, 0xC5	; 197
    44ac:	91 e0       	ldi	r25, 0x01	; 1
    44ae:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
			key=KEYPAD_getPressedKey();
    44b2:	0e 94 89 26 	call	0x4d12	; 0x4d12 <KEYPAD_getPressedKey>
    44b6:	fe 01       	movw	r30, r28
    44b8:	ed 59       	subi	r30, 0x9D	; 157
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 83       	st	Z, r24
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	aa ef       	ldi	r26, 0xFA	; 250
    44c4:	b3 e4       	ldi	r27, 0x43	; 67
    44c6:	8b 87       	std	Y+11, r24	; 0x0b
    44c8:	9c 87       	std	Y+12, r25	; 0x0c
    44ca:	ad 87       	std	Y+13, r26	; 0x0d
    44cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    44d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	4a ef       	ldi	r20, 0xFA	; 250
    44dc:	54 e4       	ldi	r21, 0x44	; 68
    44de:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    44e2:	dc 01       	movw	r26, r24
    44e4:	cb 01       	movw	r24, r22
    44e6:	8f 83       	std	Y+7, r24	; 0x07
    44e8:	98 87       	std	Y+8, r25	; 0x08
    44ea:	a9 87       	std	Y+9, r26	; 0x09
    44ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ee:	6f 81       	ldd	r22, Y+7	; 0x07
    44f0:	78 85       	ldd	r23, Y+8	; 0x08
    44f2:	89 85       	ldd	r24, Y+9	; 0x09
    44f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	40 e8       	ldi	r20, 0x80	; 128
    44fc:	5f e3       	ldi	r21, 0x3F	; 63
    44fe:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    4502:	88 23       	and	r24, r24
    4504:	2c f4       	brge	.+10     	; 0x4510 <guestMode+0xa0c>
		__ticks = 1;
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	9e 83       	std	Y+6, r25	; 0x06
    450c:	8d 83       	std	Y+5, r24	; 0x05
    450e:	3f c0       	rjmp	.+126    	; 0x458e <guestMode+0xa8a>
	else if (__tmp > 65535)
    4510:	6f 81       	ldd	r22, Y+7	; 0x07
    4512:	78 85       	ldd	r23, Y+8	; 0x08
    4514:	89 85       	ldd	r24, Y+9	; 0x09
    4516:	9a 85       	ldd	r25, Y+10	; 0x0a
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	3f ef       	ldi	r19, 0xFF	; 255
    451c:	4f e7       	ldi	r20, 0x7F	; 127
    451e:	57 e4       	ldi	r21, 0x47	; 71
    4520:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    4524:	18 16       	cp	r1, r24
    4526:	4c f5       	brge	.+82     	; 0x457a <guestMode+0xa76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4528:	6b 85       	ldd	r22, Y+11	; 0x0b
    452a:	7c 85       	ldd	r23, Y+12	; 0x0c
    452c:	8d 85       	ldd	r24, Y+13	; 0x0d
    452e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	40 e2       	ldi	r20, 0x20	; 32
    4536:	51 e4       	ldi	r21, 0x41	; 65
    4538:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	bc 01       	movw	r22, r24
    4542:	cd 01       	movw	r24, r26
    4544:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	9e 83       	std	Y+6, r25	; 0x06
    454e:	8d 83       	std	Y+5, r24	; 0x05
    4550:	0f c0       	rjmp	.+30     	; 0x4570 <guestMode+0xa6c>
    4552:	88 ec       	ldi	r24, 0xC8	; 200
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	9c 83       	std	Y+4, r25	; 0x04
    4558:	8b 83       	std	Y+3, r24	; 0x03
    455a:	8b 81       	ldd	r24, Y+3	; 0x03
    455c:	9c 81       	ldd	r25, Y+4	; 0x04
    455e:	01 97       	sbiw	r24, 0x01	; 1
    4560:	f1 f7       	brne	.-4      	; 0x455e <guestMode+0xa5a>
    4562:	9c 83       	std	Y+4, r25	; 0x04
    4564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4566:	8d 81       	ldd	r24, Y+5	; 0x05
    4568:	9e 81       	ldd	r25, Y+6	; 0x06
    456a:	01 97       	sbiw	r24, 0x01	; 1
    456c:	9e 83       	std	Y+6, r25	; 0x06
    456e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4570:	8d 81       	ldd	r24, Y+5	; 0x05
    4572:	9e 81       	ldd	r25, Y+6	; 0x06
    4574:	00 97       	sbiw	r24, 0x00	; 0
    4576:	69 f7       	brne	.-38     	; 0x4552 <guestMode+0xa4e>
    4578:	14 c0       	rjmp	.+40     	; 0x45a2 <guestMode+0xa9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    457a:	6f 81       	ldd	r22, Y+7	; 0x07
    457c:	78 85       	ldd	r23, Y+8	; 0x08
    457e:	89 85       	ldd	r24, Y+9	; 0x09
    4580:	9a 85       	ldd	r25, Y+10	; 0x0a
    4582:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	9e 83       	std	Y+6, r25	; 0x06
    458c:	8d 83       	std	Y+5, r24	; 0x05
    458e:	8d 81       	ldd	r24, Y+5	; 0x05
    4590:	9e 81       	ldd	r25, Y+6	; 0x06
    4592:	9a 83       	std	Y+2, r25	; 0x02
    4594:	89 83       	std	Y+1, r24	; 0x01
    4596:	89 81       	ldd	r24, Y+1	; 0x01
    4598:	9a 81       	ldd	r25, Y+2	; 0x02
    459a:	01 97       	sbiw	r24, 0x01	; 1
    459c:	f1 f7       	brne	.-4      	; 0x459a <guestMode+0xa96>
    459e:	9a 83       	std	Y+2, r25	; 0x02
    45a0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			if(key==1){
    45a2:	fe 01       	movw	r30, r28
    45a4:	ed 59       	subi	r30, 0x9D	; 157
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	80 81       	ld	r24, Z
    45aa:	81 30       	cpi	r24, 0x01	; 1
    45ac:	21 f4       	brne	.+8      	; 0x45b6 <guestMode+0xab2>
				UART_sendByte(ON);
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    45b4:	13 c0       	rjmp	.+38     	; 0x45dc <guestMode+0xad8>
			}else if(key==2){
    45b6:	fe 01       	movw	r30, r28
    45b8:	ed 59       	subi	r30, 0x9D	; 157
    45ba:	ff 4f       	sbci	r31, 0xFF	; 255
    45bc:	80 81       	ld	r24, Z
    45be:	82 30       	cpi	r24, 0x02	; 2
    45c0:	21 f4       	brne	.+8      	; 0x45ca <guestMode+0xac6>
				UART_sendByte(OFF);
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
    45c8:	09 c0       	rjmp	.+18     	; 0x45dc <guestMode+0xad8>

			}else if(key==0){
    45ca:	fe 01       	movw	r30, r28
    45cc:	ed 59       	subi	r30, 0x9D	; 157
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	80 81       	ld	r24, Z
    45d2:	88 23       	and	r24, r24
    45d4:	19 f4       	brne	.+6      	; 0x45dc <guestMode+0xad8>
				UART_sendByte(RET);
    45d6:	82 e0       	ldi	r24, 0x02	; 2
    45d8:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>

		}
	}


}
    45dc:	cb 59       	subi	r28, 0x9B	; 155
    45de:	df 4f       	sbci	r29, 0xFF	; 255
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	f8 94       	cli
    45e4:	de bf       	out	0x3e, r29	; 62
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	cd bf       	out	0x3d, r28	; 61
    45ea:	cf 91       	pop	r28
    45ec:	df 91       	pop	r29
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	08 95       	ret

000045f4 <delaySeconds>:


void delaySeconds(uint8 sec)
{
    45f4:	df 93       	push	r29
    45f6:	cf 93       	push	r28
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
    45fc:	2c 97       	sbiw	r28, 0x0c	; 12
    45fe:	0f b6       	in	r0, 0x3f	; 63
    4600:	f8 94       	cli
    4602:	de bf       	out	0x3e, r29	; 62
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	cd bf       	out	0x3d, r28	; 61
    4608:	8f 83       	std	Y+7, r24	; 0x07
	/* setting the callBack function to count seconds */
	Timer1_setCallBack(countSec);
    460a:	8f e3       	ldi	r24, 0x3F	; 63
    460c:	93 e2       	ldi	r25, 0x23	; 35
    460e:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <Timer1_setCallBack>

	/* timer1 configurations to count sec per interrupt */
	Timer1_ConfigType timer1Config = {0,31250,F_CPU_256,CTC};
    4612:	ce 01       	movw	r24, r28
    4614:	01 96       	adiw	r24, 0x01	; 1
    4616:	99 87       	std	Y+9, r25	; 0x09
    4618:	88 87       	std	Y+8, r24	; 0x08
    461a:	ee e7       	ldi	r30, 0x7E	; 126
    461c:	f3 e0       	ldi	r31, 0x03	; 3
    461e:	fb 87       	std	Y+11, r31	; 0x0b
    4620:	ea 87       	std	Y+10, r30	; 0x0a
    4622:	f6 e0       	ldi	r31, 0x06	; 6
    4624:	fc 87       	std	Y+12, r31	; 0x0c
    4626:	ea 85       	ldd	r30, Y+10	; 0x0a
    4628:	fb 85       	ldd	r31, Y+11	; 0x0b
    462a:	00 80       	ld	r0, Z
    462c:	8a 85       	ldd	r24, Y+10	; 0x0a
    462e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4630:	01 96       	adiw	r24, 0x01	; 1
    4632:	9b 87       	std	Y+11, r25	; 0x0b
    4634:	8a 87       	std	Y+10, r24	; 0x0a
    4636:	e8 85       	ldd	r30, Y+8	; 0x08
    4638:	f9 85       	ldd	r31, Y+9	; 0x09
    463a:	00 82       	st	Z, r0
    463c:	88 85       	ldd	r24, Y+8	; 0x08
    463e:	99 85       	ldd	r25, Y+9	; 0x09
    4640:	01 96       	adiw	r24, 0x01	; 1
    4642:	99 87       	std	Y+9, r25	; 0x09
    4644:	88 87       	std	Y+8, r24	; 0x08
    4646:	9c 85       	ldd	r25, Y+12	; 0x0c
    4648:	91 50       	subi	r25, 0x01	; 1
    464a:	9c 87       	std	Y+12, r25	; 0x0c
    464c:	ec 85       	ldd	r30, Y+12	; 0x0c
    464e:	ee 23       	and	r30, r30
    4650:	51 f7       	brne	.-44     	; 0x4626 <delaySeconds+0x32>

	Timer1_init(&timer1Config);
    4652:	ce 01       	movw	r24, r28
    4654:	01 96       	adiw	r24, 0x01	; 1
    4656:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <Timer1_init>

	while(g_seconds < sec){}
    465a:	90 91 8c 03 	lds	r25, 0x038C
    465e:	8f 81       	ldd	r24, Y+7	; 0x07
    4660:	98 17       	cp	r25, r24
    4662:	d8 f3       	brcs	.-10     	; 0x465a <delaySeconds+0x66>
	g_seconds = 0;
    4664:	10 92 8c 03 	sts	0x038C, r1

	Timer1_deInit();
    4668:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <Timer1_deInit>
}
    466c:	2c 96       	adiw	r28, 0x0c	; 12
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	f8 94       	cli
    4672:	de bf       	out	0x3e, r29	; 62
    4674:	0f be       	out	0x3f, r0	; 63
    4676:	cd bf       	out	0x3d, r28	; 61
    4678:	cf 91       	pop	r28
    467a:	df 91       	pop	r29
    467c:	08 95       	ret

0000467e <countSec>:
void countSec(void)
{
    467e:	df 93       	push	r29
    4680:	cf 93       	push	r28
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    4686:	80 91 8c 03 	lds	r24, 0x038C
    468a:	8f 5f       	subi	r24, 0xFF	; 255
    468c:	80 93 8c 03 	sts	0x038C, r24
}
    4690:	cf 91       	pop	r28
    4692:	df 91       	pop	r29
    4694:	08 95       	ret

00004696 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    4696:	df 93       	push	r29
    4698:	cf 93       	push	r28
    469a:	00 d0       	rcall	.+0      	; 0x469c <GPIO_setupPinDirection+0x6>
    469c:	00 d0       	rcall	.+0      	; 0x469e <GPIO_setupPinDirection+0x8>
    469e:	0f 92       	push	r0
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	89 83       	std	Y+1, r24	; 0x01
    46a6:	6a 83       	std	Y+2, r22	; 0x02
    46a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    46aa:	8a 81       	ldd	r24, Y+2	; 0x02
    46ac:	88 30       	cpi	r24, 0x08	; 8
    46ae:	08 f0       	brcs	.+2      	; 0x46b2 <GPIO_setupPinDirection+0x1c>
    46b0:	d5 c0       	rjmp	.+426    	; 0x485c <GPIO_setupPinDirection+0x1c6>
    46b2:	89 81       	ldd	r24, Y+1	; 0x01
    46b4:	84 30       	cpi	r24, 0x04	; 4
    46b6:	08 f0       	brcs	.+2      	; 0x46ba <GPIO_setupPinDirection+0x24>
    46b8:	d1 c0       	rjmp	.+418    	; 0x485c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    46ba:	89 81       	ldd	r24, Y+1	; 0x01
    46bc:	28 2f       	mov	r18, r24
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	3d 83       	std	Y+5, r19	; 0x05
    46c2:	2c 83       	std	Y+4, r18	; 0x04
    46c4:	8c 81       	ldd	r24, Y+4	; 0x04
    46c6:	9d 81       	ldd	r25, Y+5	; 0x05
    46c8:	81 30       	cpi	r24, 0x01	; 1
    46ca:	91 05       	cpc	r25, r1
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <GPIO_setupPinDirection+0x3a>
    46ce:	43 c0       	rjmp	.+134    	; 0x4756 <GPIO_setupPinDirection+0xc0>
    46d0:	2c 81       	ldd	r18, Y+4	; 0x04
    46d2:	3d 81       	ldd	r19, Y+5	; 0x05
    46d4:	22 30       	cpi	r18, 0x02	; 2
    46d6:	31 05       	cpc	r19, r1
    46d8:	2c f4       	brge	.+10     	; 0x46e4 <GPIO_setupPinDirection+0x4e>
    46da:	8c 81       	ldd	r24, Y+4	; 0x04
    46dc:	9d 81       	ldd	r25, Y+5	; 0x05
    46de:	00 97       	sbiw	r24, 0x00	; 0
    46e0:	71 f0       	breq	.+28     	; 0x46fe <GPIO_setupPinDirection+0x68>
    46e2:	bc c0       	rjmp	.+376    	; 0x485c <GPIO_setupPinDirection+0x1c6>
    46e4:	2c 81       	ldd	r18, Y+4	; 0x04
    46e6:	3d 81       	ldd	r19, Y+5	; 0x05
    46e8:	22 30       	cpi	r18, 0x02	; 2
    46ea:	31 05       	cpc	r19, r1
    46ec:	09 f4       	brne	.+2      	; 0x46f0 <GPIO_setupPinDirection+0x5a>
    46ee:	5f c0       	rjmp	.+190    	; 0x47ae <GPIO_setupPinDirection+0x118>
    46f0:	8c 81       	ldd	r24, Y+4	; 0x04
    46f2:	9d 81       	ldd	r25, Y+5	; 0x05
    46f4:	83 30       	cpi	r24, 0x03	; 3
    46f6:	91 05       	cpc	r25, r1
    46f8:	09 f4       	brne	.+2      	; 0x46fc <GPIO_setupPinDirection+0x66>
    46fa:	85 c0       	rjmp	.+266    	; 0x4806 <GPIO_setupPinDirection+0x170>
    46fc:	af c0       	rjmp	.+350    	; 0x485c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    46fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4700:	81 30       	cpi	r24, 0x01	; 1
    4702:	a1 f4       	brne	.+40     	; 0x472c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    4704:	aa e3       	ldi	r26, 0x3A	; 58
    4706:	b0 e0       	ldi	r27, 0x00	; 0
    4708:	ea e3       	ldi	r30, 0x3A	; 58
    470a:	f0 e0       	ldi	r31, 0x00	; 0
    470c:	80 81       	ld	r24, Z
    470e:	48 2f       	mov	r20, r24
    4710:	8a 81       	ldd	r24, Y+2	; 0x02
    4712:	28 2f       	mov	r18, r24
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	02 2e       	mov	r0, r18
    471c:	02 c0       	rjmp	.+4      	; 0x4722 <GPIO_setupPinDirection+0x8c>
    471e:	88 0f       	add	r24, r24
    4720:	99 1f       	adc	r25, r25
    4722:	0a 94       	dec	r0
    4724:	e2 f7       	brpl	.-8      	; 0x471e <GPIO_setupPinDirection+0x88>
    4726:	84 2b       	or	r24, r20
    4728:	8c 93       	st	X, r24
    472a:	98 c0       	rjmp	.+304    	; 0x485c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    472c:	aa e3       	ldi	r26, 0x3A	; 58
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	ea e3       	ldi	r30, 0x3A	; 58
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	80 81       	ld	r24, Z
    4736:	48 2f       	mov	r20, r24
    4738:	8a 81       	ldd	r24, Y+2	; 0x02
    473a:	28 2f       	mov	r18, r24
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	02 2e       	mov	r0, r18
    4744:	02 c0       	rjmp	.+4      	; 0x474a <GPIO_setupPinDirection+0xb4>
    4746:	88 0f       	add	r24, r24
    4748:	99 1f       	adc	r25, r25
    474a:	0a 94       	dec	r0
    474c:	e2 f7       	brpl	.-8      	; 0x4746 <GPIO_setupPinDirection+0xb0>
    474e:	80 95       	com	r24
    4750:	84 23       	and	r24, r20
    4752:	8c 93       	st	X, r24
    4754:	83 c0       	rjmp	.+262    	; 0x485c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    4756:	8b 81       	ldd	r24, Y+3	; 0x03
    4758:	81 30       	cpi	r24, 0x01	; 1
    475a:	a1 f4       	brne	.+40     	; 0x4784 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    475c:	a7 e3       	ldi	r26, 0x37	; 55
    475e:	b0 e0       	ldi	r27, 0x00	; 0
    4760:	e7 e3       	ldi	r30, 0x37	; 55
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	80 81       	ld	r24, Z
    4766:	48 2f       	mov	r20, r24
    4768:	8a 81       	ldd	r24, Y+2	; 0x02
    476a:	28 2f       	mov	r18, r24
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	02 2e       	mov	r0, r18
    4774:	02 c0       	rjmp	.+4      	; 0x477a <GPIO_setupPinDirection+0xe4>
    4776:	88 0f       	add	r24, r24
    4778:	99 1f       	adc	r25, r25
    477a:	0a 94       	dec	r0
    477c:	e2 f7       	brpl	.-8      	; 0x4776 <GPIO_setupPinDirection+0xe0>
    477e:	84 2b       	or	r24, r20
    4780:	8c 93       	st	X, r24
    4782:	6c c0       	rjmp	.+216    	; 0x485c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    4784:	a7 e3       	ldi	r26, 0x37	; 55
    4786:	b0 e0       	ldi	r27, 0x00	; 0
    4788:	e7 e3       	ldi	r30, 0x37	; 55
    478a:	f0 e0       	ldi	r31, 0x00	; 0
    478c:	80 81       	ld	r24, Z
    478e:	48 2f       	mov	r20, r24
    4790:	8a 81       	ldd	r24, Y+2	; 0x02
    4792:	28 2f       	mov	r18, r24
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	02 2e       	mov	r0, r18
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <GPIO_setupPinDirection+0x10c>
    479e:	88 0f       	add	r24, r24
    47a0:	99 1f       	adc	r25, r25
    47a2:	0a 94       	dec	r0
    47a4:	e2 f7       	brpl	.-8      	; 0x479e <GPIO_setupPinDirection+0x108>
    47a6:	80 95       	com	r24
    47a8:	84 23       	and	r24, r20
    47aa:	8c 93       	st	X, r24
    47ac:	57 c0       	rjmp	.+174    	; 0x485c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    47ae:	8b 81       	ldd	r24, Y+3	; 0x03
    47b0:	81 30       	cpi	r24, 0x01	; 1
    47b2:	a1 f4       	brne	.+40     	; 0x47dc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    47b4:	a4 e3       	ldi	r26, 0x34	; 52
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
    47b8:	e4 e3       	ldi	r30, 0x34	; 52
    47ba:	f0 e0       	ldi	r31, 0x00	; 0
    47bc:	80 81       	ld	r24, Z
    47be:	48 2f       	mov	r20, r24
    47c0:	8a 81       	ldd	r24, Y+2	; 0x02
    47c2:	28 2f       	mov	r18, r24
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	02 2e       	mov	r0, r18
    47cc:	02 c0       	rjmp	.+4      	; 0x47d2 <GPIO_setupPinDirection+0x13c>
    47ce:	88 0f       	add	r24, r24
    47d0:	99 1f       	adc	r25, r25
    47d2:	0a 94       	dec	r0
    47d4:	e2 f7       	brpl	.-8      	; 0x47ce <GPIO_setupPinDirection+0x138>
    47d6:	84 2b       	or	r24, r20
    47d8:	8c 93       	st	X, r24
    47da:	40 c0       	rjmp	.+128    	; 0x485c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    47dc:	a4 e3       	ldi	r26, 0x34	; 52
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	e4 e3       	ldi	r30, 0x34	; 52
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	48 2f       	mov	r20, r24
    47e8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ea:	28 2f       	mov	r18, r24
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	02 2e       	mov	r0, r18
    47f4:	02 c0       	rjmp	.+4      	; 0x47fa <GPIO_setupPinDirection+0x164>
    47f6:	88 0f       	add	r24, r24
    47f8:	99 1f       	adc	r25, r25
    47fa:	0a 94       	dec	r0
    47fc:	e2 f7       	brpl	.-8      	; 0x47f6 <GPIO_setupPinDirection+0x160>
    47fe:	80 95       	com	r24
    4800:	84 23       	and	r24, r20
    4802:	8c 93       	st	X, r24
    4804:	2b c0       	rjmp	.+86     	; 0x485c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    4806:	8b 81       	ldd	r24, Y+3	; 0x03
    4808:	81 30       	cpi	r24, 0x01	; 1
    480a:	a1 f4       	brne	.+40     	; 0x4834 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    480c:	a1 e3       	ldi	r26, 0x31	; 49
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	e1 e3       	ldi	r30, 0x31	; 49
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	48 2f       	mov	r20, r24
    4818:	8a 81       	ldd	r24, Y+2	; 0x02
    481a:	28 2f       	mov	r18, r24
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	02 2e       	mov	r0, r18
    4824:	02 c0       	rjmp	.+4      	; 0x482a <GPIO_setupPinDirection+0x194>
    4826:	88 0f       	add	r24, r24
    4828:	99 1f       	adc	r25, r25
    482a:	0a 94       	dec	r0
    482c:	e2 f7       	brpl	.-8      	; 0x4826 <GPIO_setupPinDirection+0x190>
    482e:	84 2b       	or	r24, r20
    4830:	8c 93       	st	X, r24
    4832:	14 c0       	rjmp	.+40     	; 0x485c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    4834:	a1 e3       	ldi	r26, 0x31	; 49
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	e1 e3       	ldi	r30, 0x31	; 49
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	80 81       	ld	r24, Z
    483e:	48 2f       	mov	r20, r24
    4840:	8a 81       	ldd	r24, Y+2	; 0x02
    4842:	28 2f       	mov	r18, r24
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	02 2e       	mov	r0, r18
    484c:	02 c0       	rjmp	.+4      	; 0x4852 <GPIO_setupPinDirection+0x1bc>
    484e:	88 0f       	add	r24, r24
    4850:	99 1f       	adc	r25, r25
    4852:	0a 94       	dec	r0
    4854:	e2 f7       	brpl	.-8      	; 0x484e <GPIO_setupPinDirection+0x1b8>
    4856:	80 95       	com	r24
    4858:	84 23       	and	r24, r20
    485a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	0f 90       	pop	r0
    4864:	0f 90       	pop	r0
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	08 95       	ret

0000486c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    486c:	df 93       	push	r29
    486e:	cf 93       	push	r28
    4870:	00 d0       	rcall	.+0      	; 0x4872 <GPIO_writePin+0x6>
    4872:	00 d0       	rcall	.+0      	; 0x4874 <GPIO_writePin+0x8>
    4874:	0f 92       	push	r0
    4876:	cd b7       	in	r28, 0x3d	; 61
    4878:	de b7       	in	r29, 0x3e	; 62
    487a:	89 83       	std	Y+1, r24	; 0x01
    487c:	6a 83       	std	Y+2, r22	; 0x02
    487e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    4880:	8a 81       	ldd	r24, Y+2	; 0x02
    4882:	88 30       	cpi	r24, 0x08	; 8
    4884:	08 f0       	brcs	.+2      	; 0x4888 <GPIO_writePin+0x1c>
    4886:	d5 c0       	rjmp	.+426    	; 0x4a32 <GPIO_writePin+0x1c6>
    4888:	89 81       	ldd	r24, Y+1	; 0x01
    488a:	84 30       	cpi	r24, 0x04	; 4
    488c:	08 f0       	brcs	.+2      	; 0x4890 <GPIO_writePin+0x24>
    488e:	d1 c0       	rjmp	.+418    	; 0x4a32 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    4890:	89 81       	ldd	r24, Y+1	; 0x01
    4892:	28 2f       	mov	r18, r24
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	3d 83       	std	Y+5, r19	; 0x05
    4898:	2c 83       	std	Y+4, r18	; 0x04
    489a:	8c 81       	ldd	r24, Y+4	; 0x04
    489c:	9d 81       	ldd	r25, Y+5	; 0x05
    489e:	81 30       	cpi	r24, 0x01	; 1
    48a0:	91 05       	cpc	r25, r1
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <GPIO_writePin+0x3a>
    48a4:	43 c0       	rjmp	.+134    	; 0x492c <GPIO_writePin+0xc0>
    48a6:	2c 81       	ldd	r18, Y+4	; 0x04
    48a8:	3d 81       	ldd	r19, Y+5	; 0x05
    48aa:	22 30       	cpi	r18, 0x02	; 2
    48ac:	31 05       	cpc	r19, r1
    48ae:	2c f4       	brge	.+10     	; 0x48ba <GPIO_writePin+0x4e>
    48b0:	8c 81       	ldd	r24, Y+4	; 0x04
    48b2:	9d 81       	ldd	r25, Y+5	; 0x05
    48b4:	00 97       	sbiw	r24, 0x00	; 0
    48b6:	71 f0       	breq	.+28     	; 0x48d4 <GPIO_writePin+0x68>
    48b8:	bc c0       	rjmp	.+376    	; 0x4a32 <GPIO_writePin+0x1c6>
    48ba:	2c 81       	ldd	r18, Y+4	; 0x04
    48bc:	3d 81       	ldd	r19, Y+5	; 0x05
    48be:	22 30       	cpi	r18, 0x02	; 2
    48c0:	31 05       	cpc	r19, r1
    48c2:	09 f4       	brne	.+2      	; 0x48c6 <GPIO_writePin+0x5a>
    48c4:	5f c0       	rjmp	.+190    	; 0x4984 <GPIO_writePin+0x118>
    48c6:	8c 81       	ldd	r24, Y+4	; 0x04
    48c8:	9d 81       	ldd	r25, Y+5	; 0x05
    48ca:	83 30       	cpi	r24, 0x03	; 3
    48cc:	91 05       	cpc	r25, r1
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <GPIO_writePin+0x66>
    48d0:	85 c0       	rjmp	.+266    	; 0x49dc <GPIO_writePin+0x170>
    48d2:	af c0       	rjmp	.+350    	; 0x4a32 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    48d4:	8b 81       	ldd	r24, Y+3	; 0x03
    48d6:	81 30       	cpi	r24, 0x01	; 1
    48d8:	a1 f4       	brne	.+40     	; 0x4902 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    48da:	ab e3       	ldi	r26, 0x3B	; 59
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	eb e3       	ldi	r30, 0x3B	; 59
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	48 2f       	mov	r20, r24
    48e6:	8a 81       	ldd	r24, Y+2	; 0x02
    48e8:	28 2f       	mov	r18, r24
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	02 2e       	mov	r0, r18
    48f2:	02 c0       	rjmp	.+4      	; 0x48f8 <GPIO_writePin+0x8c>
    48f4:	88 0f       	add	r24, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	0a 94       	dec	r0
    48fa:	e2 f7       	brpl	.-8      	; 0x48f4 <GPIO_writePin+0x88>
    48fc:	84 2b       	or	r24, r20
    48fe:	8c 93       	st	X, r24
    4900:	98 c0       	rjmp	.+304    	; 0x4a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    4902:	ab e3       	ldi	r26, 0x3B	; 59
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	eb e3       	ldi	r30, 0x3B	; 59
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 81       	ld	r24, Z
    490c:	48 2f       	mov	r20, r24
    490e:	8a 81       	ldd	r24, Y+2	; 0x02
    4910:	28 2f       	mov	r18, r24
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	02 2e       	mov	r0, r18
    491a:	02 c0       	rjmp	.+4      	; 0x4920 <GPIO_writePin+0xb4>
    491c:	88 0f       	add	r24, r24
    491e:	99 1f       	adc	r25, r25
    4920:	0a 94       	dec	r0
    4922:	e2 f7       	brpl	.-8      	; 0x491c <GPIO_writePin+0xb0>
    4924:	80 95       	com	r24
    4926:	84 23       	and	r24, r20
    4928:	8c 93       	st	X, r24
    492a:	83 c0       	rjmp	.+262    	; 0x4a32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    492c:	8b 81       	ldd	r24, Y+3	; 0x03
    492e:	81 30       	cpi	r24, 0x01	; 1
    4930:	a1 f4       	brne	.+40     	; 0x495a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    4932:	a8 e3       	ldi	r26, 0x38	; 56
    4934:	b0 e0       	ldi	r27, 0x00	; 0
    4936:	e8 e3       	ldi	r30, 0x38	; 56
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	80 81       	ld	r24, Z
    493c:	48 2f       	mov	r20, r24
    493e:	8a 81       	ldd	r24, Y+2	; 0x02
    4940:	28 2f       	mov	r18, r24
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	81 e0       	ldi	r24, 0x01	; 1
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	02 2e       	mov	r0, r18
    494a:	02 c0       	rjmp	.+4      	; 0x4950 <GPIO_writePin+0xe4>
    494c:	88 0f       	add	r24, r24
    494e:	99 1f       	adc	r25, r25
    4950:	0a 94       	dec	r0
    4952:	e2 f7       	brpl	.-8      	; 0x494c <GPIO_writePin+0xe0>
    4954:	84 2b       	or	r24, r20
    4956:	8c 93       	st	X, r24
    4958:	6c c0       	rjmp	.+216    	; 0x4a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    495a:	a8 e3       	ldi	r26, 0x38	; 56
    495c:	b0 e0       	ldi	r27, 0x00	; 0
    495e:	e8 e3       	ldi	r30, 0x38	; 56
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	80 81       	ld	r24, Z
    4964:	48 2f       	mov	r20, r24
    4966:	8a 81       	ldd	r24, Y+2	; 0x02
    4968:	28 2f       	mov	r18, r24
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	02 2e       	mov	r0, r18
    4972:	02 c0       	rjmp	.+4      	; 0x4978 <GPIO_writePin+0x10c>
    4974:	88 0f       	add	r24, r24
    4976:	99 1f       	adc	r25, r25
    4978:	0a 94       	dec	r0
    497a:	e2 f7       	brpl	.-8      	; 0x4974 <GPIO_writePin+0x108>
    497c:	80 95       	com	r24
    497e:	84 23       	and	r24, r20
    4980:	8c 93       	st	X, r24
    4982:	57 c0       	rjmp	.+174    	; 0x4a32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    4984:	8b 81       	ldd	r24, Y+3	; 0x03
    4986:	81 30       	cpi	r24, 0x01	; 1
    4988:	a1 f4       	brne	.+40     	; 0x49b2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    498a:	a5 e3       	ldi	r26, 0x35	; 53
    498c:	b0 e0       	ldi	r27, 0x00	; 0
    498e:	e5 e3       	ldi	r30, 0x35	; 53
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	80 81       	ld	r24, Z
    4994:	48 2f       	mov	r20, r24
    4996:	8a 81       	ldd	r24, Y+2	; 0x02
    4998:	28 2f       	mov	r18, r24
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	02 2e       	mov	r0, r18
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <GPIO_writePin+0x13c>
    49a4:	88 0f       	add	r24, r24
    49a6:	99 1f       	adc	r25, r25
    49a8:	0a 94       	dec	r0
    49aa:	e2 f7       	brpl	.-8      	; 0x49a4 <GPIO_writePin+0x138>
    49ac:	84 2b       	or	r24, r20
    49ae:	8c 93       	st	X, r24
    49b0:	40 c0       	rjmp	.+128    	; 0x4a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    49b2:	a5 e3       	ldi	r26, 0x35	; 53
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
    49b6:	e5 e3       	ldi	r30, 0x35	; 53
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	80 81       	ld	r24, Z
    49bc:	48 2f       	mov	r20, r24
    49be:	8a 81       	ldd	r24, Y+2	; 0x02
    49c0:	28 2f       	mov	r18, r24
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	02 2e       	mov	r0, r18
    49ca:	02 c0       	rjmp	.+4      	; 0x49d0 <GPIO_writePin+0x164>
    49cc:	88 0f       	add	r24, r24
    49ce:	99 1f       	adc	r25, r25
    49d0:	0a 94       	dec	r0
    49d2:	e2 f7       	brpl	.-8      	; 0x49cc <GPIO_writePin+0x160>
    49d4:	80 95       	com	r24
    49d6:	84 23       	and	r24, r20
    49d8:	8c 93       	st	X, r24
    49da:	2b c0       	rjmp	.+86     	; 0x4a32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    49dc:	8b 81       	ldd	r24, Y+3	; 0x03
    49de:	81 30       	cpi	r24, 0x01	; 1
    49e0:	a1 f4       	brne	.+40     	; 0x4a0a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    49e2:	a2 e3       	ldi	r26, 0x32	; 50
    49e4:	b0 e0       	ldi	r27, 0x00	; 0
    49e6:	e2 e3       	ldi	r30, 0x32	; 50
    49e8:	f0 e0       	ldi	r31, 0x00	; 0
    49ea:	80 81       	ld	r24, Z
    49ec:	48 2f       	mov	r20, r24
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	28 2f       	mov	r18, r24
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	02 2e       	mov	r0, r18
    49fa:	02 c0       	rjmp	.+4      	; 0x4a00 <GPIO_writePin+0x194>
    49fc:	88 0f       	add	r24, r24
    49fe:	99 1f       	adc	r25, r25
    4a00:	0a 94       	dec	r0
    4a02:	e2 f7       	brpl	.-8      	; 0x49fc <GPIO_writePin+0x190>
    4a04:	84 2b       	or	r24, r20
    4a06:	8c 93       	st	X, r24
    4a08:	14 c0       	rjmp	.+40     	; 0x4a32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    4a0a:	a2 e3       	ldi	r26, 0x32	; 50
    4a0c:	b0 e0       	ldi	r27, 0x00	; 0
    4a0e:	e2 e3       	ldi	r30, 0x32	; 50
    4a10:	f0 e0       	ldi	r31, 0x00	; 0
    4a12:	80 81       	ld	r24, Z
    4a14:	48 2f       	mov	r20, r24
    4a16:	8a 81       	ldd	r24, Y+2	; 0x02
    4a18:	28 2f       	mov	r18, r24
    4a1a:	30 e0       	ldi	r19, 0x00	; 0
    4a1c:	81 e0       	ldi	r24, 0x01	; 1
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	02 2e       	mov	r0, r18
    4a22:	02 c0       	rjmp	.+4      	; 0x4a28 <GPIO_writePin+0x1bc>
    4a24:	88 0f       	add	r24, r24
    4a26:	99 1f       	adc	r25, r25
    4a28:	0a 94       	dec	r0
    4a2a:	e2 f7       	brpl	.-8      	; 0x4a24 <GPIO_writePin+0x1b8>
    4a2c:	80 95       	com	r24
    4a2e:	84 23       	and	r24, r20
    4a30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	cf 91       	pop	r28
    4a3e:	df 91       	pop	r29
    4a40:	08 95       	ret

00004a42 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    4a42:	df 93       	push	r29
    4a44:	cf 93       	push	r28
    4a46:	00 d0       	rcall	.+0      	; 0x4a48 <GPIO_readPin+0x6>
    4a48:	00 d0       	rcall	.+0      	; 0x4a4a <GPIO_readPin+0x8>
    4a4a:	0f 92       	push	r0
    4a4c:	cd b7       	in	r28, 0x3d	; 61
    4a4e:	de b7       	in	r29, 0x3e	; 62
    4a50:	8a 83       	std	Y+2, r24	; 0x02
    4a52:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    4a54:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    4a56:	8b 81       	ldd	r24, Y+3	; 0x03
    4a58:	88 30       	cpi	r24, 0x08	; 8
    4a5a:	08 f0       	brcs	.+2      	; 0x4a5e <GPIO_readPin+0x1c>
    4a5c:	84 c0       	rjmp	.+264    	; 0x4b66 <GPIO_readPin+0x124>
    4a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a60:	84 30       	cpi	r24, 0x04	; 4
    4a62:	08 f0       	brcs	.+2      	; 0x4a66 <GPIO_readPin+0x24>
    4a64:	80 c0       	rjmp	.+256    	; 0x4b66 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    4a66:	8a 81       	ldd	r24, Y+2	; 0x02
    4a68:	28 2f       	mov	r18, r24
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	3d 83       	std	Y+5, r19	; 0x05
    4a6e:	2c 83       	std	Y+4, r18	; 0x04
    4a70:	4c 81       	ldd	r20, Y+4	; 0x04
    4a72:	5d 81       	ldd	r21, Y+5	; 0x05
    4a74:	41 30       	cpi	r20, 0x01	; 1
    4a76:	51 05       	cpc	r21, r1
    4a78:	79 f1       	breq	.+94     	; 0x4ad8 <GPIO_readPin+0x96>
    4a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    4a7e:	82 30       	cpi	r24, 0x02	; 2
    4a80:	91 05       	cpc	r25, r1
    4a82:	34 f4       	brge	.+12     	; 0x4a90 <GPIO_readPin+0x4e>
    4a84:	2c 81       	ldd	r18, Y+4	; 0x04
    4a86:	3d 81       	ldd	r19, Y+5	; 0x05
    4a88:	21 15       	cp	r18, r1
    4a8a:	31 05       	cpc	r19, r1
    4a8c:	69 f0       	breq	.+26     	; 0x4aa8 <GPIO_readPin+0x66>
    4a8e:	6b c0       	rjmp	.+214    	; 0x4b66 <GPIO_readPin+0x124>
    4a90:	4c 81       	ldd	r20, Y+4	; 0x04
    4a92:	5d 81       	ldd	r21, Y+5	; 0x05
    4a94:	42 30       	cpi	r20, 0x02	; 2
    4a96:	51 05       	cpc	r21, r1
    4a98:	b9 f1       	breq	.+110    	; 0x4b08 <GPIO_readPin+0xc6>
    4a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    4a9e:	83 30       	cpi	r24, 0x03	; 3
    4aa0:	91 05       	cpc	r25, r1
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <GPIO_readPin+0x64>
    4aa4:	49 c0       	rjmp	.+146    	; 0x4b38 <GPIO_readPin+0xf6>
    4aa6:	5f c0       	rjmp	.+190    	; 0x4b66 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    4aa8:	e9 e3       	ldi	r30, 0x39	; 57
    4aaa:	f0 e0       	ldi	r31, 0x00	; 0
    4aac:	80 81       	ld	r24, Z
    4aae:	28 2f       	mov	r18, r24
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab4:	88 2f       	mov	r24, r24
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	a9 01       	movw	r20, r18
    4aba:	02 c0       	rjmp	.+4      	; 0x4ac0 <GPIO_readPin+0x7e>
    4abc:	55 95       	asr	r21
    4abe:	47 95       	ror	r20
    4ac0:	8a 95       	dec	r24
    4ac2:	e2 f7       	brpl	.-8      	; 0x4abc <GPIO_readPin+0x7a>
    4ac4:	ca 01       	movw	r24, r20
    4ac6:	81 70       	andi	r24, 0x01	; 1
    4ac8:	90 70       	andi	r25, 0x00	; 0
    4aca:	88 23       	and	r24, r24
    4acc:	19 f0       	breq	.+6      	; 0x4ad4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	89 83       	std	Y+1, r24	; 0x01
    4ad2:	49 c0       	rjmp	.+146    	; 0x4b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4ad4:	19 82       	std	Y+1, r1	; 0x01
    4ad6:	47 c0       	rjmp	.+142    	; 0x4b66 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    4ad8:	e6 e3       	ldi	r30, 0x36	; 54
    4ada:	f0 e0       	ldi	r31, 0x00	; 0
    4adc:	80 81       	ld	r24, Z
    4ade:	28 2f       	mov	r18, r24
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae4:	88 2f       	mov	r24, r24
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	a9 01       	movw	r20, r18
    4aea:	02 c0       	rjmp	.+4      	; 0x4af0 <GPIO_readPin+0xae>
    4aec:	55 95       	asr	r21
    4aee:	47 95       	ror	r20
    4af0:	8a 95       	dec	r24
    4af2:	e2 f7       	brpl	.-8      	; 0x4aec <GPIO_readPin+0xaa>
    4af4:	ca 01       	movw	r24, r20
    4af6:	81 70       	andi	r24, 0x01	; 1
    4af8:	90 70       	andi	r25, 0x00	; 0
    4afa:	88 23       	and	r24, r24
    4afc:	19 f0       	breq	.+6      	; 0x4b04 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	89 83       	std	Y+1, r24	; 0x01
    4b02:	31 c0       	rjmp	.+98     	; 0x4b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4b04:	19 82       	std	Y+1, r1	; 0x01
    4b06:	2f c0       	rjmp	.+94     	; 0x4b66 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    4b08:	e3 e3       	ldi	r30, 0x33	; 51
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	28 2f       	mov	r18, r24
    4b10:	30 e0       	ldi	r19, 0x00	; 0
    4b12:	8b 81       	ldd	r24, Y+3	; 0x03
    4b14:	88 2f       	mov	r24, r24
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	a9 01       	movw	r20, r18
    4b1a:	02 c0       	rjmp	.+4      	; 0x4b20 <GPIO_readPin+0xde>
    4b1c:	55 95       	asr	r21
    4b1e:	47 95       	ror	r20
    4b20:	8a 95       	dec	r24
    4b22:	e2 f7       	brpl	.-8      	; 0x4b1c <GPIO_readPin+0xda>
    4b24:	ca 01       	movw	r24, r20
    4b26:	81 70       	andi	r24, 0x01	; 1
    4b28:	90 70       	andi	r25, 0x00	; 0
    4b2a:	88 23       	and	r24, r24
    4b2c:	19 f0       	breq	.+6      	; 0x4b34 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    4b2e:	81 e0       	ldi	r24, 0x01	; 1
    4b30:	89 83       	std	Y+1, r24	; 0x01
    4b32:	19 c0       	rjmp	.+50     	; 0x4b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4b34:	19 82       	std	Y+1, r1	; 0x01
    4b36:	17 c0       	rjmp	.+46     	; 0x4b66 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    4b38:	e0 e3       	ldi	r30, 0x30	; 48
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	80 81       	ld	r24, Z
    4b3e:	28 2f       	mov	r18, r24
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	8b 81       	ldd	r24, Y+3	; 0x03
    4b44:	88 2f       	mov	r24, r24
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	a9 01       	movw	r20, r18
    4b4a:	02 c0       	rjmp	.+4      	; 0x4b50 <GPIO_readPin+0x10e>
    4b4c:	55 95       	asr	r21
    4b4e:	47 95       	ror	r20
    4b50:	8a 95       	dec	r24
    4b52:	e2 f7       	brpl	.-8      	; 0x4b4c <GPIO_readPin+0x10a>
    4b54:	ca 01       	movw	r24, r20
    4b56:	81 70       	andi	r24, 0x01	; 1
    4b58:	90 70       	andi	r25, 0x00	; 0
    4b5a:	88 23       	and	r24, r24
    4b5c:	19 f0       	breq	.+6      	; 0x4b64 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	89 83       	std	Y+1, r24	; 0x01
    4b62:	01 c0       	rjmp	.+2      	; 0x4b66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4b64:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	0f 90       	pop	r0
    4b70:	0f 90       	pop	r0
    4b72:	cf 91       	pop	r28
    4b74:	df 91       	pop	r29
    4b76:	08 95       	ret

00004b78 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    4b78:	df 93       	push	r29
    4b7a:	cf 93       	push	r28
    4b7c:	00 d0       	rcall	.+0      	; 0x4b7e <GPIO_setupPortDirection+0x6>
    4b7e:	00 d0       	rcall	.+0      	; 0x4b80 <GPIO_setupPortDirection+0x8>
    4b80:	cd b7       	in	r28, 0x3d	; 61
    4b82:	de b7       	in	r29, 0x3e	; 62
    4b84:	89 83       	std	Y+1, r24	; 0x01
    4b86:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    4b88:	89 81       	ldd	r24, Y+1	; 0x01
    4b8a:	84 30       	cpi	r24, 0x04	; 4
    4b8c:	90 f5       	brcc	.+100    	; 0x4bf2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    4b8e:	89 81       	ldd	r24, Y+1	; 0x01
    4b90:	28 2f       	mov	r18, r24
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	3c 83       	std	Y+4, r19	; 0x04
    4b96:	2b 83       	std	Y+3, r18	; 0x03
    4b98:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b9c:	81 30       	cpi	r24, 0x01	; 1
    4b9e:	91 05       	cpc	r25, r1
    4ba0:	d1 f0       	breq	.+52     	; 0x4bd6 <GPIO_setupPortDirection+0x5e>
    4ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    4ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    4ba6:	22 30       	cpi	r18, 0x02	; 2
    4ba8:	31 05       	cpc	r19, r1
    4baa:	2c f4       	brge	.+10     	; 0x4bb6 <GPIO_setupPortDirection+0x3e>
    4bac:	8b 81       	ldd	r24, Y+3	; 0x03
    4bae:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb0:	00 97       	sbiw	r24, 0x00	; 0
    4bb2:	61 f0       	breq	.+24     	; 0x4bcc <GPIO_setupPortDirection+0x54>
    4bb4:	1e c0       	rjmp	.+60     	; 0x4bf2 <GPIO_setupPortDirection+0x7a>
    4bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    4bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    4bba:	22 30       	cpi	r18, 0x02	; 2
    4bbc:	31 05       	cpc	r19, r1
    4bbe:	81 f0       	breq	.+32     	; 0x4be0 <GPIO_setupPortDirection+0x68>
    4bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc4:	83 30       	cpi	r24, 0x03	; 3
    4bc6:	91 05       	cpc	r25, r1
    4bc8:	81 f0       	breq	.+32     	; 0x4bea <GPIO_setupPortDirection+0x72>
    4bca:	13 c0       	rjmp	.+38     	; 0x4bf2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    4bcc:	ea e3       	ldi	r30, 0x3A	; 58
    4bce:	f0 e0       	ldi	r31, 0x00	; 0
    4bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd2:	80 83       	st	Z, r24
    4bd4:	0e c0       	rjmp	.+28     	; 0x4bf2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    4bd6:	e7 e3       	ldi	r30, 0x37	; 55
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	8a 81       	ldd	r24, Y+2	; 0x02
    4bdc:	80 83       	st	Z, r24
    4bde:	09 c0       	rjmp	.+18     	; 0x4bf2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    4be0:	e4 e3       	ldi	r30, 0x34	; 52
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	8a 81       	ldd	r24, Y+2	; 0x02
    4be6:	80 83       	st	Z, r24
    4be8:	04 c0       	rjmp	.+8      	; 0x4bf2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    4bea:	e1 e3       	ldi	r30, 0x31	; 49
    4bec:	f0 e0       	ldi	r31, 0x00	; 0
    4bee:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf0:	80 83       	st	Z, r24
			break;
		}
	}
}
    4bf2:	0f 90       	pop	r0
    4bf4:	0f 90       	pop	r0
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	cf 91       	pop	r28
    4bfc:	df 91       	pop	r29
    4bfe:	08 95       	ret

00004c00 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    4c00:	df 93       	push	r29
    4c02:	cf 93       	push	r28
    4c04:	00 d0       	rcall	.+0      	; 0x4c06 <GPIO_writePort+0x6>
    4c06:	00 d0       	rcall	.+0      	; 0x4c08 <GPIO_writePort+0x8>
    4c08:	cd b7       	in	r28, 0x3d	; 61
    4c0a:	de b7       	in	r29, 0x3e	; 62
    4c0c:	89 83       	std	Y+1, r24	; 0x01
    4c0e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	84 30       	cpi	r24, 0x04	; 4
    4c14:	90 f5       	brcc	.+100    	; 0x4c7a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	28 2f       	mov	r18, r24
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	3c 83       	std	Y+4, r19	; 0x04
    4c1e:	2b 83       	std	Y+3, r18	; 0x03
    4c20:	8b 81       	ldd	r24, Y+3	; 0x03
    4c22:	9c 81       	ldd	r25, Y+4	; 0x04
    4c24:	81 30       	cpi	r24, 0x01	; 1
    4c26:	91 05       	cpc	r25, r1
    4c28:	d1 f0       	breq	.+52     	; 0x4c5e <GPIO_writePort+0x5e>
    4c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    4c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    4c2e:	22 30       	cpi	r18, 0x02	; 2
    4c30:	31 05       	cpc	r19, r1
    4c32:	2c f4       	brge	.+10     	; 0x4c3e <GPIO_writePort+0x3e>
    4c34:	8b 81       	ldd	r24, Y+3	; 0x03
    4c36:	9c 81       	ldd	r25, Y+4	; 0x04
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	61 f0       	breq	.+24     	; 0x4c54 <GPIO_writePort+0x54>
    4c3c:	1e c0       	rjmp	.+60     	; 0x4c7a <GPIO_writePort+0x7a>
    4c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    4c40:	3c 81       	ldd	r19, Y+4	; 0x04
    4c42:	22 30       	cpi	r18, 0x02	; 2
    4c44:	31 05       	cpc	r19, r1
    4c46:	81 f0       	breq	.+32     	; 0x4c68 <GPIO_writePort+0x68>
    4c48:	8b 81       	ldd	r24, Y+3	; 0x03
    4c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c4c:	83 30       	cpi	r24, 0x03	; 3
    4c4e:	91 05       	cpc	r25, r1
    4c50:	81 f0       	breq	.+32     	; 0x4c72 <GPIO_writePort+0x72>
    4c52:	13 c0       	rjmp	.+38     	; 0x4c7a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    4c54:	eb e3       	ldi	r30, 0x3B	; 59
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	8a 81       	ldd	r24, Y+2	; 0x02
    4c5a:	80 83       	st	Z, r24
    4c5c:	0e c0       	rjmp	.+28     	; 0x4c7a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    4c5e:	e8 e3       	ldi	r30, 0x38	; 56
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	80 83       	st	Z, r24
    4c66:	09 c0       	rjmp	.+18     	; 0x4c7a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    4c68:	e5 e3       	ldi	r30, 0x35	; 53
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6e:	80 83       	st	Z, r24
    4c70:	04 c0       	rjmp	.+8      	; 0x4c7a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    4c72:	e2 e3       	ldi	r30, 0x32	; 50
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	8a 81       	ldd	r24, Y+2	; 0x02
    4c78:	80 83       	st	Z, r24
			break;
		}
	}
}
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	cf 91       	pop	r28
    4c84:	df 91       	pop	r29
    4c86:	08 95       	ret

00004c88 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    4c88:	df 93       	push	r29
    4c8a:	cf 93       	push	r28
    4c8c:	00 d0       	rcall	.+0      	; 0x4c8e <GPIO_readPort+0x6>
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <GPIO_readPort+0x8>
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    4c96:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    4c98:	8a 81       	ldd	r24, Y+2	; 0x02
    4c9a:	84 30       	cpi	r24, 0x04	; 4
    4c9c:	90 f5       	brcc	.+100    	; 0x4d02 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    4c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca0:	28 2f       	mov	r18, r24
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	3c 83       	std	Y+4, r19	; 0x04
    4ca6:	2b 83       	std	Y+3, r18	; 0x03
    4ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    4caa:	9c 81       	ldd	r25, Y+4	; 0x04
    4cac:	81 30       	cpi	r24, 0x01	; 1
    4cae:	91 05       	cpc	r25, r1
    4cb0:	d1 f0       	breq	.+52     	; 0x4ce6 <GPIO_readPort+0x5e>
    4cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    4cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    4cb6:	22 30       	cpi	r18, 0x02	; 2
    4cb8:	31 05       	cpc	r19, r1
    4cba:	2c f4       	brge	.+10     	; 0x4cc6 <GPIO_readPort+0x3e>
    4cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc0:	00 97       	sbiw	r24, 0x00	; 0
    4cc2:	61 f0       	breq	.+24     	; 0x4cdc <GPIO_readPort+0x54>
    4cc4:	1e c0       	rjmp	.+60     	; 0x4d02 <GPIO_readPort+0x7a>
    4cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    4cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    4cca:	22 30       	cpi	r18, 0x02	; 2
    4ccc:	31 05       	cpc	r19, r1
    4cce:	81 f0       	breq	.+32     	; 0x4cf0 <GPIO_readPort+0x68>
    4cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd4:	83 30       	cpi	r24, 0x03	; 3
    4cd6:	91 05       	cpc	r25, r1
    4cd8:	81 f0       	breq	.+32     	; 0x4cfa <GPIO_readPort+0x72>
    4cda:	13 c0       	rjmp	.+38     	; 0x4d02 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    4cdc:	e9 e3       	ldi	r30, 0x39	; 57
    4cde:	f0 e0       	ldi	r31, 0x00	; 0
    4ce0:	80 81       	ld	r24, Z
    4ce2:	89 83       	std	Y+1, r24	; 0x01
    4ce4:	0e c0       	rjmp	.+28     	; 0x4d02 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    4ce6:	e6 e3       	ldi	r30, 0x36	; 54
    4ce8:	f0 e0       	ldi	r31, 0x00	; 0
    4cea:	80 81       	ld	r24, Z
    4cec:	89 83       	std	Y+1, r24	; 0x01
    4cee:	09 c0       	rjmp	.+18     	; 0x4d02 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    4cf0:	e3 e3       	ldi	r30, 0x33	; 51
    4cf2:	f0 e0       	ldi	r31, 0x00	; 0
    4cf4:	80 81       	ld	r24, Z
    4cf6:	89 83       	std	Y+1, r24	; 0x01
    4cf8:	04 c0       	rjmp	.+8      	; 0x4d02 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    4cfa:	e0 e3       	ldi	r30, 0x30	; 48
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	80 81       	ld	r24, Z
    4d00:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    4d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	cf 91       	pop	r28
    4d0e:	df 91       	pop	r29
    4d10:	08 95       	ret

00004d12 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    4d12:	df 93       	push	r29
    4d14:	cf 93       	push	r28
    4d16:	cd b7       	in	r28, 0x3d	; 61
    4d18:	de b7       	in	r29, 0x3e	; 62
    4d1a:	60 97       	sbiw	r28, 0x10	; 16
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	f8 94       	cli
    4d20:	de bf       	out	0x3e, r29	; 62
    4d22:	0f be       	out	0x3f, r0	; 63
    4d24:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	63 e0       	ldi	r22, 0x03	; 3
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    4d30:	81 e0       	ldi	r24, 0x01	; 1
    4d32:	64 e0       	ldi	r22, 0x04	; 4
    4d34:	40 e0       	ldi	r20, 0x00	; 0
    4d36:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	65 e0       	ldi	r22, 0x05	; 5
    4d3e:	40 e0       	ldi	r20, 0x00	; 0
    4d40:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	66 e0       	ldi	r22, 0x06	; 6
    4d48:	40 e0       	ldi	r20, 0x00	; 0
    4d4a:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    4d4e:	83 e0       	ldi	r24, 0x03	; 3
    4d50:	64 e0       	ldi	r22, 0x04	; 4
    4d52:	40 e0       	ldi	r20, 0x00	; 0
    4d54:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    4d58:	83 e0       	ldi	r24, 0x03	; 3
    4d5a:	65 e0       	ldi	r22, 0x05	; 5
    4d5c:	40 e0       	ldi	r20, 0x00	; 0
    4d5e:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    4d62:	83 e0       	ldi	r24, 0x03	; 3
    4d64:	66 e0       	ldi	r22, 0x06	; 6
    4d66:	40 e0       	ldi	r20, 0x00	; 0
    4d68:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    4d6c:	83 e0       	ldi	r24, 0x03	; 3
    4d6e:	67 e0       	ldi	r22, 0x07	; 7
    4d70:	40 e0       	ldi	r20, 0x00	; 0
    4d72:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    4d76:	1f 86       	std	Y+15, r1	; 0x0f
    4d78:	b4 c0       	rjmp	.+360    	; 0x4ee2 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    4d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d7c:	98 2f       	mov	r25, r24
    4d7e:	9d 5f       	subi	r25, 0xFD	; 253
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	69 2f       	mov	r22, r25
    4d84:	41 e0       	ldi	r20, 0x01	; 1
    4d86:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    4d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d8c:	98 2f       	mov	r25, r24
    4d8e:	9d 5f       	subi	r25, 0xFD	; 253
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	69 2f       	mov	r22, r25
    4d94:	40 e0       	ldi	r20, 0x00	; 0
    4d96:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    4d9a:	18 8a       	std	Y+16, r1	; 0x10
    4d9c:	22 c0       	rjmp	.+68     	; 0x4de2 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    4d9e:	88 89       	ldd	r24, Y+16	; 0x10
    4da0:	98 2f       	mov	r25, r24
    4da2:	9c 5f       	subi	r25, 0xFC	; 252
    4da4:	83 e0       	ldi	r24, 0x03	; 3
    4da6:	69 2f       	mov	r22, r25
    4da8:	0e 94 21 25 	call	0x4a42	; 0x4a42 <GPIO_readPin>
    4dac:	88 23       	and	r24, r24
    4dae:	b1 f4       	brne	.+44     	; 0x4ddc <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    4db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4db2:	88 2f       	mov	r24, r24
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	88 0f       	add	r24, r24
    4db8:	99 1f       	adc	r25, r25
    4dba:	88 0f       	add	r24, r24
    4dbc:	99 1f       	adc	r25, r25
    4dbe:	98 2f       	mov	r25, r24
    4dc0:	88 89       	ldd	r24, Y+16	; 0x10
    4dc2:	89 0f       	add	r24, r25
    4dc4:	8f 5f       	subi	r24, 0xFF	; 255
    4dc6:	0e 94 76 27 	call	0x4eec	; 0x4eec <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    4dca:	60 96       	adiw	r28, 0x10	; 16
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    4ddc:	88 89       	ldd	r24, Y+16	; 0x10
    4dde:	8f 5f       	subi	r24, 0xFF	; 255
    4de0:	88 8b       	std	Y+16, r24	; 0x10
    4de2:	88 89       	ldd	r24, Y+16	; 0x10
    4de4:	84 30       	cpi	r24, 0x04	; 4
    4de6:	d8 f2       	brcs	.-74     	; 0x4d9e <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    4de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dea:	98 2f       	mov	r25, r24
    4dec:	9d 5f       	subi	r25, 0xFD	; 253
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	69 2f       	mov	r22, r25
    4df2:	40 e0       	ldi	r20, 0x00	; 0
    4df4:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
    4df8:	80 e0       	ldi	r24, 0x00	; 0
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	a0 ea       	ldi	r26, 0xA0	; 160
    4dfe:	b0 e4       	ldi	r27, 0x40	; 64
    4e00:	8b 87       	std	Y+11, r24	; 0x0b
    4e02:	9c 87       	std	Y+12, r25	; 0x0c
    4e04:	ad 87       	std	Y+13, r26	; 0x0d
    4e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	4a ef       	ldi	r20, 0xFA	; 250
    4e16:	54 e4       	ldi	r21, 0x44	; 68
    4e18:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4e1c:	dc 01       	movw	r26, r24
    4e1e:	cb 01       	movw	r24, r22
    4e20:	8f 83       	std	Y+7, r24	; 0x07
    4e22:	98 87       	std	Y+8, r25	; 0x08
    4e24:	a9 87       	std	Y+9, r26	; 0x09
    4e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e28:	6f 81       	ldd	r22, Y+7	; 0x07
    4e2a:	78 85       	ldd	r23, Y+8	; 0x08
    4e2c:	89 85       	ldd	r24, Y+9	; 0x09
    4e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e30:	20 e0       	ldi	r18, 0x00	; 0
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	40 e8       	ldi	r20, 0x80	; 128
    4e36:	5f e3       	ldi	r21, 0x3F	; 63
    4e38:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    4e3c:	88 23       	and	r24, r24
    4e3e:	2c f4       	brge	.+10     	; 0x4e4a <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	9e 83       	std	Y+6, r25	; 0x06
    4e46:	8d 83       	std	Y+5, r24	; 0x05
    4e48:	3f c0       	rjmp	.+126    	; 0x4ec8 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    4e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e4c:	78 85       	ldd	r23, Y+8	; 0x08
    4e4e:	89 85       	ldd	r24, Y+9	; 0x09
    4e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	3f ef       	ldi	r19, 0xFF	; 255
    4e56:	4f e7       	ldi	r20, 0x7F	; 127
    4e58:	57 e4       	ldi	r21, 0x47	; 71
    4e5a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    4e5e:	18 16       	cp	r1, r24
    4e60:	4c f5       	brge	.+82     	; 0x4eb4 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	40 e2       	ldi	r20, 0x20	; 32
    4e70:	51 e4       	ldi	r21, 0x41	; 65
    4e72:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4e76:	dc 01       	movw	r26, r24
    4e78:	cb 01       	movw	r24, r22
    4e7a:	bc 01       	movw	r22, r24
    4e7c:	cd 01       	movw	r24, r26
    4e7e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e82:	dc 01       	movw	r26, r24
    4e84:	cb 01       	movw	r24, r22
    4e86:	9e 83       	std	Y+6, r25	; 0x06
    4e88:	8d 83       	std	Y+5, r24	; 0x05
    4e8a:	0f c0       	rjmp	.+30     	; 0x4eaa <KEYPAD_getPressedKey+0x198>
    4e8c:	88 ec       	ldi	r24, 0xC8	; 200
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	9c 83       	std	Y+4, r25	; 0x04
    4e92:	8b 83       	std	Y+3, r24	; 0x03
    4e94:	8b 81       	ldd	r24, Y+3	; 0x03
    4e96:	9c 81       	ldd	r25, Y+4	; 0x04
    4e98:	01 97       	sbiw	r24, 0x01	; 1
    4e9a:	f1 f7       	brne	.-4      	; 0x4e98 <KEYPAD_getPressedKey+0x186>
    4e9c:	9c 83       	std	Y+4, r25	; 0x04
    4e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	9e 83       	std	Y+6, r25	; 0x06
    4ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    4eac:	9e 81       	ldd	r25, Y+6	; 0x06
    4eae:	00 97       	sbiw	r24, 0x00	; 0
    4eb0:	69 f7       	brne	.-38     	; 0x4e8c <KEYPAD_getPressedKey+0x17a>
    4eb2:	14 c0       	rjmp	.+40     	; 0x4edc <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb6:	78 85       	ldd	r23, Y+8	; 0x08
    4eb8:	89 85       	ldd	r24, Y+9	; 0x09
    4eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ebc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	cb 01       	movw	r24, r22
    4ec4:	9e 83       	std	Y+6, r25	; 0x06
    4ec6:	8d 83       	std	Y+5, r24	; 0x05
    4ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eca:	9e 81       	ldd	r25, Y+6	; 0x06
    4ecc:	9a 83       	std	Y+2, r25	; 0x02
    4ece:	89 83       	std	Y+1, r24	; 0x01
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed4:	01 97       	sbiw	r24, 0x01	; 1
    4ed6:	f1 f7       	brne	.-4      	; 0x4ed4 <KEYPAD_getPressedKey+0x1c2>
    4ed8:	9a 83       	std	Y+2, r25	; 0x02
    4eda:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    4edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ede:	8f 5f       	subi	r24, 0xFF	; 255
    4ee0:	8f 87       	std	Y+15, r24	; 0x0f
    4ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ee4:	84 30       	cpi	r24, 0x04	; 4
    4ee6:	08 f4       	brcc	.+2      	; 0x4eea <KEYPAD_getPressedKey+0x1d8>
    4ee8:	48 cf       	rjmp	.-368    	; 0x4d7a <KEYPAD_getPressedKey+0x68>
    4eea:	45 cf       	rjmp	.-374    	; 0x4d76 <KEYPAD_getPressedKey+0x64>

00004eec <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    4eec:	df 93       	push	r29
    4eee:	cf 93       	push	r28
    4ef0:	00 d0       	rcall	.+0      	; 0x4ef2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    4ef2:	00 d0       	rcall	.+0      	; 0x4ef4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    4ef4:	cd b7       	in	r28, 0x3d	; 61
    4ef6:	de b7       	in	r29, 0x3e	; 62
    4ef8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    4efa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    4efc:	8a 81       	ldd	r24, Y+2	; 0x02
    4efe:	28 2f       	mov	r18, r24
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	3c 83       	std	Y+4, r19	; 0x04
    4f04:	2b 83       	std	Y+3, r18	; 0x03
    4f06:	8b 81       	ldd	r24, Y+3	; 0x03
    4f08:	9c 81       	ldd	r25, Y+4	; 0x04
    4f0a:	88 30       	cpi	r24, 0x08	; 8
    4f0c:	91 05       	cpc	r25, r1
    4f0e:	09 f4       	brne	.+2      	; 0x4f12 <KEYPAD_4x4_adjustKeyNumber+0x26>
    4f10:	70 c0       	rjmp	.+224    	; 0x4ff2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    4f12:	2b 81       	ldd	r18, Y+3	; 0x03
    4f14:	3c 81       	ldd	r19, Y+4	; 0x04
    4f16:	29 30       	cpi	r18, 0x09	; 9
    4f18:	31 05       	cpc	r19, r1
    4f1a:	5c f5       	brge	.+86     	; 0x4f72 <KEYPAD_4x4_adjustKeyNumber+0x86>
    4f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f20:	84 30       	cpi	r24, 0x04	; 4
    4f22:	91 05       	cpc	r25, r1
    4f24:	09 f4       	brne	.+2      	; 0x4f28 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    4f26:	59 c0       	rjmp	.+178    	; 0x4fda <KEYPAD_4x4_adjustKeyNumber+0xee>
    4f28:	2b 81       	ldd	r18, Y+3	; 0x03
    4f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    4f2c:	25 30       	cpi	r18, 0x05	; 5
    4f2e:	31 05       	cpc	r19, r1
    4f30:	9c f4       	brge	.+38     	; 0x4f58 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    4f32:	8b 81       	ldd	r24, Y+3	; 0x03
    4f34:	9c 81       	ldd	r25, Y+4	; 0x04
    4f36:	82 30       	cpi	r24, 0x02	; 2
    4f38:	91 05       	cpc	r25, r1
    4f3a:	09 f4       	brne	.+2      	; 0x4f3e <KEYPAD_4x4_adjustKeyNumber+0x52>
    4f3c:	48 c0       	rjmp	.+144    	; 0x4fce <KEYPAD_4x4_adjustKeyNumber+0xe2>
    4f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    4f40:	3c 81       	ldd	r19, Y+4	; 0x04
    4f42:	23 30       	cpi	r18, 0x03	; 3
    4f44:	31 05       	cpc	r19, r1
    4f46:	0c f0       	brlt	.+2      	; 0x4f4a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    4f48:	45 c0       	rjmp	.+138    	; 0x4fd4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    4f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f4e:	81 30       	cpi	r24, 0x01	; 1
    4f50:	91 05       	cpc	r25, r1
    4f52:	09 f4       	brne	.+2      	; 0x4f56 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    4f54:	39 c0       	rjmp	.+114    	; 0x4fc8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    4f56:	67 c0       	rjmp	.+206    	; 0x5026 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    4f58:	2b 81       	ldd	r18, Y+3	; 0x03
    4f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    4f5c:	26 30       	cpi	r18, 0x06	; 6
    4f5e:	31 05       	cpc	r19, r1
    4f60:	09 f4       	brne	.+2      	; 0x4f64 <KEYPAD_4x4_adjustKeyNumber+0x78>
    4f62:	41 c0       	rjmp	.+130    	; 0x4fe6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    4f64:	8b 81       	ldd	r24, Y+3	; 0x03
    4f66:	9c 81       	ldd	r25, Y+4	; 0x04
    4f68:	87 30       	cpi	r24, 0x07	; 7
    4f6a:	91 05       	cpc	r25, r1
    4f6c:	0c f0       	brlt	.+2      	; 0x4f70 <KEYPAD_4x4_adjustKeyNumber+0x84>
    4f6e:	3e c0       	rjmp	.+124    	; 0x4fec <KEYPAD_4x4_adjustKeyNumber+0x100>
    4f70:	37 c0       	rjmp	.+110    	; 0x4fe0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    4f72:	2b 81       	ldd	r18, Y+3	; 0x03
    4f74:	3c 81       	ldd	r19, Y+4	; 0x04
    4f76:	2c 30       	cpi	r18, 0x0C	; 12
    4f78:	31 05       	cpc	r19, r1
    4f7a:	09 f4       	brne	.+2      	; 0x4f7e <KEYPAD_4x4_adjustKeyNumber+0x92>
    4f7c:	46 c0       	rjmp	.+140    	; 0x500a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    4f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f80:	9c 81       	ldd	r25, Y+4	; 0x04
    4f82:	8d 30       	cpi	r24, 0x0D	; 13
    4f84:	91 05       	cpc	r25, r1
    4f86:	5c f4       	brge	.+22     	; 0x4f9e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    4f88:	2b 81       	ldd	r18, Y+3	; 0x03
    4f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    4f8c:	2a 30       	cpi	r18, 0x0A	; 10
    4f8e:	31 05       	cpc	r19, r1
    4f90:	b1 f1       	breq	.+108    	; 0x4ffe <KEYPAD_4x4_adjustKeyNumber+0x112>
    4f92:	8b 81       	ldd	r24, Y+3	; 0x03
    4f94:	9c 81       	ldd	r25, Y+4	; 0x04
    4f96:	8b 30       	cpi	r24, 0x0B	; 11
    4f98:	91 05       	cpc	r25, r1
    4f9a:	a4 f5       	brge	.+104    	; 0x5004 <KEYPAD_4x4_adjustKeyNumber+0x118>
    4f9c:	2d c0       	rjmp	.+90     	; 0x4ff8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    4f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    4fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    4fa2:	2e 30       	cpi	r18, 0x0E	; 14
    4fa4:	31 05       	cpc	r19, r1
    4fa6:	b9 f1       	breq	.+110    	; 0x5016 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    4fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    4faa:	9c 81       	ldd	r25, Y+4	; 0x04
    4fac:	8e 30       	cpi	r24, 0x0E	; 14
    4fae:	91 05       	cpc	r25, r1
    4fb0:	7c f1       	brlt	.+94     	; 0x5010 <KEYPAD_4x4_adjustKeyNumber+0x124>
    4fb2:	2b 81       	ldd	r18, Y+3	; 0x03
    4fb4:	3c 81       	ldd	r19, Y+4	; 0x04
    4fb6:	2f 30       	cpi	r18, 0x0F	; 15
    4fb8:	31 05       	cpc	r19, r1
    4fba:	79 f1       	breq	.+94     	; 0x501a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    4fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4fc0:	80 31       	cpi	r24, 0x10	; 16
    4fc2:	91 05       	cpc	r25, r1
    4fc4:	69 f1       	breq	.+90     	; 0x5020 <KEYPAD_4x4_adjustKeyNumber+0x134>
    4fc6:	2f c0       	rjmp	.+94     	; 0x5026 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    4fc8:	87 e0       	ldi	r24, 0x07	; 7
    4fca:	89 83       	std	Y+1, r24	; 0x01
    4fcc:	2e c0       	rjmp	.+92     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    4fce:	88 e0       	ldi	r24, 0x08	; 8
    4fd0:	89 83       	std	Y+1, r24	; 0x01
    4fd2:	2b c0       	rjmp	.+86     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    4fd4:	89 e0       	ldi	r24, 0x09	; 9
    4fd6:	89 83       	std	Y+1, r24	; 0x01
    4fd8:	28 c0       	rjmp	.+80     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    4fda:	85 e2       	ldi	r24, 0x25	; 37
    4fdc:	89 83       	std	Y+1, r24	; 0x01
    4fde:	25 c0       	rjmp	.+74     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    4fe0:	84 e0       	ldi	r24, 0x04	; 4
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    4fe4:	22 c0       	rjmp	.+68     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    4fe6:	85 e0       	ldi	r24, 0x05	; 5
    4fe8:	89 83       	std	Y+1, r24	; 0x01
    4fea:	1f c0       	rjmp	.+62     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    4fec:	86 e0       	ldi	r24, 0x06	; 6
    4fee:	89 83       	std	Y+1, r24	; 0x01
    4ff0:	1c c0       	rjmp	.+56     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    4ff2:	8a e2       	ldi	r24, 0x2A	; 42
    4ff4:	89 83       	std	Y+1, r24	; 0x01
    4ff6:	19 c0       	rjmp	.+50     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	89 83       	std	Y+1, r24	; 0x01
    4ffc:	16 c0       	rjmp	.+44     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    4ffe:	82 e0       	ldi	r24, 0x02	; 2
    5000:	89 83       	std	Y+1, r24	; 0x01
    5002:	13 c0       	rjmp	.+38     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    5004:	83 e0       	ldi	r24, 0x03	; 3
    5006:	89 83       	std	Y+1, r24	; 0x01
    5008:	10 c0       	rjmp	.+32     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    500a:	8d e2       	ldi	r24, 0x2D	; 45
    500c:	89 83       	std	Y+1, r24	; 0x01
    500e:	0d c0       	rjmp	.+26     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    5010:	8d e0       	ldi	r24, 0x0D	; 13
    5012:	89 83       	std	Y+1, r24	; 0x01
    5014:	0a c0       	rjmp	.+20     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    5016:	19 82       	std	Y+1, r1	; 0x01
    5018:	08 c0       	rjmp	.+16     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    501a:	8d e3       	ldi	r24, 0x3D	; 61
    501c:	89 83       	std	Y+1, r24	; 0x01
    501e:	05 c0       	rjmp	.+10     	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    5020:	8b e2       	ldi	r24, 0x2B	; 43
    5022:	89 83       	std	Y+1, r24	; 0x01
    5024:	02 c0       	rjmp	.+4      	; 0x502a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    5026:	8a 81       	ldd	r24, Y+2	; 0x02
    5028:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    502a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    502c:	0f 90       	pop	r0
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	cf 91       	pop	r28
    5036:	df 91       	pop	r29
    5038:	08 95       	ret

0000503a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    503a:	df 93       	push	r29
    503c:	cf 93       	push	r28
    503e:	cd b7       	in	r28, 0x3d	; 61
    5040:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	62 e0       	ldi	r22, 0x02	; 2
    5046:	41 e0       	ldi	r20, 0x01	; 1
    5048:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	60 e0       	ldi	r22, 0x00	; 0
    5050:	41 e0       	ldi	r20, 0x01	; 1
    5052:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	6f ef       	ldi	r22, 0xFF	; 255
    505a:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    505e:	88 e3       	ldi	r24, 0x38	; 56
    5060:	0e 94 3b 28 	call	0x5076	; 0x5076 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    5064:	8c e0       	ldi	r24, 0x0C	; 12
    5066:	0e 94 3b 28 	call	0x5076	; 0x5076 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	0e 94 3b 28 	call	0x5076	; 0x5076 <LCD_sendCommand>
}
    5070:	cf 91       	pop	r28
    5072:	df 91       	pop	r29
    5074:	08 95       	ret

00005076 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    5076:	df 93       	push	r29
    5078:	cf 93       	push	r28
    507a:	cd b7       	in	r28, 0x3d	; 61
    507c:	de b7       	in	r29, 0x3e	; 62
    507e:	e9 97       	sbiw	r28, 0x39	; 57
    5080:	0f b6       	in	r0, 0x3f	; 63
    5082:	f8 94       	cli
    5084:	de bf       	out	0x3e, r29	; 62
    5086:	0f be       	out	0x3f, r0	; 63
    5088:	cd bf       	out	0x3d, r28	; 61
    508a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	62 e0       	ldi	r22, 0x02	; 2
    5090:	40 e0       	ldi	r20, 0x00	; 0
    5092:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	a0 e8       	ldi	r26, 0x80	; 128
    509c:	bf e3       	ldi	r27, 0x3F	; 63
    509e:	8d ab       	std	Y+53, r24	; 0x35
    50a0:	9e ab       	std	Y+54, r25	; 0x36
    50a2:	af ab       	std	Y+55, r26	; 0x37
    50a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50a6:	6d a9       	ldd	r22, Y+53	; 0x35
    50a8:	7e a9       	ldd	r23, Y+54	; 0x36
    50aa:	8f a9       	ldd	r24, Y+55	; 0x37
    50ac:	98 ad       	ldd	r25, Y+56	; 0x38
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	4a ef       	ldi	r20, 0xFA	; 250
    50b4:	54 e4       	ldi	r21, 0x44	; 68
    50b6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    50ba:	dc 01       	movw	r26, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	89 ab       	std	Y+49, r24	; 0x31
    50c0:	9a ab       	std	Y+50, r25	; 0x32
    50c2:	ab ab       	std	Y+51, r26	; 0x33
    50c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    50c6:	69 a9       	ldd	r22, Y+49	; 0x31
    50c8:	7a a9       	ldd	r23, Y+50	; 0x32
    50ca:	8b a9       	ldd	r24, Y+51	; 0x33
    50cc:	9c a9       	ldd	r25, Y+52	; 0x34
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	40 e8       	ldi	r20, 0x80	; 128
    50d4:	5f e3       	ldi	r21, 0x3F	; 63
    50d6:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    50da:	88 23       	and	r24, r24
    50dc:	2c f4       	brge	.+10     	; 0x50e8 <LCD_sendCommand+0x72>
		__ticks = 1;
    50de:	81 e0       	ldi	r24, 0x01	; 1
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	98 ab       	std	Y+48, r25	; 0x30
    50e4:	8f a7       	std	Y+47, r24	; 0x2f
    50e6:	3f c0       	rjmp	.+126    	; 0x5166 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    50e8:	69 a9       	ldd	r22, Y+49	; 0x31
    50ea:	7a a9       	ldd	r23, Y+50	; 0x32
    50ec:	8b a9       	ldd	r24, Y+51	; 0x33
    50ee:	9c a9       	ldd	r25, Y+52	; 0x34
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	3f ef       	ldi	r19, 0xFF	; 255
    50f4:	4f e7       	ldi	r20, 0x7F	; 127
    50f6:	57 e4       	ldi	r21, 0x47	; 71
    50f8:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    50fc:	18 16       	cp	r1, r24
    50fe:	4c f5       	brge	.+82     	; 0x5152 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5100:	6d a9       	ldd	r22, Y+53	; 0x35
    5102:	7e a9       	ldd	r23, Y+54	; 0x36
    5104:	8f a9       	ldd	r24, Y+55	; 0x37
    5106:	98 ad       	ldd	r25, Y+56	; 0x38
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	40 e2       	ldi	r20, 0x20	; 32
    510e:	51 e4       	ldi	r21, 0x41	; 65
    5110:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	bc 01       	movw	r22, r24
    511a:	cd 01       	movw	r24, r26
    511c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	98 ab       	std	Y+48, r25	; 0x30
    5126:	8f a7       	std	Y+47, r24	; 0x2f
    5128:	0f c0       	rjmp	.+30     	; 0x5148 <LCD_sendCommand+0xd2>
    512a:	88 ec       	ldi	r24, 0xC8	; 200
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	9e a7       	std	Y+46, r25	; 0x2e
    5130:	8d a7       	std	Y+45, r24	; 0x2d
    5132:	8d a5       	ldd	r24, Y+45	; 0x2d
    5134:	9e a5       	ldd	r25, Y+46	; 0x2e
    5136:	01 97       	sbiw	r24, 0x01	; 1
    5138:	f1 f7       	brne	.-4      	; 0x5136 <LCD_sendCommand+0xc0>
    513a:	9e a7       	std	Y+46, r25	; 0x2e
    513c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    513e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5140:	98 a9       	ldd	r25, Y+48	; 0x30
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	98 ab       	std	Y+48, r25	; 0x30
    5146:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5148:	8f a5       	ldd	r24, Y+47	; 0x2f
    514a:	98 a9       	ldd	r25, Y+48	; 0x30
    514c:	00 97       	sbiw	r24, 0x00	; 0
    514e:	69 f7       	brne	.-38     	; 0x512a <LCD_sendCommand+0xb4>
    5150:	14 c0       	rjmp	.+40     	; 0x517a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5152:	69 a9       	ldd	r22, Y+49	; 0x31
    5154:	7a a9       	ldd	r23, Y+50	; 0x32
    5156:	8b a9       	ldd	r24, Y+51	; 0x33
    5158:	9c a9       	ldd	r25, Y+52	; 0x34
    515a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    515e:	dc 01       	movw	r26, r24
    5160:	cb 01       	movw	r24, r22
    5162:	98 ab       	std	Y+48, r25	; 0x30
    5164:	8f a7       	std	Y+47, r24	; 0x2f
    5166:	8f a5       	ldd	r24, Y+47	; 0x2f
    5168:	98 a9       	ldd	r25, Y+48	; 0x30
    516a:	9c a7       	std	Y+44, r25	; 0x2c
    516c:	8b a7       	std	Y+43, r24	; 0x2b
    516e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5170:	9c a5       	ldd	r25, Y+44	; 0x2c
    5172:	01 97       	sbiw	r24, 0x01	; 1
    5174:	f1 f7       	brne	.-4      	; 0x5172 <LCD_sendCommand+0xfc>
    5176:	9c a7       	std	Y+44, r25	; 0x2c
    5178:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    517a:	81 e0       	ldi	r24, 0x01	; 1
    517c:	60 e0       	ldi	r22, 0x00	; 0
    517e:	41 e0       	ldi	r20, 0x01	; 1
    5180:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	a0 e8       	ldi	r26, 0x80	; 128
    518a:	bf e3       	ldi	r27, 0x3F	; 63
    518c:	8f a3       	std	Y+39, r24	; 0x27
    518e:	98 a7       	std	Y+40, r25	; 0x28
    5190:	a9 a7       	std	Y+41, r26	; 0x29
    5192:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5194:	6f a1       	ldd	r22, Y+39	; 0x27
    5196:	78 a5       	ldd	r23, Y+40	; 0x28
    5198:	89 a5       	ldd	r24, Y+41	; 0x29
    519a:	9a a5       	ldd	r25, Y+42	; 0x2a
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	4a ef       	ldi	r20, 0xFA	; 250
    51a2:	54 e4       	ldi	r21, 0x44	; 68
    51a4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	8b a3       	std	Y+35, r24	; 0x23
    51ae:	9c a3       	std	Y+36, r25	; 0x24
    51b0:	ad a3       	std	Y+37, r26	; 0x25
    51b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    51b4:	6b a1       	ldd	r22, Y+35	; 0x23
    51b6:	7c a1       	ldd	r23, Y+36	; 0x24
    51b8:	8d a1       	ldd	r24, Y+37	; 0x25
    51ba:	9e a1       	ldd	r25, Y+38	; 0x26
    51bc:	20 e0       	ldi	r18, 0x00	; 0
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	40 e8       	ldi	r20, 0x80	; 128
    51c2:	5f e3       	ldi	r21, 0x3F	; 63
    51c4:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    51c8:	88 23       	and	r24, r24
    51ca:	2c f4       	brge	.+10     	; 0x51d6 <LCD_sendCommand+0x160>
		__ticks = 1;
    51cc:	81 e0       	ldi	r24, 0x01	; 1
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	9a a3       	std	Y+34, r25	; 0x22
    51d2:	89 a3       	std	Y+33, r24	; 0x21
    51d4:	3f c0       	rjmp	.+126    	; 0x5254 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    51d6:	6b a1       	ldd	r22, Y+35	; 0x23
    51d8:	7c a1       	ldd	r23, Y+36	; 0x24
    51da:	8d a1       	ldd	r24, Y+37	; 0x25
    51dc:	9e a1       	ldd	r25, Y+38	; 0x26
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	3f ef       	ldi	r19, 0xFF	; 255
    51e2:	4f e7       	ldi	r20, 0x7F	; 127
    51e4:	57 e4       	ldi	r21, 0x47	; 71
    51e6:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    51ea:	18 16       	cp	r1, r24
    51ec:	4c f5       	brge	.+82     	; 0x5240 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ee:	6f a1       	ldd	r22, Y+39	; 0x27
    51f0:	78 a5       	ldd	r23, Y+40	; 0x28
    51f2:	89 a5       	ldd	r24, Y+41	; 0x29
    51f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    51f6:	20 e0       	ldi	r18, 0x00	; 0
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	40 e2       	ldi	r20, 0x20	; 32
    51fc:	51 e4       	ldi	r21, 0x41	; 65
    51fe:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5202:	dc 01       	movw	r26, r24
    5204:	cb 01       	movw	r24, r22
    5206:	bc 01       	movw	r22, r24
    5208:	cd 01       	movw	r24, r26
    520a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    520e:	dc 01       	movw	r26, r24
    5210:	cb 01       	movw	r24, r22
    5212:	9a a3       	std	Y+34, r25	; 0x22
    5214:	89 a3       	std	Y+33, r24	; 0x21
    5216:	0f c0       	rjmp	.+30     	; 0x5236 <LCD_sendCommand+0x1c0>
    5218:	88 ec       	ldi	r24, 0xC8	; 200
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	98 a3       	std	Y+32, r25	; 0x20
    521e:	8f 8f       	std	Y+31, r24	; 0x1f
    5220:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5222:	98 a1       	ldd	r25, Y+32	; 0x20
    5224:	01 97       	sbiw	r24, 0x01	; 1
    5226:	f1 f7       	brne	.-4      	; 0x5224 <LCD_sendCommand+0x1ae>
    5228:	98 a3       	std	Y+32, r25	; 0x20
    522a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    522c:	89 a1       	ldd	r24, Y+33	; 0x21
    522e:	9a a1       	ldd	r25, Y+34	; 0x22
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	9a a3       	std	Y+34, r25	; 0x22
    5234:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5236:	89 a1       	ldd	r24, Y+33	; 0x21
    5238:	9a a1       	ldd	r25, Y+34	; 0x22
    523a:	00 97       	sbiw	r24, 0x00	; 0
    523c:	69 f7       	brne	.-38     	; 0x5218 <LCD_sendCommand+0x1a2>
    523e:	14 c0       	rjmp	.+40     	; 0x5268 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5240:	6b a1       	ldd	r22, Y+35	; 0x23
    5242:	7c a1       	ldd	r23, Y+36	; 0x24
    5244:	8d a1       	ldd	r24, Y+37	; 0x25
    5246:	9e a1       	ldd	r25, Y+38	; 0x26
    5248:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	9a a3       	std	Y+34, r25	; 0x22
    5252:	89 a3       	std	Y+33, r24	; 0x21
    5254:	89 a1       	ldd	r24, Y+33	; 0x21
    5256:	9a a1       	ldd	r25, Y+34	; 0x22
    5258:	9e 8f       	std	Y+30, r25	; 0x1e
    525a:	8d 8f       	std	Y+29, r24	; 0x1d
    525c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    525e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5260:	01 97       	sbiw	r24, 0x01	; 1
    5262:	f1 f7       	brne	.-4      	; 0x5260 <LCD_sendCommand+0x1ea>
    5264:	9e 8f       	std	Y+30, r25	; 0x1e
    5266:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	69 ad       	ldd	r22, Y+57	; 0x39
    526c:	0e 94 00 26 	call	0x4c00	; 0x4c00 <GPIO_writePort>
    5270:	80 e0       	ldi	r24, 0x00	; 0
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	a0 e8       	ldi	r26, 0x80	; 128
    5276:	bf e3       	ldi	r27, 0x3F	; 63
    5278:	89 8f       	std	Y+25, r24	; 0x19
    527a:	9a 8f       	std	Y+26, r25	; 0x1a
    527c:	ab 8f       	std	Y+27, r26	; 0x1b
    527e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5280:	69 8d       	ldd	r22, Y+25	; 0x19
    5282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5288:	20 e0       	ldi	r18, 0x00	; 0
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	4a ef       	ldi	r20, 0xFA	; 250
    528e:	54 e4       	ldi	r21, 0x44	; 68
    5290:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5294:	dc 01       	movw	r26, r24
    5296:	cb 01       	movw	r24, r22
    5298:	8d 8b       	std	Y+21, r24	; 0x15
    529a:	9e 8b       	std	Y+22, r25	; 0x16
    529c:	af 8b       	std	Y+23, r26	; 0x17
    529e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52a0:	6d 89       	ldd	r22, Y+21	; 0x15
    52a2:	7e 89       	ldd	r23, Y+22	; 0x16
    52a4:	8f 89       	ldd	r24, Y+23	; 0x17
    52a6:	98 8d       	ldd	r25, Y+24	; 0x18
    52a8:	20 e0       	ldi	r18, 0x00	; 0
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	40 e8       	ldi	r20, 0x80	; 128
    52ae:	5f e3       	ldi	r21, 0x3F	; 63
    52b0:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    52b4:	88 23       	and	r24, r24
    52b6:	2c f4       	brge	.+10     	; 0x52c2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	9c 8b       	std	Y+20, r25	; 0x14
    52be:	8b 8b       	std	Y+19, r24	; 0x13
    52c0:	3f c0       	rjmp	.+126    	; 0x5340 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    52c2:	6d 89       	ldd	r22, Y+21	; 0x15
    52c4:	7e 89       	ldd	r23, Y+22	; 0x16
    52c6:	8f 89       	ldd	r24, Y+23	; 0x17
    52c8:	98 8d       	ldd	r25, Y+24	; 0x18
    52ca:	20 e0       	ldi	r18, 0x00	; 0
    52cc:	3f ef       	ldi	r19, 0xFF	; 255
    52ce:	4f e7       	ldi	r20, 0x7F	; 127
    52d0:	57 e4       	ldi	r21, 0x47	; 71
    52d2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    52d6:	18 16       	cp	r1, r24
    52d8:	4c f5       	brge	.+82     	; 0x532c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52da:	69 8d       	ldd	r22, Y+25	; 0x19
    52dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52e2:	20 e0       	ldi	r18, 0x00	; 0
    52e4:	30 e0       	ldi	r19, 0x00	; 0
    52e6:	40 e2       	ldi	r20, 0x20	; 32
    52e8:	51 e4       	ldi	r21, 0x41	; 65
    52ea:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    52ee:	dc 01       	movw	r26, r24
    52f0:	cb 01       	movw	r24, r22
    52f2:	bc 01       	movw	r22, r24
    52f4:	cd 01       	movw	r24, r26
    52f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	9c 8b       	std	Y+20, r25	; 0x14
    5300:	8b 8b       	std	Y+19, r24	; 0x13
    5302:	0f c0       	rjmp	.+30     	; 0x5322 <LCD_sendCommand+0x2ac>
    5304:	88 ec       	ldi	r24, 0xC8	; 200
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	9a 8b       	std	Y+18, r25	; 0x12
    530a:	89 8b       	std	Y+17, r24	; 0x11
    530c:	89 89       	ldd	r24, Y+17	; 0x11
    530e:	9a 89       	ldd	r25, Y+18	; 0x12
    5310:	01 97       	sbiw	r24, 0x01	; 1
    5312:	f1 f7       	brne	.-4      	; 0x5310 <LCD_sendCommand+0x29a>
    5314:	9a 8b       	std	Y+18, r25	; 0x12
    5316:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5318:	8b 89       	ldd	r24, Y+19	; 0x13
    531a:	9c 89       	ldd	r25, Y+20	; 0x14
    531c:	01 97       	sbiw	r24, 0x01	; 1
    531e:	9c 8b       	std	Y+20, r25	; 0x14
    5320:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5322:	8b 89       	ldd	r24, Y+19	; 0x13
    5324:	9c 89       	ldd	r25, Y+20	; 0x14
    5326:	00 97       	sbiw	r24, 0x00	; 0
    5328:	69 f7       	brne	.-38     	; 0x5304 <LCD_sendCommand+0x28e>
    532a:	14 c0       	rjmp	.+40     	; 0x5354 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    532c:	6d 89       	ldd	r22, Y+21	; 0x15
    532e:	7e 89       	ldd	r23, Y+22	; 0x16
    5330:	8f 89       	ldd	r24, Y+23	; 0x17
    5332:	98 8d       	ldd	r25, Y+24	; 0x18
    5334:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5338:	dc 01       	movw	r26, r24
    533a:	cb 01       	movw	r24, r22
    533c:	9c 8b       	std	Y+20, r25	; 0x14
    533e:	8b 8b       	std	Y+19, r24	; 0x13
    5340:	8b 89       	ldd	r24, Y+19	; 0x13
    5342:	9c 89       	ldd	r25, Y+20	; 0x14
    5344:	98 8b       	std	Y+16, r25	; 0x10
    5346:	8f 87       	std	Y+15, r24	; 0x0f
    5348:	8f 85       	ldd	r24, Y+15	; 0x0f
    534a:	98 89       	ldd	r25, Y+16	; 0x10
    534c:	01 97       	sbiw	r24, 0x01	; 1
    534e:	f1 f7       	brne	.-4      	; 0x534c <LCD_sendCommand+0x2d6>
    5350:	98 8b       	std	Y+16, r25	; 0x10
    5352:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    5354:	81 e0       	ldi	r24, 0x01	; 1
    5356:	60 e0       	ldi	r22, 0x00	; 0
    5358:	40 e0       	ldi	r20, 0x00	; 0
    535a:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	a0 e8       	ldi	r26, 0x80	; 128
    5364:	bf e3       	ldi	r27, 0x3F	; 63
    5366:	8b 87       	std	Y+11, r24	; 0x0b
    5368:	9c 87       	std	Y+12, r25	; 0x0c
    536a:	ad 87       	std	Y+13, r26	; 0x0d
    536c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    536e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5370:	7c 85       	ldd	r23, Y+12	; 0x0c
    5372:	8d 85       	ldd	r24, Y+13	; 0x0d
    5374:	9e 85       	ldd	r25, Y+14	; 0x0e
    5376:	20 e0       	ldi	r18, 0x00	; 0
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	4a ef       	ldi	r20, 0xFA	; 250
    537c:	54 e4       	ldi	r21, 0x44	; 68
    537e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5382:	dc 01       	movw	r26, r24
    5384:	cb 01       	movw	r24, r22
    5386:	8f 83       	std	Y+7, r24	; 0x07
    5388:	98 87       	std	Y+8, r25	; 0x08
    538a:	a9 87       	std	Y+9, r26	; 0x09
    538c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    538e:	6f 81       	ldd	r22, Y+7	; 0x07
    5390:	78 85       	ldd	r23, Y+8	; 0x08
    5392:	89 85       	ldd	r24, Y+9	; 0x09
    5394:	9a 85       	ldd	r25, Y+10	; 0x0a
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	40 e8       	ldi	r20, 0x80	; 128
    539c:	5f e3       	ldi	r21, 0x3F	; 63
    539e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    53a2:	88 23       	and	r24, r24
    53a4:	2c f4       	brge	.+10     	; 0x53b0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	9e 83       	std	Y+6, r25	; 0x06
    53ac:	8d 83       	std	Y+5, r24	; 0x05
    53ae:	3f c0       	rjmp	.+126    	; 0x542e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    53b0:	6f 81       	ldd	r22, Y+7	; 0x07
    53b2:	78 85       	ldd	r23, Y+8	; 0x08
    53b4:	89 85       	ldd	r24, Y+9	; 0x09
    53b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53b8:	20 e0       	ldi	r18, 0x00	; 0
    53ba:	3f ef       	ldi	r19, 0xFF	; 255
    53bc:	4f e7       	ldi	r20, 0x7F	; 127
    53be:	57 e4       	ldi	r21, 0x47	; 71
    53c0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    53c4:	18 16       	cp	r1, r24
    53c6:	4c f5       	brge	.+82     	; 0x541a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    53cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    53ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	40 e2       	ldi	r20, 0x20	; 32
    53d6:	51 e4       	ldi	r21, 0x41	; 65
    53d8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    53dc:	dc 01       	movw	r26, r24
    53de:	cb 01       	movw	r24, r22
    53e0:	bc 01       	movw	r22, r24
    53e2:	cd 01       	movw	r24, r26
    53e4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	9e 83       	std	Y+6, r25	; 0x06
    53ee:	8d 83       	std	Y+5, r24	; 0x05
    53f0:	0f c0       	rjmp	.+30     	; 0x5410 <LCD_sendCommand+0x39a>
    53f2:	88 ec       	ldi	r24, 0xC8	; 200
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	9c 83       	std	Y+4, r25	; 0x04
    53f8:	8b 83       	std	Y+3, r24	; 0x03
    53fa:	8b 81       	ldd	r24, Y+3	; 0x03
    53fc:	9c 81       	ldd	r25, Y+4	; 0x04
    53fe:	01 97       	sbiw	r24, 0x01	; 1
    5400:	f1 f7       	brne	.-4      	; 0x53fe <LCD_sendCommand+0x388>
    5402:	9c 83       	std	Y+4, r25	; 0x04
    5404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5406:	8d 81       	ldd	r24, Y+5	; 0x05
    5408:	9e 81       	ldd	r25, Y+6	; 0x06
    540a:	01 97       	sbiw	r24, 0x01	; 1
    540c:	9e 83       	std	Y+6, r25	; 0x06
    540e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5410:	8d 81       	ldd	r24, Y+5	; 0x05
    5412:	9e 81       	ldd	r25, Y+6	; 0x06
    5414:	00 97       	sbiw	r24, 0x00	; 0
    5416:	69 f7       	brne	.-38     	; 0x53f2 <LCD_sendCommand+0x37c>
    5418:	14 c0       	rjmp	.+40     	; 0x5442 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    541a:	6f 81       	ldd	r22, Y+7	; 0x07
    541c:	78 85       	ldd	r23, Y+8	; 0x08
    541e:	89 85       	ldd	r24, Y+9	; 0x09
    5420:	9a 85       	ldd	r25, Y+10	; 0x0a
    5422:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	9e 83       	std	Y+6, r25	; 0x06
    542c:	8d 83       	std	Y+5, r24	; 0x05
    542e:	8d 81       	ldd	r24, Y+5	; 0x05
    5430:	9e 81       	ldd	r25, Y+6	; 0x06
    5432:	9a 83       	std	Y+2, r25	; 0x02
    5434:	89 83       	std	Y+1, r24	; 0x01
    5436:	89 81       	ldd	r24, Y+1	; 0x01
    5438:	9a 81       	ldd	r25, Y+2	; 0x02
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <LCD_sendCommand+0x3c4>
    543e:	9a 83       	std	Y+2, r25	; 0x02
    5440:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    5442:	e9 96       	adiw	r28, 0x39	; 57
    5444:	0f b6       	in	r0, 0x3f	; 63
    5446:	f8 94       	cli
    5448:	de bf       	out	0x3e, r29	; 62
    544a:	0f be       	out	0x3f, r0	; 63
    544c:	cd bf       	out	0x3d, r28	; 61
    544e:	cf 91       	pop	r28
    5450:	df 91       	pop	r29
    5452:	08 95       	ret

00005454 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    5454:	df 93       	push	r29
    5456:	cf 93       	push	r28
    5458:	cd b7       	in	r28, 0x3d	; 61
    545a:	de b7       	in	r29, 0x3e	; 62
    545c:	e9 97       	sbiw	r28, 0x39	; 57
    545e:	0f b6       	in	r0, 0x3f	; 63
    5460:	f8 94       	cli
    5462:	de bf       	out	0x3e, r29	; 62
    5464:	0f be       	out	0x3f, r0	; 63
    5466:	cd bf       	out	0x3d, r28	; 61
    5468:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	62 e0       	ldi	r22, 0x02	; 2
    546e:	41 e0       	ldi	r20, 0x01	; 1
    5470:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	a0 e8       	ldi	r26, 0x80	; 128
    547a:	bf e3       	ldi	r27, 0x3F	; 63
    547c:	8d ab       	std	Y+53, r24	; 0x35
    547e:	9e ab       	std	Y+54, r25	; 0x36
    5480:	af ab       	std	Y+55, r26	; 0x37
    5482:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5484:	6d a9       	ldd	r22, Y+53	; 0x35
    5486:	7e a9       	ldd	r23, Y+54	; 0x36
    5488:	8f a9       	ldd	r24, Y+55	; 0x37
    548a:	98 ad       	ldd	r25, Y+56	; 0x38
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	4a ef       	ldi	r20, 0xFA	; 250
    5492:	54 e4       	ldi	r21, 0x44	; 68
    5494:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5498:	dc 01       	movw	r26, r24
    549a:	cb 01       	movw	r24, r22
    549c:	89 ab       	std	Y+49, r24	; 0x31
    549e:	9a ab       	std	Y+50, r25	; 0x32
    54a0:	ab ab       	std	Y+51, r26	; 0x33
    54a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    54a4:	69 a9       	ldd	r22, Y+49	; 0x31
    54a6:	7a a9       	ldd	r23, Y+50	; 0x32
    54a8:	8b a9       	ldd	r24, Y+51	; 0x33
    54aa:	9c a9       	ldd	r25, Y+52	; 0x34
    54ac:	20 e0       	ldi	r18, 0x00	; 0
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	40 e8       	ldi	r20, 0x80	; 128
    54b2:	5f e3       	ldi	r21, 0x3F	; 63
    54b4:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    54b8:	88 23       	and	r24, r24
    54ba:	2c f4       	brge	.+10     	; 0x54c6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	98 ab       	std	Y+48, r25	; 0x30
    54c2:	8f a7       	std	Y+47, r24	; 0x2f
    54c4:	3f c0       	rjmp	.+126    	; 0x5544 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    54c6:	69 a9       	ldd	r22, Y+49	; 0x31
    54c8:	7a a9       	ldd	r23, Y+50	; 0x32
    54ca:	8b a9       	ldd	r24, Y+51	; 0x33
    54cc:	9c a9       	ldd	r25, Y+52	; 0x34
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	3f ef       	ldi	r19, 0xFF	; 255
    54d2:	4f e7       	ldi	r20, 0x7F	; 127
    54d4:	57 e4       	ldi	r21, 0x47	; 71
    54d6:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    54da:	18 16       	cp	r1, r24
    54dc:	4c f5       	brge	.+82     	; 0x5530 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54de:	6d a9       	ldd	r22, Y+53	; 0x35
    54e0:	7e a9       	ldd	r23, Y+54	; 0x36
    54e2:	8f a9       	ldd	r24, Y+55	; 0x37
    54e4:	98 ad       	ldd	r25, Y+56	; 0x38
    54e6:	20 e0       	ldi	r18, 0x00	; 0
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e2       	ldi	r20, 0x20	; 32
    54ec:	51 e4       	ldi	r21, 0x41	; 65
    54ee:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    54f2:	dc 01       	movw	r26, r24
    54f4:	cb 01       	movw	r24, r22
    54f6:	bc 01       	movw	r22, r24
    54f8:	cd 01       	movw	r24, r26
    54fa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    54fe:	dc 01       	movw	r26, r24
    5500:	cb 01       	movw	r24, r22
    5502:	98 ab       	std	Y+48, r25	; 0x30
    5504:	8f a7       	std	Y+47, r24	; 0x2f
    5506:	0f c0       	rjmp	.+30     	; 0x5526 <LCD_displayCharacter+0xd2>
    5508:	88 ec       	ldi	r24, 0xC8	; 200
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	9e a7       	std	Y+46, r25	; 0x2e
    550e:	8d a7       	std	Y+45, r24	; 0x2d
    5510:	8d a5       	ldd	r24, Y+45	; 0x2d
    5512:	9e a5       	ldd	r25, Y+46	; 0x2e
    5514:	01 97       	sbiw	r24, 0x01	; 1
    5516:	f1 f7       	brne	.-4      	; 0x5514 <LCD_displayCharacter+0xc0>
    5518:	9e a7       	std	Y+46, r25	; 0x2e
    551a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    551c:	8f a5       	ldd	r24, Y+47	; 0x2f
    551e:	98 a9       	ldd	r25, Y+48	; 0x30
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	98 ab       	std	Y+48, r25	; 0x30
    5524:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5526:	8f a5       	ldd	r24, Y+47	; 0x2f
    5528:	98 a9       	ldd	r25, Y+48	; 0x30
    552a:	00 97       	sbiw	r24, 0x00	; 0
    552c:	69 f7       	brne	.-38     	; 0x5508 <LCD_displayCharacter+0xb4>
    552e:	14 c0       	rjmp	.+40     	; 0x5558 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5530:	69 a9       	ldd	r22, Y+49	; 0x31
    5532:	7a a9       	ldd	r23, Y+50	; 0x32
    5534:	8b a9       	ldd	r24, Y+51	; 0x33
    5536:	9c a9       	ldd	r25, Y+52	; 0x34
    5538:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    553c:	dc 01       	movw	r26, r24
    553e:	cb 01       	movw	r24, r22
    5540:	98 ab       	std	Y+48, r25	; 0x30
    5542:	8f a7       	std	Y+47, r24	; 0x2f
    5544:	8f a5       	ldd	r24, Y+47	; 0x2f
    5546:	98 a9       	ldd	r25, Y+48	; 0x30
    5548:	9c a7       	std	Y+44, r25	; 0x2c
    554a:	8b a7       	std	Y+43, r24	; 0x2b
    554c:	8b a5       	ldd	r24, Y+43	; 0x2b
    554e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5550:	01 97       	sbiw	r24, 0x01	; 1
    5552:	f1 f7       	brne	.-4      	; 0x5550 <LCD_displayCharacter+0xfc>
    5554:	9c a7       	std	Y+44, r25	; 0x2c
    5556:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	60 e0       	ldi	r22, 0x00	; 0
    555c:	41 e0       	ldi	r20, 0x01	; 1
    555e:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	a0 e8       	ldi	r26, 0x80	; 128
    5568:	bf e3       	ldi	r27, 0x3F	; 63
    556a:	8f a3       	std	Y+39, r24	; 0x27
    556c:	98 a7       	std	Y+40, r25	; 0x28
    556e:	a9 a7       	std	Y+41, r26	; 0x29
    5570:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5572:	6f a1       	ldd	r22, Y+39	; 0x27
    5574:	78 a5       	ldd	r23, Y+40	; 0x28
    5576:	89 a5       	ldd	r24, Y+41	; 0x29
    5578:	9a a5       	ldd	r25, Y+42	; 0x2a
    557a:	20 e0       	ldi	r18, 0x00	; 0
    557c:	30 e0       	ldi	r19, 0x00	; 0
    557e:	4a ef       	ldi	r20, 0xFA	; 250
    5580:	54 e4       	ldi	r21, 0x44	; 68
    5582:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5586:	dc 01       	movw	r26, r24
    5588:	cb 01       	movw	r24, r22
    558a:	8b a3       	std	Y+35, r24	; 0x23
    558c:	9c a3       	std	Y+36, r25	; 0x24
    558e:	ad a3       	std	Y+37, r26	; 0x25
    5590:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5592:	6b a1       	ldd	r22, Y+35	; 0x23
    5594:	7c a1       	ldd	r23, Y+36	; 0x24
    5596:	8d a1       	ldd	r24, Y+37	; 0x25
    5598:	9e a1       	ldd	r25, Y+38	; 0x26
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	30 e0       	ldi	r19, 0x00	; 0
    559e:	40 e8       	ldi	r20, 0x80	; 128
    55a0:	5f e3       	ldi	r21, 0x3F	; 63
    55a2:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    55a6:	88 23       	and	r24, r24
    55a8:	2c f4       	brge	.+10     	; 0x55b4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	90 e0       	ldi	r25, 0x00	; 0
    55ae:	9a a3       	std	Y+34, r25	; 0x22
    55b0:	89 a3       	std	Y+33, r24	; 0x21
    55b2:	3f c0       	rjmp	.+126    	; 0x5632 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    55b4:	6b a1       	ldd	r22, Y+35	; 0x23
    55b6:	7c a1       	ldd	r23, Y+36	; 0x24
    55b8:	8d a1       	ldd	r24, Y+37	; 0x25
    55ba:	9e a1       	ldd	r25, Y+38	; 0x26
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	3f ef       	ldi	r19, 0xFF	; 255
    55c0:	4f e7       	ldi	r20, 0x7F	; 127
    55c2:	57 e4       	ldi	r21, 0x47	; 71
    55c4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    55c8:	18 16       	cp	r1, r24
    55ca:	4c f5       	brge	.+82     	; 0x561e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55cc:	6f a1       	ldd	r22, Y+39	; 0x27
    55ce:	78 a5       	ldd	r23, Y+40	; 0x28
    55d0:	89 a5       	ldd	r24, Y+41	; 0x29
    55d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    55d4:	20 e0       	ldi	r18, 0x00	; 0
    55d6:	30 e0       	ldi	r19, 0x00	; 0
    55d8:	40 e2       	ldi	r20, 0x20	; 32
    55da:	51 e4       	ldi	r21, 0x41	; 65
    55dc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    55e0:	dc 01       	movw	r26, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	bc 01       	movw	r22, r24
    55e6:	cd 01       	movw	r24, r26
    55e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    55ec:	dc 01       	movw	r26, r24
    55ee:	cb 01       	movw	r24, r22
    55f0:	9a a3       	std	Y+34, r25	; 0x22
    55f2:	89 a3       	std	Y+33, r24	; 0x21
    55f4:	0f c0       	rjmp	.+30     	; 0x5614 <LCD_displayCharacter+0x1c0>
    55f6:	88 ec       	ldi	r24, 0xC8	; 200
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	98 a3       	std	Y+32, r25	; 0x20
    55fc:	8f 8f       	std	Y+31, r24	; 0x1f
    55fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5600:	98 a1       	ldd	r25, Y+32	; 0x20
    5602:	01 97       	sbiw	r24, 0x01	; 1
    5604:	f1 f7       	brne	.-4      	; 0x5602 <LCD_displayCharacter+0x1ae>
    5606:	98 a3       	std	Y+32, r25	; 0x20
    5608:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    560a:	89 a1       	ldd	r24, Y+33	; 0x21
    560c:	9a a1       	ldd	r25, Y+34	; 0x22
    560e:	01 97       	sbiw	r24, 0x01	; 1
    5610:	9a a3       	std	Y+34, r25	; 0x22
    5612:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5614:	89 a1       	ldd	r24, Y+33	; 0x21
    5616:	9a a1       	ldd	r25, Y+34	; 0x22
    5618:	00 97       	sbiw	r24, 0x00	; 0
    561a:	69 f7       	brne	.-38     	; 0x55f6 <LCD_displayCharacter+0x1a2>
    561c:	14 c0       	rjmp	.+40     	; 0x5646 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    561e:	6b a1       	ldd	r22, Y+35	; 0x23
    5620:	7c a1       	ldd	r23, Y+36	; 0x24
    5622:	8d a1       	ldd	r24, Y+37	; 0x25
    5624:	9e a1       	ldd	r25, Y+38	; 0x26
    5626:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    562a:	dc 01       	movw	r26, r24
    562c:	cb 01       	movw	r24, r22
    562e:	9a a3       	std	Y+34, r25	; 0x22
    5630:	89 a3       	std	Y+33, r24	; 0x21
    5632:	89 a1       	ldd	r24, Y+33	; 0x21
    5634:	9a a1       	ldd	r25, Y+34	; 0x22
    5636:	9e 8f       	std	Y+30, r25	; 0x1e
    5638:	8d 8f       	std	Y+29, r24	; 0x1d
    563a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    563c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    563e:	01 97       	sbiw	r24, 0x01	; 1
    5640:	f1 f7       	brne	.-4      	; 0x563e <LCD_displayCharacter+0x1ea>
    5642:	9e 8f       	std	Y+30, r25	; 0x1e
    5644:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    5646:	80 e0       	ldi	r24, 0x00	; 0
    5648:	69 ad       	ldd	r22, Y+57	; 0x39
    564a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <GPIO_writePort>
    564e:	80 e0       	ldi	r24, 0x00	; 0
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	a0 e8       	ldi	r26, 0x80	; 128
    5654:	bf e3       	ldi	r27, 0x3F	; 63
    5656:	89 8f       	std	Y+25, r24	; 0x19
    5658:	9a 8f       	std	Y+26, r25	; 0x1a
    565a:	ab 8f       	std	Y+27, r26	; 0x1b
    565c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    565e:	69 8d       	ldd	r22, Y+25	; 0x19
    5660:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5662:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5664:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5666:	20 e0       	ldi	r18, 0x00	; 0
    5668:	30 e0       	ldi	r19, 0x00	; 0
    566a:	4a ef       	ldi	r20, 0xFA	; 250
    566c:	54 e4       	ldi	r21, 0x44	; 68
    566e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	8d 8b       	std	Y+21, r24	; 0x15
    5678:	9e 8b       	std	Y+22, r25	; 0x16
    567a:	af 8b       	std	Y+23, r26	; 0x17
    567c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    567e:	6d 89       	ldd	r22, Y+21	; 0x15
    5680:	7e 89       	ldd	r23, Y+22	; 0x16
    5682:	8f 89       	ldd	r24, Y+23	; 0x17
    5684:	98 8d       	ldd	r25, Y+24	; 0x18
    5686:	20 e0       	ldi	r18, 0x00	; 0
    5688:	30 e0       	ldi	r19, 0x00	; 0
    568a:	40 e8       	ldi	r20, 0x80	; 128
    568c:	5f e3       	ldi	r21, 0x3F	; 63
    568e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    5692:	88 23       	and	r24, r24
    5694:	2c f4       	brge	.+10     	; 0x56a0 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	9c 8b       	std	Y+20, r25	; 0x14
    569c:	8b 8b       	std	Y+19, r24	; 0x13
    569e:	3f c0       	rjmp	.+126    	; 0x571e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    56a0:	6d 89       	ldd	r22, Y+21	; 0x15
    56a2:	7e 89       	ldd	r23, Y+22	; 0x16
    56a4:	8f 89       	ldd	r24, Y+23	; 0x17
    56a6:	98 8d       	ldd	r25, Y+24	; 0x18
    56a8:	20 e0       	ldi	r18, 0x00	; 0
    56aa:	3f ef       	ldi	r19, 0xFF	; 255
    56ac:	4f e7       	ldi	r20, 0x7F	; 127
    56ae:	57 e4       	ldi	r21, 0x47	; 71
    56b0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    56b4:	18 16       	cp	r1, r24
    56b6:	4c f5       	brge	.+82     	; 0x570a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56b8:	69 8d       	ldd	r22, Y+25	; 0x19
    56ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	40 e2       	ldi	r20, 0x20	; 32
    56c6:	51 e4       	ldi	r21, 0x41	; 65
    56c8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	bc 01       	movw	r22, r24
    56d2:	cd 01       	movw	r24, r26
    56d4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	9c 8b       	std	Y+20, r25	; 0x14
    56de:	8b 8b       	std	Y+19, r24	; 0x13
    56e0:	0f c0       	rjmp	.+30     	; 0x5700 <LCD_displayCharacter+0x2ac>
    56e2:	88 ec       	ldi	r24, 0xC8	; 200
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	9a 8b       	std	Y+18, r25	; 0x12
    56e8:	89 8b       	std	Y+17, r24	; 0x11
    56ea:	89 89       	ldd	r24, Y+17	; 0x11
    56ec:	9a 89       	ldd	r25, Y+18	; 0x12
    56ee:	01 97       	sbiw	r24, 0x01	; 1
    56f0:	f1 f7       	brne	.-4      	; 0x56ee <LCD_displayCharacter+0x29a>
    56f2:	9a 8b       	std	Y+18, r25	; 0x12
    56f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56f6:	8b 89       	ldd	r24, Y+19	; 0x13
    56f8:	9c 89       	ldd	r25, Y+20	; 0x14
    56fa:	01 97       	sbiw	r24, 0x01	; 1
    56fc:	9c 8b       	std	Y+20, r25	; 0x14
    56fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5700:	8b 89       	ldd	r24, Y+19	; 0x13
    5702:	9c 89       	ldd	r25, Y+20	; 0x14
    5704:	00 97       	sbiw	r24, 0x00	; 0
    5706:	69 f7       	brne	.-38     	; 0x56e2 <LCD_displayCharacter+0x28e>
    5708:	14 c0       	rjmp	.+40     	; 0x5732 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    570a:	6d 89       	ldd	r22, Y+21	; 0x15
    570c:	7e 89       	ldd	r23, Y+22	; 0x16
    570e:	8f 89       	ldd	r24, Y+23	; 0x17
    5710:	98 8d       	ldd	r25, Y+24	; 0x18
    5712:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5716:	dc 01       	movw	r26, r24
    5718:	cb 01       	movw	r24, r22
    571a:	9c 8b       	std	Y+20, r25	; 0x14
    571c:	8b 8b       	std	Y+19, r24	; 0x13
    571e:	8b 89       	ldd	r24, Y+19	; 0x13
    5720:	9c 89       	ldd	r25, Y+20	; 0x14
    5722:	98 8b       	std	Y+16, r25	; 0x10
    5724:	8f 87       	std	Y+15, r24	; 0x0f
    5726:	8f 85       	ldd	r24, Y+15	; 0x0f
    5728:	98 89       	ldd	r25, Y+16	; 0x10
    572a:	01 97       	sbiw	r24, 0x01	; 1
    572c:	f1 f7       	brne	.-4      	; 0x572a <LCD_displayCharacter+0x2d6>
    572e:	98 8b       	std	Y+16, r25	; 0x10
    5730:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	60 e0       	ldi	r22, 0x00	; 0
    5736:	40 e0       	ldi	r20, 0x00	; 0
    5738:	0e 94 36 24 	call	0x486c	; 0x486c <GPIO_writePin>
    573c:	80 e0       	ldi	r24, 0x00	; 0
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	a0 e8       	ldi	r26, 0x80	; 128
    5742:	bf e3       	ldi	r27, 0x3F	; 63
    5744:	8b 87       	std	Y+11, r24	; 0x0b
    5746:	9c 87       	std	Y+12, r25	; 0x0c
    5748:	ad 87       	std	Y+13, r26	; 0x0d
    574a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    574c:	6b 85       	ldd	r22, Y+11	; 0x0b
    574e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5750:	8d 85       	ldd	r24, Y+13	; 0x0d
    5752:	9e 85       	ldd	r25, Y+14	; 0x0e
    5754:	20 e0       	ldi	r18, 0x00	; 0
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	4a ef       	ldi	r20, 0xFA	; 250
    575a:	54 e4       	ldi	r21, 0x44	; 68
    575c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5760:	dc 01       	movw	r26, r24
    5762:	cb 01       	movw	r24, r22
    5764:	8f 83       	std	Y+7, r24	; 0x07
    5766:	98 87       	std	Y+8, r25	; 0x08
    5768:	a9 87       	std	Y+9, r26	; 0x09
    576a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    576c:	6f 81       	ldd	r22, Y+7	; 0x07
    576e:	78 85       	ldd	r23, Y+8	; 0x08
    5770:	89 85       	ldd	r24, Y+9	; 0x09
    5772:	9a 85       	ldd	r25, Y+10	; 0x0a
    5774:	20 e0       	ldi	r18, 0x00	; 0
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	40 e8       	ldi	r20, 0x80	; 128
    577a:	5f e3       	ldi	r21, 0x3F	; 63
    577c:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    5780:	88 23       	and	r24, r24
    5782:	2c f4       	brge	.+10     	; 0x578e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	9e 83       	std	Y+6, r25	; 0x06
    578a:	8d 83       	std	Y+5, r24	; 0x05
    578c:	3f c0       	rjmp	.+126    	; 0x580c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    578e:	6f 81       	ldd	r22, Y+7	; 0x07
    5790:	78 85       	ldd	r23, Y+8	; 0x08
    5792:	89 85       	ldd	r24, Y+9	; 0x09
    5794:	9a 85       	ldd	r25, Y+10	; 0x0a
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	3f ef       	ldi	r19, 0xFF	; 255
    579a:	4f e7       	ldi	r20, 0x7F	; 127
    579c:	57 e4       	ldi	r21, 0x47	; 71
    579e:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    57a2:	18 16       	cp	r1, r24
    57a4:	4c f5       	brge	.+82     	; 0x57f8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    57a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    57aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    57ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    57ae:	20 e0       	ldi	r18, 0x00	; 0
    57b0:	30 e0       	ldi	r19, 0x00	; 0
    57b2:	40 e2       	ldi	r20, 0x20	; 32
    57b4:	51 e4       	ldi	r21, 0x41	; 65
    57b6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    57ba:	dc 01       	movw	r26, r24
    57bc:	cb 01       	movw	r24, r22
    57be:	bc 01       	movw	r22, r24
    57c0:	cd 01       	movw	r24, r26
    57c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    57c6:	dc 01       	movw	r26, r24
    57c8:	cb 01       	movw	r24, r22
    57ca:	9e 83       	std	Y+6, r25	; 0x06
    57cc:	8d 83       	std	Y+5, r24	; 0x05
    57ce:	0f c0       	rjmp	.+30     	; 0x57ee <LCD_displayCharacter+0x39a>
    57d0:	88 ec       	ldi	r24, 0xC8	; 200
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	9c 83       	std	Y+4, r25	; 0x04
    57d6:	8b 83       	std	Y+3, r24	; 0x03
    57d8:	8b 81       	ldd	r24, Y+3	; 0x03
    57da:	9c 81       	ldd	r25, Y+4	; 0x04
    57dc:	01 97       	sbiw	r24, 0x01	; 1
    57de:	f1 f7       	brne	.-4      	; 0x57dc <LCD_displayCharacter+0x388>
    57e0:	9c 83       	std	Y+4, r25	; 0x04
    57e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57e4:	8d 81       	ldd	r24, Y+5	; 0x05
    57e6:	9e 81       	ldd	r25, Y+6	; 0x06
    57e8:	01 97       	sbiw	r24, 0x01	; 1
    57ea:	9e 83       	std	Y+6, r25	; 0x06
    57ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ee:	8d 81       	ldd	r24, Y+5	; 0x05
    57f0:	9e 81       	ldd	r25, Y+6	; 0x06
    57f2:	00 97       	sbiw	r24, 0x00	; 0
    57f4:	69 f7       	brne	.-38     	; 0x57d0 <LCD_displayCharacter+0x37c>
    57f6:	14 c0       	rjmp	.+40     	; 0x5820 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57f8:	6f 81       	ldd	r22, Y+7	; 0x07
    57fa:	78 85       	ldd	r23, Y+8	; 0x08
    57fc:	89 85       	ldd	r24, Y+9	; 0x09
    57fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5800:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5804:	dc 01       	movw	r26, r24
    5806:	cb 01       	movw	r24, r22
    5808:	9e 83       	std	Y+6, r25	; 0x06
    580a:	8d 83       	std	Y+5, r24	; 0x05
    580c:	8d 81       	ldd	r24, Y+5	; 0x05
    580e:	9e 81       	ldd	r25, Y+6	; 0x06
    5810:	9a 83       	std	Y+2, r25	; 0x02
    5812:	89 83       	std	Y+1, r24	; 0x01
    5814:	89 81       	ldd	r24, Y+1	; 0x01
    5816:	9a 81       	ldd	r25, Y+2	; 0x02
    5818:	01 97       	sbiw	r24, 0x01	; 1
    581a:	f1 f7       	brne	.-4      	; 0x5818 <LCD_displayCharacter+0x3c4>
    581c:	9a 83       	std	Y+2, r25	; 0x02
    581e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    5820:	e9 96       	adiw	r28, 0x39	; 57
    5822:	0f b6       	in	r0, 0x3f	; 63
    5824:	f8 94       	cli
    5826:	de bf       	out	0x3e, r29	; 62
    5828:	0f be       	out	0x3f, r0	; 63
    582a:	cd bf       	out	0x3d, r28	; 61
    582c:	cf 91       	pop	r28
    582e:	df 91       	pop	r29
    5830:	08 95       	ret

00005832 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    5832:	df 93       	push	r29
    5834:	cf 93       	push	r28
    5836:	00 d0       	rcall	.+0      	; 0x5838 <LCD_displayString+0x6>
    5838:	0f 92       	push	r0
    583a:	cd b7       	in	r28, 0x3d	; 61
    583c:	de b7       	in	r29, 0x3e	; 62
    583e:	9b 83       	std	Y+3, r25	; 0x03
    5840:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5842:	19 82       	std	Y+1, r1	; 0x01
    5844:	0e c0       	rjmp	.+28     	; 0x5862 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    5846:	89 81       	ldd	r24, Y+1	; 0x01
    5848:	28 2f       	mov	r18, r24
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	8a 81       	ldd	r24, Y+2	; 0x02
    584e:	9b 81       	ldd	r25, Y+3	; 0x03
    5850:	fc 01       	movw	r30, r24
    5852:	e2 0f       	add	r30, r18
    5854:	f3 1f       	adc	r31, r19
    5856:	80 81       	ld	r24, Z
    5858:	0e 94 2a 2a 	call	0x5454	; 0x5454 <LCD_displayCharacter>
		i++;
    585c:	89 81       	ldd	r24, Y+1	; 0x01
    585e:	8f 5f       	subi	r24, 0xFF	; 255
    5860:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    5862:	89 81       	ldd	r24, Y+1	; 0x01
    5864:	28 2f       	mov	r18, r24
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	8a 81       	ldd	r24, Y+2	; 0x02
    586a:	9b 81       	ldd	r25, Y+3	; 0x03
    586c:	fc 01       	movw	r30, r24
    586e:	e2 0f       	add	r30, r18
    5870:	f3 1f       	adc	r31, r19
    5872:	80 81       	ld	r24, Z
    5874:	88 23       	and	r24, r24
    5876:	39 f7       	brne	.-50     	; 0x5846 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    5878:	0f 90       	pop	r0
    587a:	0f 90       	pop	r0
    587c:	0f 90       	pop	r0
    587e:	cf 91       	pop	r28
    5880:	df 91       	pop	r29
    5882:	08 95       	ret

00005884 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    5884:	df 93       	push	r29
    5886:	cf 93       	push	r28
    5888:	00 d0       	rcall	.+0      	; 0x588a <LCD_moveCursor+0x6>
    588a:	00 d0       	rcall	.+0      	; 0x588c <LCD_moveCursor+0x8>
    588c:	0f 92       	push	r0
    588e:	cd b7       	in	r28, 0x3d	; 61
    5890:	de b7       	in	r29, 0x3e	; 62
    5892:	8a 83       	std	Y+2, r24	; 0x02
    5894:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    5896:	8a 81       	ldd	r24, Y+2	; 0x02
    5898:	28 2f       	mov	r18, r24
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	3d 83       	std	Y+5, r19	; 0x05
    589e:	2c 83       	std	Y+4, r18	; 0x04
    58a0:	8c 81       	ldd	r24, Y+4	; 0x04
    58a2:	9d 81       	ldd	r25, Y+5	; 0x05
    58a4:	81 30       	cpi	r24, 0x01	; 1
    58a6:	91 05       	cpc	r25, r1
    58a8:	c1 f0       	breq	.+48     	; 0x58da <LCD_moveCursor+0x56>
    58aa:	2c 81       	ldd	r18, Y+4	; 0x04
    58ac:	3d 81       	ldd	r19, Y+5	; 0x05
    58ae:	22 30       	cpi	r18, 0x02	; 2
    58b0:	31 05       	cpc	r19, r1
    58b2:	2c f4       	brge	.+10     	; 0x58be <LCD_moveCursor+0x3a>
    58b4:	8c 81       	ldd	r24, Y+4	; 0x04
    58b6:	9d 81       	ldd	r25, Y+5	; 0x05
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	61 f0       	breq	.+24     	; 0x58d4 <LCD_moveCursor+0x50>
    58bc:	19 c0       	rjmp	.+50     	; 0x58f0 <LCD_moveCursor+0x6c>
    58be:	2c 81       	ldd	r18, Y+4	; 0x04
    58c0:	3d 81       	ldd	r19, Y+5	; 0x05
    58c2:	22 30       	cpi	r18, 0x02	; 2
    58c4:	31 05       	cpc	r19, r1
    58c6:	69 f0       	breq	.+26     	; 0x58e2 <LCD_moveCursor+0x5e>
    58c8:	8c 81       	ldd	r24, Y+4	; 0x04
    58ca:	9d 81       	ldd	r25, Y+5	; 0x05
    58cc:	83 30       	cpi	r24, 0x03	; 3
    58ce:	91 05       	cpc	r25, r1
    58d0:	61 f0       	breq	.+24     	; 0x58ea <LCD_moveCursor+0x66>
    58d2:	0e c0       	rjmp	.+28     	; 0x58f0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    58d4:	8b 81       	ldd	r24, Y+3	; 0x03
    58d6:	89 83       	std	Y+1, r24	; 0x01
    58d8:	0b c0       	rjmp	.+22     	; 0x58f0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    58da:	8b 81       	ldd	r24, Y+3	; 0x03
    58dc:	80 5c       	subi	r24, 0xC0	; 192
    58de:	89 83       	std	Y+1, r24	; 0x01
    58e0:	07 c0       	rjmp	.+14     	; 0x58f0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    58e2:	8b 81       	ldd	r24, Y+3	; 0x03
    58e4:	80 5f       	subi	r24, 0xF0	; 240
    58e6:	89 83       	std	Y+1, r24	; 0x01
    58e8:	03 c0       	rjmp	.+6      	; 0x58f0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    58ea:	8b 81       	ldd	r24, Y+3	; 0x03
    58ec:	80 5b       	subi	r24, 0xB0	; 176
    58ee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    58f0:	89 81       	ldd	r24, Y+1	; 0x01
    58f2:	80 68       	ori	r24, 0x80	; 128
    58f4:	0e 94 3b 28 	call	0x5076	; 0x5076 <LCD_sendCommand>
}
    58f8:	0f 90       	pop	r0
    58fa:	0f 90       	pop	r0
    58fc:	0f 90       	pop	r0
    58fe:	0f 90       	pop	r0
    5900:	0f 90       	pop	r0
    5902:	cf 91       	pop	r28
    5904:	df 91       	pop	r29
    5906:	08 95       	ret

00005908 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    5908:	df 93       	push	r29
    590a:	cf 93       	push	r28
    590c:	00 d0       	rcall	.+0      	; 0x590e <LCD_displayStringRowColumn+0x6>
    590e:	00 d0       	rcall	.+0      	; 0x5910 <LCD_displayStringRowColumn+0x8>
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	89 83       	std	Y+1, r24	; 0x01
    5916:	6a 83       	std	Y+2, r22	; 0x02
    5918:	5c 83       	std	Y+4, r21	; 0x04
    591a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    591c:	89 81       	ldd	r24, Y+1	; 0x01
    591e:	6a 81       	ldd	r22, Y+2	; 0x02
    5920:	0e 94 42 2c 	call	0x5884	; 0x5884 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    5924:	8b 81       	ldd	r24, Y+3	; 0x03
    5926:	9c 81       	ldd	r25, Y+4	; 0x04
    5928:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
}
    592c:	0f 90       	pop	r0
    592e:	0f 90       	pop	r0
    5930:	0f 90       	pop	r0
    5932:	0f 90       	pop	r0
    5934:	cf 91       	pop	r28
    5936:	df 91       	pop	r29
    5938:	08 95       	ret

0000593a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    593a:	df 93       	push	r29
    593c:	cf 93       	push	r28
    593e:	cd b7       	in	r28, 0x3d	; 61
    5940:	de b7       	in	r29, 0x3e	; 62
    5942:	62 97       	sbiw	r28, 0x12	; 18
    5944:	0f b6       	in	r0, 0x3f	; 63
    5946:	f8 94       	cli
    5948:	de bf       	out	0x3e, r29	; 62
    594a:	0f be       	out	0x3f, r0	; 63
    594c:	cd bf       	out	0x3d, r28	; 61
    594e:	9a 8b       	std	Y+18, r25	; 0x12
    5950:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    5952:	89 89       	ldd	r24, Y+17	; 0x11
    5954:	9a 89       	ldd	r25, Y+18	; 0x12
    5956:	9e 01       	movw	r18, r28
    5958:	2f 5f       	subi	r18, 0xFF	; 255
    595a:	3f 4f       	sbci	r19, 0xFF	; 255
    595c:	b9 01       	movw	r22, r18
    595e:	4a e0       	ldi	r20, 0x0A	; 10
    5960:	50 e0       	ldi	r21, 0x00	; 0
    5962:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <itoa>
   LCD_displayString(buff); /* Display the string */
    5966:	ce 01       	movw	r24, r28
    5968:	01 96       	adiw	r24, 0x01	; 1
    596a:	0e 94 19 2c 	call	0x5832	; 0x5832 <LCD_displayString>
}
    596e:	62 96       	adiw	r28, 0x12	; 18
    5970:	0f b6       	in	r0, 0x3f	; 63
    5972:	f8 94       	cli
    5974:	de bf       	out	0x3e, r29	; 62
    5976:	0f be       	out	0x3f, r0	; 63
    5978:	cd bf       	out	0x3d, r28	; 61
    597a:	cf 91       	pop	r28
    597c:	df 91       	pop	r29
    597e:	08 95       	ret

00005980 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    5980:	df 93       	push	r29
    5982:	cf 93       	push	r28
    5984:	cd b7       	in	r28, 0x3d	; 61
    5986:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    5988:	81 e0       	ldi	r24, 0x01	; 1
    598a:	0e 94 3b 28 	call	0x5076	; 0x5076 <LCD_sendCommand>
}
    598e:	cf 91       	pop	r28
    5990:	df 91       	pop	r29
    5992:	08 95       	ret

00005994 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    5994:	df 93       	push	r29
    5996:	cf 93       	push	r28
    5998:	cd b7       	in	r28, 0x3d	; 61
    599a:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	64 e0       	ldi	r22, 0x04	; 4
    59a0:	41 e0       	ldi	r20, 0x01	; 1
    59a2:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    59a6:	81 e0       	ldi	r24, 0x01	; 1
    59a8:	65 e0       	ldi	r22, 0x05	; 5
    59aa:	41 e0       	ldi	r20, 0x01	; 1
    59ac:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    59b0:	81 e0       	ldi	r24, 0x01	; 1
    59b2:	66 e0       	ldi	r22, 0x06	; 6
    59b4:	40 e0       	ldi	r20, 0x00	; 0
    59b6:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    59ba:	81 e0       	ldi	r24, 0x01	; 1
    59bc:	67 e0       	ldi	r22, 0x07	; 7
    59be:	41 e0       	ldi	r20, 0x01	; 1
    59c0:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    59c4:	ed e2       	ldi	r30, 0x2D	; 45
    59c6:	f0 e0       	ldi	r31, 0x00	; 0
    59c8:	80 e5       	ldi	r24, 0x50	; 80
    59ca:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    59cc:	ae e2       	ldi	r26, 0x2E	; 46
    59ce:	b0 e0       	ldi	r27, 0x00	; 0
    59d0:	ee e2       	ldi	r30, 0x2E	; 46
    59d2:	f0 e0       	ldi	r31, 0x00	; 0
    59d4:	80 81       	ld	r24, Z
    59d6:	8e 7f       	andi	r24, 0xFE	; 254
    59d8:	8c 93       	st	X, r24
}
    59da:	cf 91       	pop	r28
    59dc:	df 91       	pop	r29
    59de:	08 95       	ret

000059e0 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    59e0:	df 93       	push	r29
    59e2:	cf 93       	push	r28
    59e4:	cd b7       	in	r28, 0x3d	; 61
    59e6:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	64 e0       	ldi	r22, 0x04	; 4
    59ec:	40 e0       	ldi	r20, 0x00	; 0
    59ee:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	65 e0       	ldi	r22, 0x05	; 5
    59f6:	40 e0       	ldi	r20, 0x00	; 0
    59f8:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    59fc:	81 e0       	ldi	r24, 0x01	; 1
    59fe:	66 e0       	ldi	r22, 0x06	; 6
    5a00:	41 e0       	ldi	r20, 0x01	; 1
    5a02:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	67 e0       	ldi	r22, 0x07	; 7
    5a0a:	40 e0       	ldi	r20, 0x00	; 0
    5a0c:	0e 94 4b 23 	call	0x4696	; 0x4696 <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    5a10:	ed e2       	ldi	r30, 0x2D	; 45
    5a12:	f0 e0       	ldi	r31, 0x00	; 0
    5a14:	80 e4       	ldi	r24, 0x40	; 64
    5a16:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    5a18:	ae e2       	ldi	r26, 0x2E	; 46
    5a1a:	b0 e0       	ldi	r27, 0x00	; 0
    5a1c:	ee e2       	ldi	r30, 0x2E	; 46
    5a1e:	f0 e0       	ldi	r31, 0x00	; 0
    5a20:	80 81       	ld	r24, Z
    5a22:	8e 7f       	andi	r24, 0xFE	; 254
    5a24:	8c 93       	st	X, r24
}
    5a26:	cf 91       	pop	r28
    5a28:	df 91       	pop	r29
    5a2a:	08 95       	ret

00005a2c <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    5a2c:	df 93       	push	r29
    5a2e:	cf 93       	push	r28
    5a30:	0f 92       	push	r0
    5a32:	cd b7       	in	r28, 0x3d	; 61
    5a34:	de b7       	in	r29, 0x3e	; 62
    5a36:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    5a38:	ef e2       	ldi	r30, 0x2F	; 47
    5a3a:	f0 e0       	ldi	r31, 0x00	; 0
    5a3c:	89 81       	ldd	r24, Y+1	; 0x01
    5a3e:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    5a40:	ee e2       	ldi	r30, 0x2E	; 46
    5a42:	f0 e0       	ldi	r31, 0x00	; 0
    5a44:	80 81       	ld	r24, Z
    5a46:	88 23       	and	r24, r24
    5a48:	dc f7       	brge	.-10     	; 0x5a40 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    5a4a:	ef e2       	ldi	r30, 0x2F	; 47
    5a4c:	f0 e0       	ldi	r31, 0x00	; 0
    5a4e:	80 81       	ld	r24, Z
}
    5a50:	0f 90       	pop	r0
    5a52:	cf 91       	pop	r28
    5a54:	df 91       	pop	r29
    5a56:	08 95       	ret

00005a58 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    5a58:	df 93       	push	r29
    5a5a:	cf 93       	push	r28
    5a5c:	00 d0       	rcall	.+0      	; 0x5a5e <SPI_sendString+0x6>
    5a5e:	00 d0       	rcall	.+0      	; 0x5a60 <SPI_sendString+0x8>
    5a60:	cd b7       	in	r28, 0x3d	; 61
    5a62:	de b7       	in	r29, 0x3e	; 62
    5a64:	9c 83       	std	Y+4, r25	; 0x04
    5a66:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    5a68:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    5a6a:	19 82       	std	Y+1, r1	; 0x01
    5a6c:	0f c0       	rjmp	.+30     	; 0x5a8c <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    5a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a70:	28 2f       	mov	r18, r24
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	8b 81       	ldd	r24, Y+3	; 0x03
    5a76:	9c 81       	ldd	r25, Y+4	; 0x04
    5a78:	fc 01       	movw	r30, r24
    5a7a:	e2 0f       	add	r30, r18
    5a7c:	f3 1f       	adc	r31, r19
    5a7e:	80 81       	ld	r24, Z
    5a80:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <SPI_sendReceiveByte>
    5a84:	89 83       	std	Y+1, r24	; 0x01
		i++;
    5a86:	8a 81       	ldd	r24, Y+2	; 0x02
    5a88:	8f 5f       	subi	r24, 0xFF	; 255
    5a8a:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    5a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a8e:	28 2f       	mov	r18, r24
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	8b 81       	ldd	r24, Y+3	; 0x03
    5a94:	9c 81       	ldd	r25, Y+4	; 0x04
    5a96:	fc 01       	movw	r30, r24
    5a98:	e2 0f       	add	r30, r18
    5a9a:	f3 1f       	adc	r31, r19
    5a9c:	80 81       	ld	r24, Z
    5a9e:	88 23       	and	r24, r24
    5aa0:	31 f7       	brne	.-52     	; 0x5a6e <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    5aa2:	0f 90       	pop	r0
    5aa4:	0f 90       	pop	r0
    5aa6:	0f 90       	pop	r0
    5aa8:	0f 90       	pop	r0
    5aaa:	cf 91       	pop	r28
    5aac:	df 91       	pop	r29
    5aae:	08 95       	ret

00005ab0 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    5ab0:	0f 93       	push	r16
    5ab2:	1f 93       	push	r17
    5ab4:	df 93       	push	r29
    5ab6:	cf 93       	push	r28
    5ab8:	00 d0       	rcall	.+0      	; 0x5aba <SPI_receiveString+0xa>
    5aba:	0f 92       	push	r0
    5abc:	cd b7       	in	r28, 0x3d	; 61
    5abe:	de b7       	in	r29, 0x3e	; 62
    5ac0:	9b 83       	std	Y+3, r25	; 0x03
    5ac2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5ac4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    5ac6:	89 81       	ldd	r24, Y+1	; 0x01
    5ac8:	28 2f       	mov	r18, r24
    5aca:	30 e0       	ldi	r19, 0x00	; 0
    5acc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ace:	9b 81       	ldd	r25, Y+3	; 0x03
    5ad0:	8c 01       	movw	r16, r24
    5ad2:	02 0f       	add	r16, r18
    5ad4:	13 1f       	adc	r17, r19
    5ad6:	8a ea       	ldi	r24, 0xAA	; 170
    5ad8:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <SPI_sendReceiveByte>
    5adc:	f8 01       	movw	r30, r16
    5ade:	80 83       	st	Z, r24
    5ae0:	10 c0       	rjmp	.+32     	; 0x5b02 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    5ae2:	89 81       	ldd	r24, Y+1	; 0x01
    5ae4:	8f 5f       	subi	r24, 0xFF	; 255
    5ae6:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    5ae8:	89 81       	ldd	r24, Y+1	; 0x01
    5aea:	28 2f       	mov	r18, r24
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	8a 81       	ldd	r24, Y+2	; 0x02
    5af0:	9b 81       	ldd	r25, Y+3	; 0x03
    5af2:	8c 01       	movw	r16, r24
    5af4:	02 0f       	add	r16, r18
    5af6:	13 1f       	adc	r17, r19
    5af8:	8a ea       	ldi	r24, 0xAA	; 170
    5afa:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <SPI_sendReceiveByte>
    5afe:	f8 01       	movw	r30, r16
    5b00:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    5b02:	89 81       	ldd	r24, Y+1	; 0x01
    5b04:	28 2f       	mov	r18, r24
    5b06:	30 e0       	ldi	r19, 0x00	; 0
    5b08:	8a 81       	ldd	r24, Y+2	; 0x02
    5b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	e2 0f       	add	r30, r18
    5b10:	f3 1f       	adc	r31, r19
    5b12:	80 81       	ld	r24, Z
    5b14:	83 32       	cpi	r24, 0x23	; 35
    5b16:	29 f7       	brne	.-54     	; 0x5ae2 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    5b18:	89 81       	ldd	r24, Y+1	; 0x01
    5b1a:	28 2f       	mov	r18, r24
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b20:	9b 81       	ldd	r25, Y+3	; 0x03
    5b22:	fc 01       	movw	r30, r24
    5b24:	e2 0f       	add	r30, r18
    5b26:	f3 1f       	adc	r31, r19
    5b28:	10 82       	st	Z, r1
}
    5b2a:	0f 90       	pop	r0
    5b2c:	0f 90       	pop	r0
    5b2e:	0f 90       	pop	r0
    5b30:	cf 91       	pop	r28
    5b32:	df 91       	pop	r29
    5b34:	1f 91       	pop	r17
    5b36:	0f 91       	pop	r16
    5b38:	08 95       	ret

00005b3a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    5b3a:	1f 92       	push	r1
    5b3c:	0f 92       	push	r0
    5b3e:	0f b6       	in	r0, 0x3f	; 63
    5b40:	0f 92       	push	r0
    5b42:	11 24       	eor	r1, r1
    5b44:	2f 93       	push	r18
    5b46:	3f 93       	push	r19
    5b48:	4f 93       	push	r20
    5b4a:	5f 93       	push	r21
    5b4c:	6f 93       	push	r22
    5b4e:	7f 93       	push	r23
    5b50:	8f 93       	push	r24
    5b52:	9f 93       	push	r25
    5b54:	af 93       	push	r26
    5b56:	bf 93       	push	r27
    5b58:	ef 93       	push	r30
    5b5a:	ff 93       	push	r31
    5b5c:	df 93       	push	r29
    5b5e:	cf 93       	push	r28
    5b60:	cd b7       	in	r28, 0x3d	; 61
    5b62:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    5b64:	80 91 85 03 	lds	r24, 0x0385
    5b68:	90 91 86 03 	lds	r25, 0x0386
    5b6c:	00 97       	sbiw	r24, 0x00	; 0
    5b6e:	29 f0       	breq	.+10     	; 0x5b7a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    5b70:	e0 91 85 03 	lds	r30, 0x0385
    5b74:	f0 91 86 03 	lds	r31, 0x0386
    5b78:	09 95       	icall
	}
}
    5b7a:	cf 91       	pop	r28
    5b7c:	df 91       	pop	r29
    5b7e:	ff 91       	pop	r31
    5b80:	ef 91       	pop	r30
    5b82:	bf 91       	pop	r27
    5b84:	af 91       	pop	r26
    5b86:	9f 91       	pop	r25
    5b88:	8f 91       	pop	r24
    5b8a:	7f 91       	pop	r23
    5b8c:	6f 91       	pop	r22
    5b8e:	5f 91       	pop	r21
    5b90:	4f 91       	pop	r20
    5b92:	3f 91       	pop	r19
    5b94:	2f 91       	pop	r18
    5b96:	0f 90       	pop	r0
    5b98:	0f be       	out	0x3f, r0	; 63
    5b9a:	0f 90       	pop	r0
    5b9c:	1f 90       	pop	r1
    5b9e:	18 95       	reti

00005ba0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    5ba0:	1f 92       	push	r1
    5ba2:	0f 92       	push	r0
    5ba4:	0f b6       	in	r0, 0x3f	; 63
    5ba6:	0f 92       	push	r0
    5ba8:	11 24       	eor	r1, r1
    5baa:	2f 93       	push	r18
    5bac:	3f 93       	push	r19
    5bae:	4f 93       	push	r20
    5bb0:	5f 93       	push	r21
    5bb2:	6f 93       	push	r22
    5bb4:	7f 93       	push	r23
    5bb6:	8f 93       	push	r24
    5bb8:	9f 93       	push	r25
    5bba:	af 93       	push	r26
    5bbc:	bf 93       	push	r27
    5bbe:	ef 93       	push	r30
    5bc0:	ff 93       	push	r31
    5bc2:	df 93       	push	r29
    5bc4:	cf 93       	push	r28
    5bc6:	cd b7       	in	r28, 0x3d	; 61
    5bc8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    5bca:	80 91 85 03 	lds	r24, 0x0385
    5bce:	90 91 86 03 	lds	r25, 0x0386
    5bd2:	00 97       	sbiw	r24, 0x00	; 0
    5bd4:	29 f0       	breq	.+10     	; 0x5be0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    5bd6:	e0 91 85 03 	lds	r30, 0x0385
    5bda:	f0 91 86 03 	lds	r31, 0x0386
    5bde:	09 95       	icall
	}
}
    5be0:	cf 91       	pop	r28
    5be2:	df 91       	pop	r29
    5be4:	ff 91       	pop	r31
    5be6:	ef 91       	pop	r30
    5be8:	bf 91       	pop	r27
    5bea:	af 91       	pop	r26
    5bec:	9f 91       	pop	r25
    5bee:	8f 91       	pop	r24
    5bf0:	7f 91       	pop	r23
    5bf2:	6f 91       	pop	r22
    5bf4:	5f 91       	pop	r21
    5bf6:	4f 91       	pop	r20
    5bf8:	3f 91       	pop	r19
    5bfa:	2f 91       	pop	r18
    5bfc:	0f 90       	pop	r0
    5bfe:	0f be       	out	0x3f, r0	; 63
    5c00:	0f 90       	pop	r0
    5c02:	1f 90       	pop	r1
    5c04:	18 95       	reti

00005c06 <Timer1_init>:
 * 2. Set the required mode (normal or CTC).
 * 3. Enable Timer Module interrupt
 * 4. Initialize Timer1 Registers
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    5c06:	df 93       	push	r29
    5c08:	cf 93       	push	r28
    5c0a:	00 d0       	rcall	.+0      	; 0x5c0c <Timer1_init+0x6>
    5c0c:	cd b7       	in	r28, 0x3d	; 61
    5c0e:	de b7       	in	r29, 0x3e	; 62
    5c10:	9a 83       	std	Y+2, r25	; 0x02
    5c12:	89 83       	std	Y+1, r24	; 0x01
	/* Set timer1 initial count to the configured value */
		TCNT1 = Config_Ptr->initial_value;
    5c14:	ac e4       	ldi	r26, 0x4C	; 76
    5c16:	b0 e0       	ldi	r27, 0x00	; 0
    5c18:	e9 81       	ldd	r30, Y+1	; 0x01
    5c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    5c1c:	80 81       	ld	r24, Z
    5c1e:	91 81       	ldd	r25, Z+1	; 0x01
    5c20:	11 96       	adiw	r26, 0x01	; 1
    5c22:	9c 93       	st	X, r25
    5c24:	8e 93       	st	-X, r24

		/* Set the Compare value to configured compare value */
		OCR1A = Config_Ptr->compare_value;
    5c26:	aa e4       	ldi	r26, 0x4A	; 74
    5c28:	b0 e0       	ldi	r27, 0x00	; 0
    5c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    5c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    5c2e:	82 81       	ldd	r24, Z+2	; 0x02
    5c30:	93 81       	ldd	r25, Z+3	; 0x03
    5c32:	11 96       	adiw	r26, 0x01	; 1
    5c34:	9c 93       	st	X, r25
    5c36:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    5c38:	ef e4       	ldi	r30, 0x4F	; 79
    5c3a:	f0 e0       	ldi	r31, 0x00	; 0
    5c3c:	8c e0       	ldi	r24, 0x0C	; 12
    5c3e:	80 83       	st	Z, r24

		/*Set overflow or CTC Mode*/
		TCCR1B = (TCCR1B & 0xF7) | (Config_Ptr->mode << 3);
    5c40:	ae e4       	ldi	r26, 0x4E	; 78
    5c42:	b0 e0       	ldi	r27, 0x00	; 0
    5c44:	ee e4       	ldi	r30, 0x4E	; 78
    5c46:	f0 e0       	ldi	r31, 0x00	; 0
    5c48:	80 81       	ld	r24, Z
    5c4a:	28 2f       	mov	r18, r24
    5c4c:	27 7f       	andi	r18, 0xF7	; 247
    5c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    5c50:	fa 81       	ldd	r31, Y+2	; 0x02
    5c52:	85 81       	ldd	r24, Z+5	; 0x05
    5c54:	88 2f       	mov	r24, r24
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	88 0f       	add	r24, r24
    5c5a:	99 1f       	adc	r25, r25
    5c5c:	88 0f       	add	r24, r24
    5c5e:	99 1f       	adc	r25, r25
    5c60:	88 0f       	add	r24, r24
    5c62:	99 1f       	adc	r25, r25
    5c64:	82 2b       	or	r24, r18
    5c66:	8c 93       	st	X, r24

		/*Set the Timer1 Prescaler*/
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07);
    5c68:	ae e4       	ldi	r26, 0x4E	; 78
    5c6a:	b0 e0       	ldi	r27, 0x00	; 0
    5c6c:	ee e4       	ldi	r30, 0x4E	; 78
    5c6e:	f0 e0       	ldi	r31, 0x00	; 0
    5c70:	80 81       	ld	r24, Z
    5c72:	98 2f       	mov	r25, r24
    5c74:	98 7f       	andi	r25, 0xF8	; 248
    5c76:	e9 81       	ldd	r30, Y+1	; 0x01
    5c78:	fa 81       	ldd	r31, Y+2	; 0x02
    5c7a:	84 81       	ldd	r24, Z+4	; 0x04
    5c7c:	87 70       	andi	r24, 0x07	; 7
    5c7e:	89 2b       	or	r24, r25
    5c80:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
    5c82:	e9 81       	ldd	r30, Y+1	; 0x01
    5c84:	fa 81       	ldd	r31, Y+2	; 0x02
    5c86:	85 81       	ldd	r24, Z+5	; 0x05
    5c88:	88 23       	and	r24, r24
    5c8a:	41 f4       	brne	.+16     	; 0x5c9c <Timer1_init+0x96>
		{
			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1<<TOIE1);
    5c8c:	a9 e5       	ldi	r26, 0x59	; 89
    5c8e:	b0 e0       	ldi	r27, 0x00	; 0
    5c90:	e9 e5       	ldi	r30, 0x59	; 89
    5c92:	f0 e0       	ldi	r31, 0x00	; 0
    5c94:	80 81       	ld	r24, Z
    5c96:	84 60       	ori	r24, 0x04	; 4
    5c98:	8c 93       	st	X, r24
    5c9a:	07 c0       	rjmp	.+14     	; 0x5caa <Timer1_init+0xa4>
		}
		else
		{
			/* Enable Timer1 Compare A Interrupt */
			TIMSK |= (1<<OCIE1A);
    5c9c:	a9 e5       	ldi	r26, 0x59	; 89
    5c9e:	b0 e0       	ldi	r27, 0x00	; 0
    5ca0:	e9 e5       	ldi	r30, 0x59	; 89
    5ca2:	f0 e0       	ldi	r31, 0x00	; 0
    5ca4:	80 81       	ld	r24, Z
    5ca6:	80 61       	ori	r24, 0x10	; 16
    5ca8:	8c 93       	st	X, r24
		}
}
    5caa:	0f 90       	pop	r0
    5cac:	0f 90       	pop	r0
    5cae:	cf 91       	pop	r28
    5cb0:	df 91       	pop	r29
    5cb2:	08 95       	ret

00005cb4 <Timer1_deInit>:
/*
 * Description :
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    5cb4:	df 93       	push	r29
    5cb6:	cf 93       	push	r28
    5cb8:	cd b7       	in	r28, 0x3d	; 61
    5cba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    5cbc:	ef e4       	ldi	r30, 0x4F	; 79
    5cbe:	f0 e0       	ldi	r31, 0x00	; 0
    5cc0:	10 82       	st	Z, r1
	TCCR1B = 0;
    5cc2:	ee e4       	ldi	r30, 0x4E	; 78
    5cc4:	f0 e0       	ldi	r31, 0x00	; 0
    5cc6:	10 82       	st	Z, r1
	TCNT1 = 0;
    5cc8:	ec e4       	ldi	r30, 0x4C	; 76
    5cca:	f0 e0       	ldi	r31, 0x00	; 0
    5ccc:	11 82       	std	Z+1, r1	; 0x01
    5cce:	10 82       	st	Z, r1
	ICR1 = 0;
    5cd0:	e6 e4       	ldi	r30, 0x46	; 70
    5cd2:	f0 e0       	ldi	r31, 0x00	; 0
    5cd4:	11 82       	std	Z+1, r1	; 0x01
    5cd6:	10 82       	st	Z, r1
}
    5cd8:	cf 91       	pop	r28
    5cda:	df 91       	pop	r29
    5cdc:	08 95       	ret

00005cde <Timer1_setCallBack>:
/*
 *  Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    5cde:	df 93       	push	r29
    5ce0:	cf 93       	push	r28
    5ce2:	00 d0       	rcall	.+0      	; 0x5ce4 <Timer1_setCallBack+0x6>
    5ce4:	cd b7       	in	r28, 0x3d	; 61
    5ce6:	de b7       	in	r29, 0x3e	; 62
    5ce8:	9a 83       	std	Y+2, r25	; 0x02
    5cea:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
    5cec:	89 81       	ldd	r24, Y+1	; 0x01
    5cee:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf0:	90 93 86 03 	sts	0x0386, r25
    5cf4:	80 93 85 03 	sts	0x0385, r24
}
    5cf8:	0f 90       	pop	r0
    5cfa:	0f 90       	pop	r0
    5cfc:	cf 91       	pop	r28
    5cfe:	df 91       	pop	r29
    5d00:	08 95       	ret

00005d02 <timer0_initializeCTC>:

#include "timer_driver.h"

void timer0_initializeCTC(void)
{
    5d02:	df 93       	push	r29
    5d04:	cf 93       	push	r28
    5d06:	cd b7       	in	r28, 0x3d	; 61
    5d08:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    5d0a:	ec e5       	ldi	r30, 0x5C	; 92
    5d0c:	f0 e0       	ldi	r31, 0x00	; 0
    5d0e:	8e e4       	ldi	r24, 0x4E	; 78
    5d10:	80 83       	st	Z, r24
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    5d12:	a3 e5       	ldi	r26, 0x53	; 83
    5d14:	b0 e0       	ldi	r27, 0x00	; 0
    5d16:	e3 e5       	ldi	r30, 0x53	; 83
    5d18:	f0 e0       	ldi	r31, 0x00	; 0
    5d1a:	80 81       	ld	r24, Z
    5d1c:	88 60       	ori	r24, 0x08	; 8
    5d1e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, WGM00);
    5d20:	a3 e5       	ldi	r26, 0x53	; 83
    5d22:	b0 e0       	ldi	r27, 0x00	; 0
    5d24:	e3 e5       	ldi	r30, 0x53	; 83
    5d26:	f0 e0       	ldi	r31, 0x00	; 0
    5d28:	80 81       	ld	r24, Z
    5d2a:	8f 7b       	andi	r24, 0xBF	; 191
    5d2c:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    5d2e:	a3 e5       	ldi	r26, 0x53	; 83
    5d30:	b0 e0       	ldi	r27, 0x00	; 0
    5d32:	e3 e5       	ldi	r30, 0x53	; 83
    5d34:	f0 e0       	ldi	r31, 0x00	; 0
    5d36:	80 81       	ld	r24, Z
    5d38:	81 60       	ori	r24, 0x01	; 1
    5d3a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, CS01);
    5d3c:	a3 e5       	ldi	r26, 0x53	; 83
    5d3e:	b0 e0       	ldi	r27, 0x00	; 0
    5d40:	e3 e5       	ldi	r30, 0x53	; 83
    5d42:	f0 e0       	ldi	r31, 0x00	; 0
    5d44:	80 81       	ld	r24, Z
    5d46:	8d 7f       	andi	r24, 0xFD	; 253
    5d48:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    5d4a:	a3 e5       	ldi	r26, 0x53	; 83
    5d4c:	b0 e0       	ldi	r27, 0x00	; 0
    5d4e:	e3 e5       	ldi	r30, 0x53	; 83
    5d50:	f0 e0       	ldi	r31, 0x00	; 0
    5d52:	80 81       	ld	r24, Z
    5d54:	84 60       	ori	r24, 0x04	; 4
    5d56:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    5d58:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    5d5a:	a9 e5       	ldi	r26, 0x59	; 89
    5d5c:	b0 e0       	ldi	r27, 0x00	; 0
    5d5e:	e9 e5       	ldi	r30, 0x59	; 89
    5d60:	f0 e0       	ldi	r31, 0x00	; 0
    5d62:	80 81       	ld	r24, Z
    5d64:	82 60       	ori	r24, 0x02	; 2
    5d66:	8c 93       	st	X, r24
}
    5d68:	cf 91       	pop	r28
    5d6a:	df 91       	pop	r29
    5d6c:	08 95       	ret

00005d6e <timer0_stop>:

void timer0_stop(void)
{
    5d6e:	df 93       	push	r29
    5d70:	cf 93       	push	r28
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	CLEAR_BIT(TCCR0, CS00);
    5d76:	a3 e5       	ldi	r26, 0x53	; 83
    5d78:	b0 e0       	ldi	r27, 0x00	; 0
    5d7a:	e3 e5       	ldi	r30, 0x53	; 83
    5d7c:	f0 e0       	ldi	r31, 0x00	; 0
    5d7e:	80 81       	ld	r24, Z
    5d80:	8e 7f       	andi	r24, 0xFE	; 254
    5d82:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, CS01);
    5d84:	a3 e5       	ldi	r26, 0x53	; 83
    5d86:	b0 e0       	ldi	r27, 0x00	; 0
    5d88:	e3 e5       	ldi	r30, 0x53	; 83
    5d8a:	f0 e0       	ldi	r31, 0x00	; 0
    5d8c:	80 81       	ld	r24, Z
    5d8e:	8d 7f       	andi	r24, 0xFD	; 253
    5d90:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, CS02);
    5d92:	a3 e5       	ldi	r26, 0x53	; 83
    5d94:	b0 e0       	ldi	r27, 0x00	; 0
    5d96:	e3 e5       	ldi	r30, 0x53	; 83
    5d98:	f0 e0       	ldi	r31, 0x00	; 0
    5d9a:	80 81       	ld	r24, Z
    5d9c:	8b 7f       	andi	r24, 0xFB	; 251
    5d9e:	8c 93       	st	X, r24
}
    5da0:	cf 91       	pop	r28
    5da2:	df 91       	pop	r29
    5da4:	08 95       	ret

00005da6 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
    5da6:	df 93       	push	r29
    5da8:	cf 93       	push	r28
    5daa:	cd b7       	in	r28, 0x3d	; 61
    5dac:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
    5dae:	ec e5       	ldi	r30, 0x5C	; 92
    5db0:	f0 e0       	ldi	r31, 0x00	; 0
    5db2:	80 e8       	ldi	r24, 0x80	; 128
    5db4:	80 83       	st	Z, r24
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00); 
    5db6:	a3 e5       	ldi	r26, 0x53	; 83
    5db8:	b0 e0       	ldi	r27, 0x00	; 0
    5dba:	e3 e5       	ldi	r30, 0x53	; 83
    5dbc:	f0 e0       	ldi	r31, 0x00	; 0
    5dbe:	80 81       	ld	r24, Z
    5dc0:	80 64       	ori	r24, 0x40	; 64
    5dc2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    5dc4:	a3 e5       	ldi	r26, 0x53	; 83
    5dc6:	b0 e0       	ldi	r27, 0x00	; 0
    5dc8:	e3 e5       	ldi	r30, 0x53	; 83
    5dca:	f0 e0       	ldi	r31, 0x00	; 0
    5dcc:	80 81       	ld	r24, Z
    5dce:	88 60       	ori	r24, 0x08	; 8
    5dd0:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    5dd2:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
    5dd4:	a3 e5       	ldi	r26, 0x53	; 83
    5dd6:	b0 e0       	ldi	r27, 0x00	; 0
    5dd8:	e3 e5       	ldi	r30, 0x53	; 83
    5dda:	f0 e0       	ldi	r31, 0x00	; 0
    5ddc:	80 81       	ld	r24, Z
    5dde:	80 62       	ori	r24, 0x20	; 32
    5de0:	8c 93       	st	X, r24
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
    5de2:	a9 e5       	ldi	r26, 0x59	; 89
    5de4:	b0 e0       	ldi	r27, 0x00	; 0
    5de6:	e9 e5       	ldi	r30, 0x59	; 89
    5de8:	f0 e0       	ldi	r31, 0x00	; 0
    5dea:	80 81       	ld	r24, Z
    5dec:	81 60       	ori	r24, 0x01	; 1
    5dee:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    5df0:	a3 e5       	ldi	r26, 0x53	; 83
    5df2:	b0 e0       	ldi	r27, 0x00	; 0
    5df4:	e3 e5       	ldi	r30, 0x53	; 83
    5df6:	f0 e0       	ldi	r31, 0x00	; 0
    5df8:	80 81       	ld	r24, Z
    5dfa:	81 60       	ori	r24, 0x01	; 1
    5dfc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, CS01);
    5dfe:	a3 e5       	ldi	r26, 0x53	; 83
    5e00:	b0 e0       	ldi	r27, 0x00	; 0
    5e02:	e3 e5       	ldi	r30, 0x53	; 83
    5e04:	f0 e0       	ldi	r31, 0x00	; 0
    5e06:	80 81       	ld	r24, Z
    5e08:	8d 7f       	andi	r24, 0xFD	; 253
    5e0a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    5e0c:	a3 e5       	ldi	r26, 0x53	; 83
    5e0e:	b0 e0       	ldi	r27, 0x00	; 0
    5e10:	e3 e5       	ldi	r30, 0x53	; 83
    5e12:	f0 e0       	ldi	r31, 0x00	; 0
    5e14:	80 81       	ld	r24, Z
    5e16:	84 60       	ori	r24, 0x04	; 4
    5e18:	8c 93       	st	X, r24
}
    5e1a:	cf 91       	pop	r28
    5e1c:	df 91       	pop	r29
    5e1e:	08 95       	ret

00005e20 <change_dutycycle>:
void change_dutycycle(uint64 duty)
{
    5e20:	2f 92       	push	r2
    5e22:	3f 92       	push	r3
    5e24:	4f 92       	push	r4
    5e26:	5f 92       	push	r5
    5e28:	6f 92       	push	r6
    5e2a:	7f 92       	push	r7
    5e2c:	8f 92       	push	r8
    5e2e:	9f 92       	push	r9
    5e30:	af 92       	push	r10
    5e32:	bf 92       	push	r11
    5e34:	cf 92       	push	r12
    5e36:	df 92       	push	r13
    5e38:	ef 92       	push	r14
    5e3a:	ff 92       	push	r15
    5e3c:	0f 93       	push	r16
    5e3e:	1f 93       	push	r17
    5e40:	df 93       	push	r29
    5e42:	cf 93       	push	r28
    5e44:	cd b7       	in	r28, 0x3d	; 61
    5e46:	de b7       	in	r29, 0x3e	; 62
    5e48:	2a 97       	sbiw	r28, 0x0a	; 10
    5e4a:	0f b6       	in	r0, 0x3f	; 63
    5e4c:	f8 94       	cli
    5e4e:	de bf       	out	0x3e, r29	; 62
    5e50:	0f be       	out	0x3f, r0	; 63
    5e52:	cd bf       	out	0x3d, r28	; 61
    5e54:	29 83       	std	Y+1, r18	; 0x01
    5e56:	3a 83       	std	Y+2, r19	; 0x02
    5e58:	4b 83       	std	Y+3, r20	; 0x03
    5e5a:	5c 83       	std	Y+4, r21	; 0x04
    5e5c:	6d 83       	std	Y+5, r22	; 0x05
    5e5e:	7e 83       	std	Y+6, r23	; 0x06
    5e60:	8f 83       	std	Y+7, r24	; 0x07
    5e62:	98 87       	std	Y+8, r25	; 0x08
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
    5e64:	8c e5       	ldi	r24, 0x5C	; 92
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	9a 87       	std	Y+10, r25	; 0x0a
    5e6a:	89 87       	std	Y+9, r24	; 0x09
    5e6c:	a9 80       	ldd	r10, Y+1	; 0x01
    5e6e:	ba 80       	ldd	r11, Y+2	; 0x02
    5e70:	cb 80       	ldd	r12, Y+3	; 0x03
    5e72:	dc 80       	ldd	r13, Y+4	; 0x04
    5e74:	ed 80       	ldd	r14, Y+5	; 0x05
    5e76:	fe 80       	ldd	r15, Y+6	; 0x06
    5e78:	0f 81       	ldd	r16, Y+7	; 0x07
    5e7a:	18 85       	ldd	r17, Y+8	; 0x08
    5e7c:	2a 2d       	mov	r18, r10
    5e7e:	3b 2d       	mov	r19, r11
    5e80:	4c 2d       	mov	r20, r12
    5e82:	5d 2d       	mov	r21, r13
    5e84:	6e 2d       	mov	r22, r14
    5e86:	7f 2d       	mov	r23, r15
    5e88:	80 2f       	mov	r24, r16
    5e8a:	91 2f       	mov	r25, r17
    5e8c:	0f 2e       	mov	r0, r31
    5e8e:	f4 e6       	ldi	r31, 0x64	; 100
    5e90:	af 2e       	mov	r10, r31
    5e92:	f0 2d       	mov	r31, r0
    5e94:	bb 24       	eor	r11, r11
    5e96:	cc 24       	eor	r12, r12
    5e98:	dd 24       	eor	r13, r13
    5e9a:	ee 24       	eor	r14, r14
    5e9c:	ff 24       	eor	r15, r15
    5e9e:	00 e0       	ldi	r16, 0x00	; 0
    5ea0:	10 e0       	ldi	r17, 0x00	; 0
    5ea2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    5ea6:	22 2e       	mov	r2, r18
    5ea8:	33 2e       	mov	r3, r19
    5eaa:	44 2e       	mov	r4, r20
    5eac:	55 2e       	mov	r5, r21
    5eae:	66 2e       	mov	r6, r22
    5eb0:	77 2e       	mov	r7, r23
    5eb2:	88 2e       	mov	r8, r24
    5eb4:	99 2e       	mov	r9, r25
    5eb6:	a2 2c       	mov	r10, r2
    5eb8:	b3 2c       	mov	r11, r3
    5eba:	c4 2c       	mov	r12, r4
    5ebc:	d5 2c       	mov	r13, r5
    5ebe:	e6 2c       	mov	r14, r6
    5ec0:	f7 2c       	mov	r15, r7
    5ec2:	08 2d       	mov	r16, r8
    5ec4:	19 2d       	mov	r17, r9
    5ec6:	2a 2d       	mov	r18, r10
    5ec8:	3b 2d       	mov	r19, r11
    5eca:	4c 2d       	mov	r20, r12
    5ecc:	5d 2d       	mov	r21, r13
    5ece:	6e 2d       	mov	r22, r14
    5ed0:	7f 2d       	mov	r23, r15
    5ed2:	80 2f       	mov	r24, r16
    5ed4:	91 2f       	mov	r25, r17
    5ed6:	08 e0       	ldi	r16, 0x08	; 8
    5ed8:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5edc:	a2 2e       	mov	r10, r18
    5ede:	b3 2e       	mov	r11, r19
    5ee0:	c4 2e       	mov	r12, r20
    5ee2:	d5 2e       	mov	r13, r21
    5ee4:	e6 2e       	mov	r14, r22
    5ee6:	f7 2e       	mov	r15, r23
    5ee8:	08 2f       	mov	r16, r24
    5eea:	19 2f       	mov	r17, r25
    5eec:	2a 2d       	mov	r18, r10
    5eee:	3b 2d       	mov	r19, r11
    5ef0:	4c 2d       	mov	r20, r12
    5ef2:	5d 2d       	mov	r21, r13
    5ef4:	6e 2d       	mov	r22, r14
    5ef6:	7f 2d       	mov	r23, r15
    5ef8:	80 2f       	mov	r24, r16
    5efa:	91 2f       	mov	r25, r17
    5efc:	82 2f       	mov	r24, r18
    5efe:	e9 85       	ldd	r30, Y+9	; 0x09
    5f00:	fa 85       	ldd	r31, Y+10	; 0x0a
    5f02:	80 83       	st	Z, r24
}
    5f04:	2a 96       	adiw	r28, 0x0a	; 10
    5f06:	0f b6       	in	r0, 0x3f	; 63
    5f08:	f8 94       	cli
    5f0a:	de bf       	out	0x3e, r29	; 62
    5f0c:	0f be       	out	0x3f, r0	; 63
    5f0e:	cd bf       	out	0x3d, r28	; 61
    5f10:	cf 91       	pop	r28
    5f12:	df 91       	pop	r29
    5f14:	1f 91       	pop	r17
    5f16:	0f 91       	pop	r16
    5f18:	ff 90       	pop	r15
    5f1a:	ef 90       	pop	r14
    5f1c:	df 90       	pop	r13
    5f1e:	cf 90       	pop	r12
    5f20:	bf 90       	pop	r11
    5f22:	af 90       	pop	r10
    5f24:	9f 90       	pop	r9
    5f26:	8f 90       	pop	r8
    5f28:	7f 90       	pop	r7
    5f2a:	6f 90       	pop	r6
    5f2c:	5f 90       	pop	r5
    5f2e:	4f 90       	pop	r4
    5f30:	3f 90       	pop	r3
    5f32:	2f 90       	pop	r2
    5f34:	08 95       	ret

00005f36 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    5f36:	df 93       	push	r29
    5f38:	cf 93       	push	r28
    5f3a:	00 d0       	rcall	.+0      	; 0x5f3c <UART_init+0x6>
    5f3c:	00 d0       	rcall	.+0      	; 0x5f3e <UART_init+0x8>
    5f3e:	00 d0       	rcall	.+0      	; 0x5f40 <UART_init+0xa>
    5f40:	cd b7       	in	r28, 0x3d	; 61
    5f42:	de b7       	in	r29, 0x3e	; 62
    5f44:	6b 83       	std	Y+3, r22	; 0x03
    5f46:	7c 83       	std	Y+4, r23	; 0x04
    5f48:	8d 83       	std	Y+5, r24	; 0x05
    5f4a:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    5f4c:	1a 82       	std	Y+2, r1	; 0x02
    5f4e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    5f50:	eb e2       	ldi	r30, 0x2B	; 43
    5f52:	f0 e0       	ldi	r31, 0x00	; 0
    5f54:	82 e0       	ldi	r24, 0x02	; 2
    5f56:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    5f58:	ea e2       	ldi	r30, 0x2A	; 42
    5f5a:	f0 e0       	ldi	r31, 0x00	; 0
    5f5c:	88 e1       	ldi	r24, 0x18	; 24
    5f5e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    5f60:	e0 e4       	ldi	r30, 0x40	; 64
    5f62:	f0 e0       	ldi	r31, 0x00	; 0
    5f64:	86 e8       	ldi	r24, 0x86	; 134
    5f66:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    5f68:	8b 81       	ldd	r24, Y+3	; 0x03
    5f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5f6c:	ad 81       	ldd	r26, Y+5	; 0x05
    5f6e:	be 81       	ldd	r27, Y+6	; 0x06
    5f70:	88 0f       	add	r24, r24
    5f72:	99 1f       	adc	r25, r25
    5f74:	aa 1f       	adc	r26, r26
    5f76:	bb 1f       	adc	r27, r27
    5f78:	88 0f       	add	r24, r24
    5f7a:	99 1f       	adc	r25, r25
    5f7c:	aa 1f       	adc	r26, r26
    5f7e:	bb 1f       	adc	r27, r27
    5f80:	88 0f       	add	r24, r24
    5f82:	99 1f       	adc	r25, r25
    5f84:	aa 1f       	adc	r26, r26
    5f86:	bb 1f       	adc	r27, r27
    5f88:	9c 01       	movw	r18, r24
    5f8a:	ad 01       	movw	r20, r26
    5f8c:	80 e0       	ldi	r24, 0x00	; 0
    5f8e:	92 e1       	ldi	r25, 0x12	; 18
    5f90:	aa e7       	ldi	r26, 0x7A	; 122
    5f92:	b0 e0       	ldi	r27, 0x00	; 0
    5f94:	bc 01       	movw	r22, r24
    5f96:	cd 01       	movw	r24, r26
    5f98:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    5f9c:	da 01       	movw	r26, r20
    5f9e:	c9 01       	movw	r24, r18
    5fa0:	01 97       	sbiw	r24, 0x01	; 1
    5fa2:	9a 83       	std	Y+2, r25	; 0x02
    5fa4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    5fa6:	e0 e4       	ldi	r30, 0x40	; 64
    5fa8:	f0 e0       	ldi	r31, 0x00	; 0
    5faa:	89 81       	ldd	r24, Y+1	; 0x01
    5fac:	9a 81       	ldd	r25, Y+2	; 0x02
    5fae:	89 2f       	mov	r24, r25
    5fb0:	99 27       	eor	r25, r25
    5fb2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    5fb4:	e9 e2       	ldi	r30, 0x29	; 41
    5fb6:	f0 e0       	ldi	r31, 0x00	; 0
    5fb8:	89 81       	ldd	r24, Y+1	; 0x01
    5fba:	80 83       	st	Z, r24
}
    5fbc:	26 96       	adiw	r28, 0x06	; 6
    5fbe:	0f b6       	in	r0, 0x3f	; 63
    5fc0:	f8 94       	cli
    5fc2:	de bf       	out	0x3e, r29	; 62
    5fc4:	0f be       	out	0x3f, r0	; 63
    5fc6:	cd bf       	out	0x3d, r28	; 61
    5fc8:	cf 91       	pop	r28
    5fca:	df 91       	pop	r29
    5fcc:	08 95       	ret

00005fce <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    5fce:	df 93       	push	r29
    5fd0:	cf 93       	push	r28
    5fd2:	0f 92       	push	r0
    5fd4:	cd b7       	in	r28, 0x3d	; 61
    5fd6:	de b7       	in	r29, 0x3e	; 62
    5fd8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    5fda:	eb e2       	ldi	r30, 0x2B	; 43
    5fdc:	f0 e0       	ldi	r31, 0x00	; 0
    5fde:	80 81       	ld	r24, Z
    5fe0:	88 2f       	mov	r24, r24
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	80 72       	andi	r24, 0x20	; 32
    5fe6:	90 70       	andi	r25, 0x00	; 0
    5fe8:	00 97       	sbiw	r24, 0x00	; 0
    5fea:	b9 f3       	breq	.-18     	; 0x5fda <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    5fec:	ec e2       	ldi	r30, 0x2C	; 44
    5fee:	f0 e0       	ldi	r31, 0x00	; 0
    5ff0:	89 81       	ldd	r24, Y+1	; 0x01
    5ff2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    5ff4:	0f 90       	pop	r0
    5ff6:	cf 91       	pop	r28
    5ff8:	df 91       	pop	r29
    5ffa:	08 95       	ret

00005ffc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    5ffc:	df 93       	push	r29
    5ffe:	cf 93       	push	r28
    6000:	cd b7       	in	r28, 0x3d	; 61
    6002:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    6004:	eb e2       	ldi	r30, 0x2B	; 43
    6006:	f0 e0       	ldi	r31, 0x00	; 0
    6008:	80 81       	ld	r24, Z
    600a:	88 23       	and	r24, r24
    600c:	dc f7       	brge	.-10     	; 0x6004 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    600e:	ec e2       	ldi	r30, 0x2C	; 44
    6010:	f0 e0       	ldi	r31, 0x00	; 0
    6012:	80 81       	ld	r24, Z
}
    6014:	cf 91       	pop	r28
    6016:	df 91       	pop	r29
    6018:	08 95       	ret

0000601a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    601a:	df 93       	push	r29
    601c:	cf 93       	push	r28
    601e:	00 d0       	rcall	.+0      	; 0x6020 <UART_sendString+0x6>
    6020:	0f 92       	push	r0
    6022:	cd b7       	in	r28, 0x3d	; 61
    6024:	de b7       	in	r29, 0x3e	; 62
    6026:	9b 83       	std	Y+3, r25	; 0x03
    6028:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    602a:	19 82       	std	Y+1, r1	; 0x01
    602c:	0e c0       	rjmp	.+28     	; 0x604a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    602e:	89 81       	ldd	r24, Y+1	; 0x01
    6030:	28 2f       	mov	r18, r24
    6032:	30 e0       	ldi	r19, 0x00	; 0
    6034:	8a 81       	ldd	r24, Y+2	; 0x02
    6036:	9b 81       	ldd	r25, Y+3	; 0x03
    6038:	fc 01       	movw	r30, r24
    603a:	e2 0f       	add	r30, r18
    603c:	f3 1f       	adc	r31, r19
    603e:	80 81       	ld	r24, Z
    6040:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <UART_sendByte>
		i++;
    6044:	89 81       	ldd	r24, Y+1	; 0x01
    6046:	8f 5f       	subi	r24, 0xFF	; 255
    6048:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    604a:	89 81       	ldd	r24, Y+1	; 0x01
    604c:	28 2f       	mov	r18, r24
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	8a 81       	ldd	r24, Y+2	; 0x02
    6052:	9b 81       	ldd	r25, Y+3	; 0x03
    6054:	fc 01       	movw	r30, r24
    6056:	e2 0f       	add	r30, r18
    6058:	f3 1f       	adc	r31, r19
    605a:	80 81       	ld	r24, Z
    605c:	88 23       	and	r24, r24
    605e:	39 f7       	brne	.-50     	; 0x602e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    6060:	0f 90       	pop	r0
    6062:	0f 90       	pop	r0
    6064:	0f 90       	pop	r0
    6066:	cf 91       	pop	r28
    6068:	df 91       	pop	r29
    606a:	08 95       	ret

0000606c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    606c:	0f 93       	push	r16
    606e:	1f 93       	push	r17
    6070:	df 93       	push	r29
    6072:	cf 93       	push	r28
    6074:	00 d0       	rcall	.+0      	; 0x6076 <UART_receiveString+0xa>
    6076:	0f 92       	push	r0
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	9b 83       	std	Y+3, r25	; 0x03
    607e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    6080:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    6082:	89 81       	ldd	r24, Y+1	; 0x01
    6084:	28 2f       	mov	r18, r24
    6086:	30 e0       	ldi	r19, 0x00	; 0
    6088:	8a 81       	ldd	r24, Y+2	; 0x02
    608a:	9b 81       	ldd	r25, Y+3	; 0x03
    608c:	8c 01       	movw	r16, r24
    608e:	02 0f       	add	r16, r18
    6090:	13 1f       	adc	r17, r19
    6092:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    6096:	f8 01       	movw	r30, r16
    6098:	80 83       	st	Z, r24
    609a:	0f c0       	rjmp	.+30     	; 0x60ba <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    609c:	89 81       	ldd	r24, Y+1	; 0x01
    609e:	8f 5f       	subi	r24, 0xFF	; 255
    60a0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    60a2:	89 81       	ldd	r24, Y+1	; 0x01
    60a4:	28 2f       	mov	r18, r24
    60a6:	30 e0       	ldi	r19, 0x00	; 0
    60a8:	8a 81       	ldd	r24, Y+2	; 0x02
    60aa:	9b 81       	ldd	r25, Y+3	; 0x03
    60ac:	8c 01       	movw	r16, r24
    60ae:	02 0f       	add	r16, r18
    60b0:	13 1f       	adc	r17, r19
    60b2:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <UART_recieveByte>
    60b6:	f8 01       	movw	r30, r16
    60b8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    60ba:	89 81       	ldd	r24, Y+1	; 0x01
    60bc:	28 2f       	mov	r18, r24
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	8a 81       	ldd	r24, Y+2	; 0x02
    60c2:	9b 81       	ldd	r25, Y+3	; 0x03
    60c4:	fc 01       	movw	r30, r24
    60c6:	e2 0f       	add	r30, r18
    60c8:	f3 1f       	adc	r31, r19
    60ca:	80 81       	ld	r24, Z
    60cc:	83 32       	cpi	r24, 0x23	; 35
    60ce:	31 f7       	brne	.-52     	; 0x609c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    60d0:	89 81       	ldd	r24, Y+1	; 0x01
    60d2:	28 2f       	mov	r18, r24
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	8a 81       	ldd	r24, Y+2	; 0x02
    60d8:	9b 81       	ldd	r25, Y+3	; 0x03
    60da:	fc 01       	movw	r30, r24
    60dc:	e2 0f       	add	r30, r18
    60de:	f3 1f       	adc	r31, r19
    60e0:	10 82       	st	Z, r1
}
    60e2:	0f 90       	pop	r0
    60e4:	0f 90       	pop	r0
    60e6:	0f 90       	pop	r0
    60e8:	cf 91       	pop	r28
    60ea:	df 91       	pop	r29
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	08 95       	ret

000060f2 <__udivmodsi4>:
    60f2:	a1 e2       	ldi	r26, 0x21	; 33
    60f4:	1a 2e       	mov	r1, r26
    60f6:	aa 1b       	sub	r26, r26
    60f8:	bb 1b       	sub	r27, r27
    60fa:	fd 01       	movw	r30, r26
    60fc:	0d c0       	rjmp	.+26     	; 0x6118 <__udivmodsi4_ep>

000060fe <__udivmodsi4_loop>:
    60fe:	aa 1f       	adc	r26, r26
    6100:	bb 1f       	adc	r27, r27
    6102:	ee 1f       	adc	r30, r30
    6104:	ff 1f       	adc	r31, r31
    6106:	a2 17       	cp	r26, r18
    6108:	b3 07       	cpc	r27, r19
    610a:	e4 07       	cpc	r30, r20
    610c:	f5 07       	cpc	r31, r21
    610e:	20 f0       	brcs	.+8      	; 0x6118 <__udivmodsi4_ep>
    6110:	a2 1b       	sub	r26, r18
    6112:	b3 0b       	sbc	r27, r19
    6114:	e4 0b       	sbc	r30, r20
    6116:	f5 0b       	sbc	r31, r21

00006118 <__udivmodsi4_ep>:
    6118:	66 1f       	adc	r22, r22
    611a:	77 1f       	adc	r23, r23
    611c:	88 1f       	adc	r24, r24
    611e:	99 1f       	adc	r25, r25
    6120:	1a 94       	dec	r1
    6122:	69 f7       	brne	.-38     	; 0x60fe <__udivmodsi4_loop>
    6124:	60 95       	com	r22
    6126:	70 95       	com	r23
    6128:	80 95       	com	r24
    612a:	90 95       	com	r25
    612c:	9b 01       	movw	r18, r22
    612e:	ac 01       	movw	r20, r24
    6130:	bd 01       	movw	r22, r26
    6132:	cf 01       	movw	r24, r30
    6134:	08 95       	ret

00006136 <__mulsi3>:
    6136:	62 9f       	mul	r22, r18
    6138:	d0 01       	movw	r26, r0
    613a:	73 9f       	mul	r23, r19
    613c:	f0 01       	movw	r30, r0
    613e:	82 9f       	mul	r24, r18
    6140:	e0 0d       	add	r30, r0
    6142:	f1 1d       	adc	r31, r1
    6144:	64 9f       	mul	r22, r20
    6146:	e0 0d       	add	r30, r0
    6148:	f1 1d       	adc	r31, r1
    614a:	92 9f       	mul	r25, r18
    614c:	f0 0d       	add	r31, r0
    614e:	83 9f       	mul	r24, r19
    6150:	f0 0d       	add	r31, r0
    6152:	74 9f       	mul	r23, r20
    6154:	f0 0d       	add	r31, r0
    6156:	65 9f       	mul	r22, r21
    6158:	f0 0d       	add	r31, r0
    615a:	99 27       	eor	r25, r25
    615c:	72 9f       	mul	r23, r18
    615e:	b0 0d       	add	r27, r0
    6160:	e1 1d       	adc	r30, r1
    6162:	f9 1f       	adc	r31, r25
    6164:	63 9f       	mul	r22, r19
    6166:	b0 0d       	add	r27, r0
    6168:	e1 1d       	adc	r30, r1
    616a:	f9 1f       	adc	r31, r25
    616c:	bd 01       	movw	r22, r26
    616e:	cf 01       	movw	r24, r30
    6170:	11 24       	eor	r1, r1
    6172:	08 95       	ret

00006174 <__prologue_saves__>:
    6174:	2f 92       	push	r2
    6176:	3f 92       	push	r3
    6178:	4f 92       	push	r4
    617a:	5f 92       	push	r5
    617c:	6f 92       	push	r6
    617e:	7f 92       	push	r7
    6180:	8f 92       	push	r8
    6182:	9f 92       	push	r9
    6184:	af 92       	push	r10
    6186:	bf 92       	push	r11
    6188:	cf 92       	push	r12
    618a:	df 92       	push	r13
    618c:	ef 92       	push	r14
    618e:	ff 92       	push	r15
    6190:	0f 93       	push	r16
    6192:	1f 93       	push	r17
    6194:	cf 93       	push	r28
    6196:	df 93       	push	r29
    6198:	cd b7       	in	r28, 0x3d	; 61
    619a:	de b7       	in	r29, 0x3e	; 62
    619c:	ca 1b       	sub	r28, r26
    619e:	db 0b       	sbc	r29, r27
    61a0:	0f b6       	in	r0, 0x3f	; 63
    61a2:	f8 94       	cli
    61a4:	de bf       	out	0x3e, r29	; 62
    61a6:	0f be       	out	0x3f, r0	; 63
    61a8:	cd bf       	out	0x3d, r28	; 61
    61aa:	09 94       	ijmp

000061ac <__epilogue_restores__>:
    61ac:	2a 88       	ldd	r2, Y+18	; 0x12
    61ae:	39 88       	ldd	r3, Y+17	; 0x11
    61b0:	48 88       	ldd	r4, Y+16	; 0x10
    61b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    61b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    61b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    61b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    61ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    61bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    61be:	b9 84       	ldd	r11, Y+9	; 0x09
    61c0:	c8 84       	ldd	r12, Y+8	; 0x08
    61c2:	df 80       	ldd	r13, Y+7	; 0x07
    61c4:	ee 80       	ldd	r14, Y+6	; 0x06
    61c6:	fd 80       	ldd	r15, Y+5	; 0x05
    61c8:	0c 81       	ldd	r16, Y+4	; 0x04
    61ca:	1b 81       	ldd	r17, Y+3	; 0x03
    61cc:	aa 81       	ldd	r26, Y+2	; 0x02
    61ce:	b9 81       	ldd	r27, Y+1	; 0x01
    61d0:	ce 0f       	add	r28, r30
    61d2:	d1 1d       	adc	r29, r1
    61d4:	0f b6       	in	r0, 0x3f	; 63
    61d6:	f8 94       	cli
    61d8:	de bf       	out	0x3e, r29	; 62
    61da:	0f be       	out	0x3f, r0	; 63
    61dc:	cd bf       	out	0x3d, r28	; 61
    61de:	ed 01       	movw	r28, r26
    61e0:	08 95       	ret

000061e2 <itoa>:
    61e2:	fb 01       	movw	r30, r22
    61e4:	9f 01       	movw	r18, r30
    61e6:	e8 94       	clt
    61e8:	42 30       	cpi	r20, 0x02	; 2
    61ea:	c4 f0       	brlt	.+48     	; 0x621c <itoa+0x3a>
    61ec:	45 32       	cpi	r20, 0x25	; 37
    61ee:	b4 f4       	brge	.+44     	; 0x621c <itoa+0x3a>
    61f0:	4a 30       	cpi	r20, 0x0A	; 10
    61f2:	29 f4       	brne	.+10     	; 0x61fe <itoa+0x1c>
    61f4:	97 fb       	bst	r25, 7
    61f6:	1e f4       	brtc	.+6      	; 0x61fe <itoa+0x1c>
    61f8:	90 95       	com	r25
    61fa:	81 95       	neg	r24
    61fc:	9f 4f       	sbci	r25, 0xFF	; 255
    61fe:	64 2f       	mov	r22, r20
    6200:	77 27       	eor	r23, r23
    6202:	0e 94 22 31 	call	0x6244	; 0x6244 <__udivmodhi4>
    6206:	80 5d       	subi	r24, 0xD0	; 208
    6208:	8a 33       	cpi	r24, 0x3A	; 58
    620a:	0c f0       	brlt	.+2      	; 0x620e <itoa+0x2c>
    620c:	89 5d       	subi	r24, 0xD9	; 217
    620e:	81 93       	st	Z+, r24
    6210:	cb 01       	movw	r24, r22
    6212:	00 97       	sbiw	r24, 0x00	; 0
    6214:	a1 f7       	brne	.-24     	; 0x61fe <itoa+0x1c>
    6216:	16 f4       	brtc	.+4      	; 0x621c <itoa+0x3a>
    6218:	5d e2       	ldi	r21, 0x2D	; 45
    621a:	51 93       	st	Z+, r21
    621c:	10 82       	st	Z, r1
    621e:	c9 01       	movw	r24, r18
    6220:	0c 94 12 31 	jmp	0x6224	; 0x6224 <strrev>

00006224 <strrev>:
    6224:	dc 01       	movw	r26, r24
    6226:	fc 01       	movw	r30, r24
    6228:	67 2f       	mov	r22, r23
    622a:	71 91       	ld	r23, Z+
    622c:	77 23       	and	r23, r23
    622e:	e1 f7       	brne	.-8      	; 0x6228 <strrev+0x4>
    6230:	32 97       	sbiw	r30, 0x02	; 2
    6232:	04 c0       	rjmp	.+8      	; 0x623c <strrev+0x18>
    6234:	7c 91       	ld	r23, X
    6236:	6d 93       	st	X+, r22
    6238:	70 83       	st	Z, r23
    623a:	62 91       	ld	r22, -Z
    623c:	ae 17       	cp	r26, r30
    623e:	bf 07       	cpc	r27, r31
    6240:	c8 f3       	brcs	.-14     	; 0x6234 <strrev+0x10>
    6242:	08 95       	ret

00006244 <__udivmodhi4>:
    6244:	aa 1b       	sub	r26, r26
    6246:	bb 1b       	sub	r27, r27
    6248:	51 e1       	ldi	r21, 0x11	; 17
    624a:	07 c0       	rjmp	.+14     	; 0x625a <__udivmodhi4_ep>

0000624c <__udivmodhi4_loop>:
    624c:	aa 1f       	adc	r26, r26
    624e:	bb 1f       	adc	r27, r27
    6250:	a6 17       	cp	r26, r22
    6252:	b7 07       	cpc	r27, r23
    6254:	10 f0       	brcs	.+4      	; 0x625a <__udivmodhi4_ep>
    6256:	a6 1b       	sub	r26, r22
    6258:	b7 0b       	sbc	r27, r23

0000625a <__udivmodhi4_ep>:
    625a:	88 1f       	adc	r24, r24
    625c:	99 1f       	adc	r25, r25
    625e:	5a 95       	dec	r21
    6260:	a9 f7       	brne	.-22     	; 0x624c <__udivmodhi4_loop>
    6262:	80 95       	com	r24
    6264:	90 95       	com	r25
    6266:	bc 01       	movw	r22, r24
    6268:	cd 01       	movw	r24, r26
    626a:	08 95       	ret

0000626c <_exit>:
    626c:	f8 94       	cli

0000626e <__stop_program>:
    626e:	ff cf       	rjmp	.-2      	; 0x626e <__stop_program>
